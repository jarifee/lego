// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tx.proto

#ifndef PROTOBUF_INCLUDED_tx_2eproto
#define PROTOBUF_INCLUDED_tx_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tx_2eproto 

namespace protobuf_tx_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tx_2eproto
namespace lego {
namespace bft {
namespace protobuf {
class BackupTxPreCommit;
class BackupTxPreCommitDefaultTypeInternal;
extern BackupTxPreCommitDefaultTypeInternal _BackupTxPreCommit_default_instance_;
class BackupTxPrepare;
class BackupTxPrepareDefaultTypeInternal;
extern BackupTxPrepareDefaultTypeInternal _BackupTxPrepare_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class CheckTxRequest;
class CheckTxRequestDefaultTypeInternal;
extern CheckTxRequestDefaultTypeInternal _CheckTxRequest_default_instance_;
class CheckTxResponse;
class CheckTxResponseDefaultTypeInternal;
extern CheckTxResponseDefaultTypeInternal _CheckTxResponse_default_instance_;
class LeaderTxCommit;
class LeaderTxCommitDefaultTypeInternal;
extern LeaderTxCommitDefaultTypeInternal _LeaderTxCommit_default_instance_;
class LeaderTxPreCommit;
class LeaderTxPreCommitDefaultTypeInternal;
extern LeaderTxPreCommitDefaultTypeInternal _LeaderTxPreCommit_default_instance_;
class LeaderTxPrepare;
class LeaderTxPrepareDefaultTypeInternal;
extern LeaderTxPrepareDefaultTypeInternal _LeaderTxPrepare_default_instance_;
class NewTx;
class NewTxDefaultTypeInternal;
extern NewTxDefaultTypeInternal _NewTx_default_instance_;
class TxBft;
class TxBftDefaultTypeInternal;
extern TxBftDefaultTypeInternal _TxBft_default_instance_;
class TxBlock;
class TxBlockDefaultTypeInternal;
extern TxBlockDefaultTypeInternal _TxBlock_default_instance_;
class TxInfo;
class TxInfoDefaultTypeInternal;
extern TxInfoDefaultTypeInternal _TxInfo_default_instance_;
class TxPrepareItem;
class TxPrepareItemDefaultTypeInternal;
extern TxPrepareItemDefaultTypeInternal _TxPrepareItem_default_instance_;
}  // namespace protobuf
}  // namespace bft
}  // namespace lego
namespace google {
namespace protobuf {
template<> ::lego::bft::protobuf::BackupTxPreCommit* Arena::CreateMaybeMessage<::lego::bft::protobuf::BackupTxPreCommit>(Arena*);
template<> ::lego::bft::protobuf::BackupTxPrepare* Arena::CreateMaybeMessage<::lego::bft::protobuf::BackupTxPrepare>(Arena*);
template<> ::lego::bft::protobuf::Block* Arena::CreateMaybeMessage<::lego::bft::protobuf::Block>(Arena*);
template<> ::lego::bft::protobuf::CheckTxRequest* Arena::CreateMaybeMessage<::lego::bft::protobuf::CheckTxRequest>(Arena*);
template<> ::lego::bft::protobuf::CheckTxResponse* Arena::CreateMaybeMessage<::lego::bft::protobuf::CheckTxResponse>(Arena*);
template<> ::lego::bft::protobuf::LeaderTxCommit* Arena::CreateMaybeMessage<::lego::bft::protobuf::LeaderTxCommit>(Arena*);
template<> ::lego::bft::protobuf::LeaderTxPreCommit* Arena::CreateMaybeMessage<::lego::bft::protobuf::LeaderTxPreCommit>(Arena*);
template<> ::lego::bft::protobuf::LeaderTxPrepare* Arena::CreateMaybeMessage<::lego::bft::protobuf::LeaderTxPrepare>(Arena*);
template<> ::lego::bft::protobuf::NewTx* Arena::CreateMaybeMessage<::lego::bft::protobuf::NewTx>(Arena*);
template<> ::lego::bft::protobuf::TxBft* Arena::CreateMaybeMessage<::lego::bft::protobuf::TxBft>(Arena*);
template<> ::lego::bft::protobuf::TxBlock* Arena::CreateMaybeMessage<::lego::bft::protobuf::TxBlock>(Arena*);
template<> ::lego::bft::protobuf::TxInfo* Arena::CreateMaybeMessage<::lego::bft::protobuf::TxInfo>(Arena*);
template<> ::lego::bft::protobuf::TxPrepareItem* Arena::CreateMaybeMessage<::lego::bft::protobuf::TxPrepareItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lego {
namespace bft {
namespace protobuf {

// ===================================================================

class TxInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.TxInfo) */ {
 public:
  TxInfo();
  virtual ~TxInfo();

  TxInfo(const TxInfo& from);

  inline TxInfo& operator=(const TxInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxInfo(TxInfo&& from) noexcept
    : TxInfo() {
    *this = ::std::move(from);
  }

  inline TxInfo& operator=(TxInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInfo* internal_default_instance() {
    return reinterpret_cast<const TxInfo*>(
               &_TxInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TxInfo* other);
  friend void swap(TxInfo& a, TxInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxInfo* New() const final {
    return CreateMaybeMessage<TxInfo>(NULL);
  }

  TxInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxInfo& from);
  void MergeFrom(const TxInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 2;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional bytes from_pubkey = 4;
  bool has_from_pubkey() const;
  void clear_from_pubkey();
  static const int kFromPubkeyFieldNumber = 4;
  const ::std::string& from_pubkey() const;
  void set_from_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_pubkey(::std::string&& value);
  #endif
  void set_from_pubkey(const char* value);
  void set_from_pubkey(const void* value, size_t size);
  ::std::string* mutable_from_pubkey();
  ::std::string* release_from_pubkey();
  void set_allocated_from_pubkey(::std::string* from_pubkey);

  // optional bytes from_sign = 5;
  bool has_from_sign() const;
  void clear_from_sign();
  static const int kFromSignFieldNumber = 5;
  const ::std::string& from_sign() const;
  void set_from_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_from_sign(::std::string&& value);
  #endif
  void set_from_sign(const char* value);
  void set_from_sign(const void* value, size_t size);
  ::std::string* mutable_from_sign();
  ::std::string* release_from_sign();
  void set_allocated_from_sign(::std::string* from_sign);

  // optional bytes to = 6;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 6;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool to_add = 12;
  bool has_to_add() const;
  void clear_to_add();
  static const int kToAddFieldNumber = 12;
  bool to_add() const;
  void set_to_add(bool value);

  // optional uint64 amount = 7;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 gas_limit = 8;
  bool has_gas_limit() const;
  void clear_gas_limit();
  static const int kGasLimitFieldNumber = 8;
  ::google::protobuf::uint64 gas_limit() const;
  void set_gas_limit(::google::protobuf::uint64 value);

  // optional uint64 gas_used = 9;
  bool has_gas_used() const;
  void clear_gas_used();
  static const int kGasUsedFieldNumber = 9;
  ::google::protobuf::uint64 gas_used() const;
  void set_gas_used(::google::protobuf::uint64 value);

  // optional uint64 gas_price = 10;
  bool has_gas_price() const;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 10;
  ::google::protobuf::uint64 gas_price() const;
  void set_gas_price(::google::protobuf::uint64 value);

  // optional uint64 balance = 11;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 11;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.TxInfo)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_gid();
  void clear_has_gid();
  void set_has_from();
  void clear_has_from();
  void set_has_from_pubkey();
  void clear_has_from_pubkey();
  void set_has_from_sign();
  void clear_has_from_sign();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();
  void set_has_gas_limit();
  void clear_has_gas_limit();
  void set_has_gas_used();
  void clear_has_gas_used();
  void set_has_gas_price();
  void clear_has_gas_price();
  void set_has_balance();
  void clear_has_balance();
  void set_has_to_add();
  void clear_has_to_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr from_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr from_sign_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::uint32 version_;
  bool to_add_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 gas_limit_;
  ::google::protobuf::uint64 gas_used_;
  ::google::protobuf::uint64 gas_price_;
  ::google::protobuf::uint64 balance_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.TxBlock) */ {
 public:
  TxBlock();
  virtual ~TxBlock();

  TxBlock(const TxBlock& from);

  inline TxBlock& operator=(const TxBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxBlock(TxBlock&& from) noexcept
    : TxBlock() {
    *this = ::std::move(from);
  }

  inline TxBlock& operator=(TxBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxBlock* internal_default_instance() {
    return reinterpret_cast<const TxBlock*>(
               &_TxBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TxBlock* other);
  friend void swap(TxBlock& a, TxBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxBlock* New() const final {
    return CreateMaybeMessage<TxBlock>(NULL);
  }

  TxBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxBlock& from);
  void MergeFrom(const TxBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bitmap = 5;
  int bitmap_size() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 5;
  ::google::protobuf::uint64 bitmap(int index) const;
  void set_bitmap(int index, ::google::protobuf::uint64 value);
  void add_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bitmap();

  // repeated .lego.bft.protobuf.TxInfo tx_list = 11;
  int tx_list_size() const;
  void clear_tx_list();
  static const int kTxListFieldNumber = 11;
  ::lego::bft::protobuf::TxInfo* mutable_tx_list(int index);
  ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxInfo >*
      mutable_tx_list();
  const ::lego::bft::protobuf::TxInfo& tx_list(int index) const;
  ::lego::bft::protobuf::TxInfo* add_tx_list();
  const ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxInfo >&
      tx_list() const;

  // optional bytes prehash = 1;
  bool has_prehash() const;
  void clear_prehash();
  static const int kPrehashFieldNumber = 1;
  const ::std::string& prehash() const;
  void set_prehash(const ::std::string& value);
  #if LANG_CXX11
  void set_prehash(::std::string&& value);
  #endif
  void set_prehash(const char* value);
  void set_prehash(const void* value, size_t size);
  ::std::string* mutable_prehash();
  ::std::string* release_prehash();
  void set_allocated_prehash(::std::string* prehash);

  // optional bytes rc_hash = 4;
  bool has_rc_hash() const;
  void clear_rc_hash();
  static const int kRcHashFieldNumber = 4;
  const ::std::string& rc_hash() const;
  void set_rc_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_rc_hash(::std::string&& value);
  #endif
  void set_rc_hash(const char* value);
  void set_rc_hash(const void* value, size_t size);
  ::std::string* mutable_rc_hash();
  ::std::string* release_rc_hash();
  void set_allocated_rc_hash(::std::string* rc_hash);

  // optional bytes agg_pubkey = 6;
  bool has_agg_pubkey() const;
  void clear_agg_pubkey();
  static const int kAggPubkeyFieldNumber = 6;
  const ::std::string& agg_pubkey() const;
  void set_agg_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_agg_pubkey(::std::string&& value);
  #endif
  void set_agg_pubkey(const char* value);
  void set_agg_pubkey(const void* value, size_t size);
  ::std::string* mutable_agg_pubkey();
  ::std::string* release_agg_pubkey();
  void set_allocated_agg_pubkey(::std::string* agg_pubkey);

  // optional bytes agg_sign = 7;
  bool has_agg_sign() const;
  void clear_agg_sign();
  static const int kAggSignFieldNumber = 7;
  const ::std::string& agg_sign() const;
  void set_agg_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_agg_sign(::std::string&& value);
  #endif
  void set_agg_sign(const char* value);
  void set_agg_sign(const void* value, size_t size);
  ::std::string* mutable_agg_sign();
  ::std::string* release_agg_sign();
  void set_allocated_agg_sign(::std::string* agg_sign);

  // optional bytes tx_hash = 9;
  bool has_tx_hash() const;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 9;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_hash(::std::string&& value);
  #endif
  void set_tx_hash(const char* value);
  void set_tx_hash(const void* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // optional bytes tx_root_hash = 10;
  bool has_tx_root_hash() const;
  void clear_tx_root_hash();
  static const int kTxRootHashFieldNumber = 10;
  const ::std::string& tx_root_hash() const;
  void set_tx_root_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_root_hash(::std::string&& value);
  #endif
  void set_tx_root_hash(const char* value);
  void set_tx_root_hash(const void* value, size_t size);
  ::std::string* mutable_tx_root_hash();
  ::std::string* release_tx_root_hash();
  void set_allocated_tx_root_hash(::std::string* tx_root_hash);

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 elect_ver = 3;
  bool has_elect_ver() const;
  void clear_elect_ver();
  static const int kElectVerFieldNumber = 3;
  ::google::protobuf::uint32 elect_ver() const;
  void set_elect_ver(::google::protobuf::uint32 value);

  // optional uint64 tx_id = 8;
  bool has_tx_id() const;
  void clear_tx_id();
  static const int kTxIdFieldNumber = 8;
  ::google::protobuf::uint64 tx_id() const;
  void set_tx_id(::google::protobuf::uint64 value);

  // optional uint32 network_id = 12;
  bool has_network_id() const;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 12;
  ::google::protobuf::uint32 network_id() const;
  void set_network_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.TxBlock)
 private:
  void set_has_prehash();
  void clear_has_prehash();
  void set_has_version();
  void clear_has_version();
  void set_has_elect_ver();
  void clear_has_elect_ver();
  void set_has_rc_hash();
  void clear_has_rc_hash();
  void set_has_agg_pubkey();
  void clear_has_agg_pubkey();
  void set_has_agg_sign();
  void clear_has_agg_sign();
  void set_has_tx_id();
  void clear_has_tx_id();
  void set_has_tx_hash();
  void clear_has_tx_hash();
  void set_has_tx_root_hash();
  void clear_has_tx_root_hash();
  void set_has_network_id();
  void clear_has_network_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bitmap_;
  ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxInfo > tx_list_;
  ::google::protobuf::internal::ArenaStringPtr prehash_;
  ::google::protobuf::internal::ArenaStringPtr rc_hash_;
  ::google::protobuf::internal::ArenaStringPtr agg_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr agg_sign_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::internal::ArenaStringPtr tx_root_hash_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 elect_ver_;
  ::google::protobuf::uint64 tx_id_;
  ::google::protobuf::uint32 network_id_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional .lego.bft.protobuf.TxBlock tx_block = 3;
  bool has_tx_block() const;
  void clear_tx_block();
  static const int kTxBlockFieldNumber = 3;
  private:
  const ::lego::bft::protobuf::TxBlock& _internal_tx_block() const;
  public:
  const ::lego::bft::protobuf::TxBlock& tx_block() const;
  ::lego::bft::protobuf::TxBlock* release_tx_block();
  ::lego::bft::protobuf::TxBlock* mutable_tx_block();
  void set_allocated_tx_block(::lego::bft::protobuf::TxBlock* tx_block);

  // optional uint64 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.Block)
 private:
  void set_has_hash();
  void clear_has_hash();
  void set_has_height();
  void clear_has_height();
  void set_has_tx_block();
  void clear_has_tx_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::lego::bft::protobuf::TxBlock* tx_block_;
  ::google::protobuf::uint64 height_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxPrepareItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.TxPrepareItem) */ {
 public:
  TxPrepareItem();
  virtual ~TxPrepareItem();

  TxPrepareItem(const TxPrepareItem& from);

  inline TxPrepareItem& operator=(const TxPrepareItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxPrepareItem(TxPrepareItem&& from) noexcept
    : TxPrepareItem() {
    *this = ::std::move(from);
  }

  inline TxPrepareItem& operator=(TxPrepareItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxPrepareItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxPrepareItem* internal_default_instance() {
    return reinterpret_cast<const TxPrepareItem*>(
               &_TxPrepareItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TxPrepareItem* other);
  friend void swap(TxPrepareItem& a, TxPrepareItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxPrepareItem* New() const final {
    return CreateMaybeMessage<TxPrepareItem>(NULL);
  }

  TxPrepareItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxPrepareItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxPrepareItem& from);
  void MergeFrom(const TxPrepareItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxPrepareItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes acc_addr = 1;
  bool has_acc_addr() const;
  void clear_acc_addr();
  static const int kAccAddrFieldNumber = 1;
  const ::std::string& acc_addr() const;
  void set_acc_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_acc_addr(::std::string&& value);
  #endif
  void set_acc_addr(const char* value);
  void set_acc_addr(const void* value, size_t size);
  ::std::string* mutable_acc_addr();
  ::std::string* release_acc_addr();
  void set_allocated_acc_addr(::std::string* acc_addr);

  // optional bytes gid = 2;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.TxPrepareItem)
 private:
  void set_has_acc_addr();
  void clear_has_acc_addr();
  void set_has_gid();
  void clear_has_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr acc_addr_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderTxPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.LeaderTxPrepare) */ {
 public:
  LeaderTxPrepare();
  virtual ~LeaderTxPrepare();

  LeaderTxPrepare(const LeaderTxPrepare& from);

  inline LeaderTxPrepare& operator=(const LeaderTxPrepare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderTxPrepare(LeaderTxPrepare&& from) noexcept
    : LeaderTxPrepare() {
    *this = ::std::move(from);
  }

  inline LeaderTxPrepare& operator=(LeaderTxPrepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderTxPrepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderTxPrepare* internal_default_instance() {
    return reinterpret_cast<const LeaderTxPrepare*>(
               &_LeaderTxPrepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LeaderTxPrepare* other);
  friend void swap(LeaderTxPrepare& a, LeaderTxPrepare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderTxPrepare* New() const final {
    return CreateMaybeMessage<LeaderTxPrepare>(NULL);
  }

  LeaderTxPrepare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaderTxPrepare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaderTxPrepare& from);
  void MergeFrom(const LeaderTxPrepare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTxPrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lego.bft.protobuf.TxPrepareItem txs = 1;
  int txs_size() const;
  void clear_txs();
  static const int kTxsFieldNumber = 1;
  ::lego::bft::protobuf::TxPrepareItem* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxPrepareItem >*
      mutable_txs();
  const ::lego::bft::protobuf::TxPrepareItem& txs(int index) const;
  ::lego::bft::protobuf::TxPrepareItem* add_txs();
  const ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxPrepareItem >&
      txs() const;

  // optional .lego.bft.protobuf.Block block = 2;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 2;
  private:
  const ::lego::bft::protobuf::Block& _internal_block() const;
  public:
  const ::lego::bft::protobuf::Block& block() const;
  ::lego::bft::protobuf::Block* release_block();
  ::lego::bft::protobuf::Block* mutable_block();
  void set_allocated_block(::lego::bft::protobuf::Block* block);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.LeaderTxPrepare)
 private:
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxPrepareItem > txs_;
  ::lego::bft::protobuf::Block* block_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupTxPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.BackupTxPrepare) */ {
 public:
  BackupTxPrepare();
  virtual ~BackupTxPrepare();

  BackupTxPrepare(const BackupTxPrepare& from);

  inline BackupTxPrepare& operator=(const BackupTxPrepare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackupTxPrepare(BackupTxPrepare&& from) noexcept
    : BackupTxPrepare() {
    *this = ::std::move(from);
  }

  inline BackupTxPrepare& operator=(BackupTxPrepare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupTxPrepare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackupTxPrepare* internal_default_instance() {
    return reinterpret_cast<const BackupTxPrepare*>(
               &_BackupTxPrepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BackupTxPrepare* other);
  friend void swap(BackupTxPrepare& a, BackupTxPrepare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackupTxPrepare* New() const final {
    return CreateMaybeMessage<BackupTxPrepare>(NULL);
  }

  BackupTxPrepare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackupTxPrepare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BackupTxPrepare& from);
  void MergeFrom(const BackupTxPrepare& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupTxPrepare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.BackupTxPrepare)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderTxPreCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.LeaderTxPreCommit) */ {
 public:
  LeaderTxPreCommit();
  virtual ~LeaderTxPreCommit();

  LeaderTxPreCommit(const LeaderTxPreCommit& from);

  inline LeaderTxPreCommit& operator=(const LeaderTxPreCommit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderTxPreCommit(LeaderTxPreCommit&& from) noexcept
    : LeaderTxPreCommit() {
    *this = ::std::move(from);
  }

  inline LeaderTxPreCommit& operator=(LeaderTxPreCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderTxPreCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderTxPreCommit* internal_default_instance() {
    return reinterpret_cast<const LeaderTxPreCommit*>(
               &_LeaderTxPreCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LeaderTxPreCommit* other);
  friend void swap(LeaderTxPreCommit& a, LeaderTxPreCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderTxPreCommit* New() const final {
    return CreateMaybeMessage<LeaderTxPreCommit>(NULL);
  }

  LeaderTxPreCommit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaderTxPreCommit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaderTxPreCommit& from);
  void MergeFrom(const LeaderTxPreCommit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTxPreCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.LeaderTxPreCommit)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupTxPreCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.BackupTxPreCommit) */ {
 public:
  BackupTxPreCommit();
  virtual ~BackupTxPreCommit();

  BackupTxPreCommit(const BackupTxPreCommit& from);

  inline BackupTxPreCommit& operator=(const BackupTxPreCommit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackupTxPreCommit(BackupTxPreCommit&& from) noexcept
    : BackupTxPreCommit() {
    *this = ::std::move(from);
  }

  inline BackupTxPreCommit& operator=(BackupTxPreCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupTxPreCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackupTxPreCommit* internal_default_instance() {
    return reinterpret_cast<const BackupTxPreCommit*>(
               &_BackupTxPreCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BackupTxPreCommit* other);
  friend void swap(BackupTxPreCommit& a, BackupTxPreCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackupTxPreCommit* New() const final {
    return CreateMaybeMessage<BackupTxPreCommit>(NULL);
  }

  BackupTxPreCommit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackupTxPreCommit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BackupTxPreCommit& from);
  void MergeFrom(const BackupTxPreCommit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupTxPreCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.BackupTxPreCommit)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeaderTxCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.LeaderTxCommit) */ {
 public:
  LeaderTxCommit();
  virtual ~LeaderTxCommit();

  LeaderTxCommit(const LeaderTxCommit& from);

  inline LeaderTxCommit& operator=(const LeaderTxCommit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderTxCommit(LeaderTxCommit&& from) noexcept
    : LeaderTxCommit() {
    *this = ::std::move(from);
  }

  inline LeaderTxCommit& operator=(LeaderTxCommit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderTxCommit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderTxCommit* internal_default_instance() {
    return reinterpret_cast<const LeaderTxCommit*>(
               &_LeaderTxCommit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LeaderTxCommit* other);
  friend void swap(LeaderTxCommit& a, LeaderTxCommit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderTxCommit* New() const final {
    return CreateMaybeMessage<LeaderTxCommit>(NULL);
  }

  LeaderTxCommit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeaderTxCommit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LeaderTxCommit& from);
  void MergeFrom(const LeaderTxCommit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderTxCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.LeaderTxCommit)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.NewTx) */ {
 public:
  NewTx();
  virtual ~NewTx();

  NewTx(const NewTx& from);

  inline NewTx& operator=(const NewTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewTx(NewTx&& from) noexcept
    : NewTx() {
    *this = ::std::move(from);
  }

  inline NewTx& operator=(NewTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewTx* internal_default_instance() {
    return reinterpret_cast<const NewTx*>(
               &_NewTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(NewTx* other);
  friend void swap(NewTx& a, NewTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewTx* New() const final {
    return CreateMaybeMessage<NewTx>(NULL);
  }

  NewTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewTx& from);
  void MergeFrom(const NewTx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes from_acc_addr = 2;
  bool has_from_acc_addr() const;
  void clear_from_acc_addr();
  static const int kFromAccAddrFieldNumber = 2;
  const ::std::string& from_acc_addr() const;
  void set_from_acc_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_acc_addr(::std::string&& value);
  #endif
  void set_from_acc_addr(const char* value);
  void set_from_acc_addr(const void* value, size_t size);
  ::std::string* mutable_from_acc_addr();
  ::std::string* release_from_acc_addr();
  void set_allocated_from_acc_addr(::std::string* from_acc_addr);

  // optional bytes from_pubkey = 3;
  bool has_from_pubkey() const;
  void clear_from_pubkey();
  static const int kFromPubkeyFieldNumber = 3;
  const ::std::string& from_pubkey() const;
  void set_from_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_pubkey(::std::string&& value);
  #endif
  void set_from_pubkey(const char* value);
  void set_from_pubkey(const void* value, size_t size);
  ::std::string* mutable_from_pubkey();
  ::std::string* release_from_pubkey();
  void set_allocated_from_pubkey(::std::string* from_pubkey);

  // optional bytes from_sign = 4;
  bool has_from_sign() const;
  void clear_from_sign();
  static const int kFromSignFieldNumber = 4;
  const ::std::string& from_sign() const;
  void set_from_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_from_sign(::std::string&& value);
  #endif
  void set_from_sign(const char* value);
  void set_from_sign(const void* value, size_t size);
  ::std::string* mutable_from_sign();
  ::std::string* release_from_sign();
  void set_allocated_from_sign(::std::string* from_sign);

  // optional bytes to_acc_addr = 5;
  bool has_to_acc_addr() const;
  void clear_to_acc_addr();
  static const int kToAccAddrFieldNumber = 5;
  const ::std::string& to_acc_addr() const;
  void set_to_acc_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_to_acc_addr(::std::string&& value);
  #endif
  void set_to_acc_addr(const char* value);
  void set_to_acc_addr(const void* value, size_t size);
  ::std::string* mutable_to_acc_addr();
  ::std::string* release_to_acc_addr();
  void set_allocated_to_acc_addr(::std::string* to_acc_addr);

  // optional uint64 lego_count = 6;
  bool has_lego_count() const;
  void clear_lego_count();
  static const int kLegoCountFieldNumber = 6;
  ::google::protobuf::uint64 lego_count() const;
  void set_lego_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.NewTx)
 private:
  void set_has_gid();
  void clear_has_gid();
  void set_has_from_acc_addr();
  void clear_has_from_acc_addr();
  void set_has_from_pubkey();
  void clear_has_from_pubkey();
  void set_has_from_sign();
  void clear_has_from_sign();
  void set_has_to_acc_addr();
  void clear_has_to_acc_addr();
  void set_has_lego_count();
  void clear_has_lego_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr from_acc_addr_;
  ::google::protobuf::internal::ArenaStringPtr from_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr from_sign_;
  ::google::protobuf::internal::ArenaStringPtr to_acc_addr_;
  ::google::protobuf::uint64 lego_count_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckTxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.CheckTxRequest) */ {
 public:
  CheckTxRequest();
  virtual ~CheckTxRequest();

  CheckTxRequest(const CheckTxRequest& from);

  inline CheckTxRequest& operator=(const CheckTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckTxRequest(CheckTxRequest&& from) noexcept
    : CheckTxRequest() {
    *this = ::std::move(from);
  }

  inline CheckTxRequest& operator=(CheckTxRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckTxRequest* internal_default_instance() {
    return reinterpret_cast<const CheckTxRequest*>(
               &_CheckTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CheckTxRequest* other);
  friend void swap(CheckTxRequest& a, CheckTxRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckTxRequest* New() const final {
    return CreateMaybeMessage<CheckTxRequest>(NULL);
  }

  CheckTxRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckTxRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckTxRequest& from);
  void MergeFrom(const CheckTxRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckTxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx_gid = 1;
  bool has_tx_gid() const;
  void clear_tx_gid();
  static const int kTxGidFieldNumber = 1;
  const ::std::string& tx_gid() const;
  void set_tx_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_gid(::std::string&& value);
  #endif
  void set_tx_gid(const char* value);
  void set_tx_gid(const void* value, size_t size);
  ::std::string* mutable_tx_gid();
  ::std::string* release_tx_gid();
  void set_allocated_tx_gid(::std::string* tx_gid);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.CheckTxRequest)
 private:
  void set_has_tx_gid();
  void clear_has_tx_gid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tx_gid_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckTxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.CheckTxResponse) */ {
 public:
  CheckTxResponse();
  virtual ~CheckTxResponse();

  CheckTxResponse(const CheckTxResponse& from);

  inline CheckTxResponse& operator=(const CheckTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckTxResponse(CheckTxResponse&& from) noexcept
    : CheckTxResponse() {
    *this = ::std::move(from);
  }

  inline CheckTxResponse& operator=(CheckTxResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckTxResponse* internal_default_instance() {
    return reinterpret_cast<const CheckTxResponse*>(
               &_CheckTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CheckTxResponse* other);
  friend void swap(CheckTxResponse& a, CheckTxResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckTxResponse* New() const final {
    return CreateMaybeMessage<CheckTxResponse>(NULL);
  }

  CheckTxResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckTxResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckTxResponse& from);
  void MergeFrom(const CheckTxResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckTxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.CheckTxResponse)
 private:
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxBft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.bft.protobuf.TxBft) */ {
 public:
  TxBft();
  virtual ~TxBft();

  TxBft(const TxBft& from);

  inline TxBft& operator=(const TxBft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxBft(TxBft&& from) noexcept
    : TxBft() {
    *this = ::std::move(from);
  }

  inline TxBft& operator=(TxBft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxBft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxBft* internal_default_instance() {
    return reinterpret_cast<const TxBft*>(
               &_TxBft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TxBft* other);
  friend void swap(TxBft& a, TxBft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxBft* New() const final {
    return CreateMaybeMessage<TxBft>(NULL);
  }

  TxBft* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxBft>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxBft& from);
  void MergeFrom(const TxBft& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lego.bft.protobuf.NewTx new_tx = 1;
  bool has_new_tx() const;
  void clear_new_tx();
  static const int kNewTxFieldNumber = 1;
  private:
  const ::lego::bft::protobuf::NewTx& _internal_new_tx() const;
  public:
  const ::lego::bft::protobuf::NewTx& new_tx() const;
  ::lego::bft::protobuf::NewTx* release_new_tx();
  ::lego::bft::protobuf::NewTx* mutable_new_tx();
  void set_allocated_new_tx(::lego::bft::protobuf::NewTx* new_tx);

  // optional .lego.bft.protobuf.LeaderTxPrepare ltx_prepare = 2;
  bool has_ltx_prepare() const;
  void clear_ltx_prepare();
  static const int kLtxPrepareFieldNumber = 2;
  private:
  const ::lego::bft::protobuf::LeaderTxPrepare& _internal_ltx_prepare() const;
  public:
  const ::lego::bft::protobuf::LeaderTxPrepare& ltx_prepare() const;
  ::lego::bft::protobuf::LeaderTxPrepare* release_ltx_prepare();
  ::lego::bft::protobuf::LeaderTxPrepare* mutable_ltx_prepare();
  void set_allocated_ltx_prepare(::lego::bft::protobuf::LeaderTxPrepare* ltx_prepare);

  // optional .lego.bft.protobuf.BackupTxPrepare btx_prepare = 3;
  bool has_btx_prepare() const;
  void clear_btx_prepare();
  static const int kBtxPrepareFieldNumber = 3;
  private:
  const ::lego::bft::protobuf::BackupTxPrepare& _internal_btx_prepare() const;
  public:
  const ::lego::bft::protobuf::BackupTxPrepare& btx_prepare() const;
  ::lego::bft::protobuf::BackupTxPrepare* release_btx_prepare();
  ::lego::bft::protobuf::BackupTxPrepare* mutable_btx_prepare();
  void set_allocated_btx_prepare(::lego::bft::protobuf::BackupTxPrepare* btx_prepare);

  // optional .lego.bft.protobuf.LeaderTxPreCommit ltx_precommit = 4;
  bool has_ltx_precommit() const;
  void clear_ltx_precommit();
  static const int kLtxPrecommitFieldNumber = 4;
  private:
  const ::lego::bft::protobuf::LeaderTxPreCommit& _internal_ltx_precommit() const;
  public:
  const ::lego::bft::protobuf::LeaderTxPreCommit& ltx_precommit() const;
  ::lego::bft::protobuf::LeaderTxPreCommit* release_ltx_precommit();
  ::lego::bft::protobuf::LeaderTxPreCommit* mutable_ltx_precommit();
  void set_allocated_ltx_precommit(::lego::bft::protobuf::LeaderTxPreCommit* ltx_precommit);

  // optional .lego.bft.protobuf.BackupTxPreCommit btx_precommit = 5;
  bool has_btx_precommit() const;
  void clear_btx_precommit();
  static const int kBtxPrecommitFieldNumber = 5;
  private:
  const ::lego::bft::protobuf::BackupTxPreCommit& _internal_btx_precommit() const;
  public:
  const ::lego::bft::protobuf::BackupTxPreCommit& btx_precommit() const;
  ::lego::bft::protobuf::BackupTxPreCommit* release_btx_precommit();
  ::lego::bft::protobuf::BackupTxPreCommit* mutable_btx_precommit();
  void set_allocated_btx_precommit(::lego::bft::protobuf::BackupTxPreCommit* btx_precommit);

  // optional .lego.bft.protobuf.LeaderTxCommit ltx_commit = 6;
  bool has_ltx_commit() const;
  void clear_ltx_commit();
  static const int kLtxCommitFieldNumber = 6;
  private:
  const ::lego::bft::protobuf::LeaderTxCommit& _internal_ltx_commit() const;
  public:
  const ::lego::bft::protobuf::LeaderTxCommit& ltx_commit() const;
  ::lego::bft::protobuf::LeaderTxCommit* release_ltx_commit();
  ::lego::bft::protobuf::LeaderTxCommit* mutable_ltx_commit();
  void set_allocated_ltx_commit(::lego::bft::protobuf::LeaderTxCommit* ltx_commit);

  // optional .lego.bft.protobuf.CheckTxRequest check_tx_req = 7;
  bool has_check_tx_req() const;
  void clear_check_tx_req();
  static const int kCheckTxReqFieldNumber = 7;
  private:
  const ::lego::bft::protobuf::CheckTxRequest& _internal_check_tx_req() const;
  public:
  const ::lego::bft::protobuf::CheckTxRequest& check_tx_req() const;
  ::lego::bft::protobuf::CheckTxRequest* release_check_tx_req();
  ::lego::bft::protobuf::CheckTxRequest* mutable_check_tx_req();
  void set_allocated_check_tx_req(::lego::bft::protobuf::CheckTxRequest* check_tx_req);

  // optional .lego.bft.protobuf.CheckTxResponse check_tx_res = 8;
  bool has_check_tx_res() const;
  void clear_check_tx_res();
  static const int kCheckTxResFieldNumber = 8;
  private:
  const ::lego::bft::protobuf::CheckTxResponse& _internal_check_tx_res() const;
  public:
  const ::lego::bft::protobuf::CheckTxResponse& check_tx_res() const;
  ::lego::bft::protobuf::CheckTxResponse* release_check_tx_res();
  ::lego::bft::protobuf::CheckTxResponse* mutable_check_tx_res();
  void set_allocated_check_tx_res(::lego::bft::protobuf::CheckTxResponse* check_tx_res);

  // @@protoc_insertion_point(class_scope:lego.bft.protobuf.TxBft)
 private:
  void set_has_new_tx();
  void clear_has_new_tx();
  void set_has_ltx_prepare();
  void clear_has_ltx_prepare();
  void set_has_btx_prepare();
  void clear_has_btx_prepare();
  void set_has_ltx_precommit();
  void clear_has_ltx_precommit();
  void set_has_btx_precommit();
  void clear_has_btx_precommit();
  void set_has_ltx_commit();
  void clear_has_ltx_commit();
  void set_has_check_tx_req();
  void clear_has_check_tx_req();
  void set_has_check_tx_res();
  void clear_has_check_tx_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::lego::bft::protobuf::NewTx* new_tx_;
  ::lego::bft::protobuf::LeaderTxPrepare* ltx_prepare_;
  ::lego::bft::protobuf::BackupTxPrepare* btx_prepare_;
  ::lego::bft::protobuf::LeaderTxPreCommit* ltx_precommit_;
  ::lego::bft::protobuf::BackupTxPreCommit* btx_precommit_;
  ::lego::bft::protobuf::LeaderTxCommit* ltx_commit_;
  ::lego::bft::protobuf::CheckTxRequest* check_tx_req_;
  ::lego::bft::protobuf::CheckTxResponse* check_tx_res_;
  friend struct ::protobuf_tx_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxInfo

// optional uint32 version = 1;
inline bool TxInfo::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxInfo::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxInfo::version() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.version)
  return version_;
}
inline void TxInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.version)
}

// optional bytes gid = 2;
inline bool TxInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxInfo::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxInfo::gid() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.gid)
  return gid_.GetNoArena();
}
inline void TxInfo::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.gid)
}
#if LANG_CXX11
inline void TxInfo::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxInfo.gid)
}
#endif
inline void TxInfo::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxInfo.gid)
}
inline void TxInfo::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxInfo.gid)
}
inline ::std::string* TxInfo::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxInfo.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_gid() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxInfo.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxInfo.gid)
}

// optional bytes from = 3;
inline bool TxInfo::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxInfo::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxInfo::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxInfo::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& TxInfo::from() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.from)
  return from_.GetNoArena();
}
inline void TxInfo::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.from)
}
#if LANG_CXX11
inline void TxInfo::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxInfo.from)
}
#endif
inline void TxInfo::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxInfo.from)
}
inline void TxInfo::set_from(const void* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxInfo.from)
}
inline ::std::string* TxInfo::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxInfo.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxInfo.from)
  if (!has_from()) {
    return NULL;
  }
  clear_has_from();
  return from_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxInfo.from)
}

// optional bytes from_pubkey = 4;
inline bool TxInfo::has_from_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxInfo::set_has_from_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxInfo::clear_has_from_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxInfo::clear_from_pubkey() {
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_pubkey();
}
inline const ::std::string& TxInfo::from_pubkey() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.from_pubkey)
  return from_pubkey_.GetNoArena();
}
inline void TxInfo::set_from_pubkey(const ::std::string& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.from_pubkey)
}
#if LANG_CXX11
inline void TxInfo::set_from_pubkey(::std::string&& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxInfo.from_pubkey)
}
#endif
inline void TxInfo::set_from_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxInfo.from_pubkey)
}
inline void TxInfo::set_from_pubkey(const void* value, size_t size) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxInfo.from_pubkey)
}
inline ::std::string* TxInfo::mutable_from_pubkey() {
  set_has_from_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxInfo.from_pubkey)
  return from_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from_pubkey() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxInfo.from_pubkey)
  if (!has_from_pubkey()) {
    return NULL;
  }
  clear_has_from_pubkey();
  return from_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from_pubkey(::std::string* from_pubkey) {
  if (from_pubkey != NULL) {
    set_has_from_pubkey();
  } else {
    clear_has_from_pubkey();
  }
  from_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxInfo.from_pubkey)
}

// optional bytes from_sign = 5;
inline bool TxInfo::has_from_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxInfo::set_has_from_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxInfo::clear_has_from_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxInfo::clear_from_sign() {
  from_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_sign();
}
inline const ::std::string& TxInfo::from_sign() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.from_sign)
  return from_sign_.GetNoArena();
}
inline void TxInfo::set_from_sign(const ::std::string& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.from_sign)
}
#if LANG_CXX11
inline void TxInfo::set_from_sign(::std::string&& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxInfo.from_sign)
}
#endif
inline void TxInfo::set_from_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxInfo.from_sign)
}
inline void TxInfo::set_from_sign(const void* value, size_t size) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxInfo.from_sign)
}
inline ::std::string* TxInfo::mutable_from_sign() {
  set_has_from_sign();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxInfo.from_sign)
  return from_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from_sign() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxInfo.from_sign)
  if (!has_from_sign()) {
    return NULL;
  }
  clear_has_from_sign();
  return from_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from_sign(::std::string* from_sign) {
  if (from_sign != NULL) {
    set_has_from_sign();
  } else {
    clear_has_from_sign();
  }
  from_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_sign);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxInfo.from_sign)
}

// optional bytes to = 6;
inline bool TxInfo::has_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxInfo::set_has_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxInfo::clear_has_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxInfo::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TxInfo::to() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.to)
  return to_.GetNoArena();
}
inline void TxInfo::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.to)
}
#if LANG_CXX11
inline void TxInfo::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxInfo.to)
}
#endif
inline void TxInfo::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxInfo.to)
}
inline void TxInfo::set_to(const void* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxInfo.to)
}
inline ::std::string* TxInfo::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxInfo.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_to() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxInfo.to)
  if (!has_to()) {
    return NULL;
  }
  clear_has_to();
  return to_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxInfo.to)
}

// optional uint64 amount = 7;
inline bool TxInfo::has_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxInfo::set_has_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxInfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxInfo::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TxInfo::amount() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.amount)
  return amount_;
}
inline void TxInfo::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.amount)
}

// optional uint64 gas_limit = 8;
inline bool TxInfo::has_gas_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxInfo::set_has_gas_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxInfo::clear_has_gas_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxInfo::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_limit();
}
inline ::google::protobuf::uint64 TxInfo::gas_limit() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.gas_limit)
  return gas_limit_;
}
inline void TxInfo::set_gas_limit(::google::protobuf::uint64 value) {
  set_has_gas_limit();
  gas_limit_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.gas_limit)
}

// optional uint64 gas_used = 9;
inline bool TxInfo::has_gas_used() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxInfo::set_has_gas_used() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxInfo::clear_has_gas_used() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxInfo::clear_gas_used() {
  gas_used_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_used();
}
inline ::google::protobuf::uint64 TxInfo::gas_used() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.gas_used)
  return gas_used_;
}
inline void TxInfo::set_gas_used(::google::protobuf::uint64 value) {
  set_has_gas_used();
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.gas_used)
}

// optional uint64 gas_price = 10;
inline bool TxInfo::has_gas_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TxInfo::set_has_gas_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TxInfo::clear_has_gas_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TxInfo::clear_gas_price() {
  gas_price_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_price();
}
inline ::google::protobuf::uint64 TxInfo::gas_price() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.gas_price)
  return gas_price_;
}
inline void TxInfo::set_gas_price(::google::protobuf::uint64 value) {
  set_has_gas_price();
  gas_price_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.gas_price)
}

// optional uint64 balance = 11;
inline bool TxInfo::has_balance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TxInfo::set_has_balance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TxInfo::clear_has_balance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TxInfo::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 TxInfo::balance() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.balance)
  return balance_;
}
inline void TxInfo::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.balance)
}

// optional bool to_add = 12;
inline bool TxInfo::has_to_add() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxInfo::set_has_to_add() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxInfo::clear_has_to_add() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxInfo::clear_to_add() {
  to_add_ = false;
  clear_has_to_add();
}
inline bool TxInfo::to_add() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxInfo.to_add)
  return to_add_;
}
inline void TxInfo::set_to_add(bool value) {
  set_has_to_add();
  to_add_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxInfo.to_add)
}

// -------------------------------------------------------------------

// TxBlock

// optional bytes prehash = 1;
inline bool TxBlock::has_prehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxBlock::set_has_prehash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxBlock::clear_has_prehash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxBlock::clear_prehash() {
  prehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prehash();
}
inline const ::std::string& TxBlock::prehash() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.prehash)
  return prehash_.GetNoArena();
}
inline void TxBlock::set_prehash(const ::std::string& value) {
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.prehash)
}
#if LANG_CXX11
inline void TxBlock::set_prehash(::std::string&& value) {
  set_has_prehash();
  prehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxBlock.prehash)
}
#endif
inline void TxBlock::set_prehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxBlock.prehash)
}
inline void TxBlock::set_prehash(const void* value, size_t size) {
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxBlock.prehash)
}
inline ::std::string* TxBlock::mutable_prehash() {
  set_has_prehash();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.prehash)
  return prehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_prehash() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBlock.prehash)
  if (!has_prehash()) {
    return NULL;
  }
  clear_has_prehash();
  return prehash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_prehash(::std::string* prehash) {
  if (prehash != NULL) {
    set_has_prehash();
  } else {
    clear_has_prehash();
  }
  prehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prehash);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBlock.prehash)
}

// optional uint32 version = 2;
inline bool TxBlock::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxBlock::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxBlock::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxBlock::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxBlock::version() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.version)
  return version_;
}
inline void TxBlock::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.version)
}

// optional uint32 elect_ver = 3;
inline bool TxBlock::has_elect_ver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxBlock::set_has_elect_ver() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxBlock::clear_has_elect_ver() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxBlock::clear_elect_ver() {
  elect_ver_ = 0u;
  clear_has_elect_ver();
}
inline ::google::protobuf::uint32 TxBlock::elect_ver() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.elect_ver)
  return elect_ver_;
}
inline void TxBlock::set_elect_ver(::google::protobuf::uint32 value) {
  set_has_elect_ver();
  elect_ver_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.elect_ver)
}

// optional bytes rc_hash = 4;
inline bool TxBlock::has_rc_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxBlock::set_has_rc_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxBlock::clear_has_rc_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxBlock::clear_rc_hash() {
  rc_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rc_hash();
}
inline const ::std::string& TxBlock::rc_hash() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.rc_hash)
  return rc_hash_.GetNoArena();
}
inline void TxBlock::set_rc_hash(const ::std::string& value) {
  set_has_rc_hash();
  rc_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.rc_hash)
}
#if LANG_CXX11
inline void TxBlock::set_rc_hash(::std::string&& value) {
  set_has_rc_hash();
  rc_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxBlock.rc_hash)
}
#endif
inline void TxBlock::set_rc_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rc_hash();
  rc_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxBlock.rc_hash)
}
inline void TxBlock::set_rc_hash(const void* value, size_t size) {
  set_has_rc_hash();
  rc_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxBlock.rc_hash)
}
inline ::std::string* TxBlock::mutable_rc_hash() {
  set_has_rc_hash();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.rc_hash)
  return rc_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_rc_hash() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBlock.rc_hash)
  if (!has_rc_hash()) {
    return NULL;
  }
  clear_has_rc_hash();
  return rc_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_rc_hash(::std::string* rc_hash) {
  if (rc_hash != NULL) {
    set_has_rc_hash();
  } else {
    clear_has_rc_hash();
  }
  rc_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rc_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBlock.rc_hash)
}

// repeated uint64 bitmap = 5;
inline int TxBlock::bitmap_size() const {
  return bitmap_.size();
}
inline void TxBlock::clear_bitmap() {
  bitmap_.Clear();
}
inline ::google::protobuf::uint64 TxBlock::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.bitmap)
  return bitmap_.Get(index);
}
inline void TxBlock::set_bitmap(int index, ::google::protobuf::uint64 value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.bitmap)
}
inline void TxBlock::add_bitmap(::google::protobuf::uint64 value) {
  bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:lego.bft.protobuf.TxBlock.bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TxBlock::bitmap() const {
  // @@protoc_insertion_point(field_list:lego.bft.protobuf.TxBlock.bitmap)
  return bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TxBlock::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:lego.bft.protobuf.TxBlock.bitmap)
  return &bitmap_;
}

// optional bytes agg_pubkey = 6;
inline bool TxBlock::has_agg_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxBlock::set_has_agg_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxBlock::clear_has_agg_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxBlock::clear_agg_pubkey() {
  agg_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_agg_pubkey();
}
inline const ::std::string& TxBlock::agg_pubkey() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.agg_pubkey)
  return agg_pubkey_.GetNoArena();
}
inline void TxBlock::set_agg_pubkey(const ::std::string& value) {
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.agg_pubkey)
}
#if LANG_CXX11
inline void TxBlock::set_agg_pubkey(::std::string&& value) {
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxBlock.agg_pubkey)
}
#endif
inline void TxBlock::set_agg_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxBlock.agg_pubkey)
}
inline void TxBlock::set_agg_pubkey(const void* value, size_t size) {
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxBlock.agg_pubkey)
}
inline ::std::string* TxBlock::mutable_agg_pubkey() {
  set_has_agg_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.agg_pubkey)
  return agg_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_agg_pubkey() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBlock.agg_pubkey)
  if (!has_agg_pubkey()) {
    return NULL;
  }
  clear_has_agg_pubkey();
  return agg_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_agg_pubkey(::std::string* agg_pubkey) {
  if (agg_pubkey != NULL) {
    set_has_agg_pubkey();
  } else {
    clear_has_agg_pubkey();
  }
  agg_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agg_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBlock.agg_pubkey)
}

// optional bytes agg_sign = 7;
inline bool TxBlock::has_agg_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxBlock::set_has_agg_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxBlock::clear_has_agg_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxBlock::clear_agg_sign() {
  agg_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_agg_sign();
}
inline const ::std::string& TxBlock::agg_sign() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.agg_sign)
  return agg_sign_.GetNoArena();
}
inline void TxBlock::set_agg_sign(const ::std::string& value) {
  set_has_agg_sign();
  agg_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.agg_sign)
}
#if LANG_CXX11
inline void TxBlock::set_agg_sign(::std::string&& value) {
  set_has_agg_sign();
  agg_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxBlock.agg_sign)
}
#endif
inline void TxBlock::set_agg_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_agg_sign();
  agg_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxBlock.agg_sign)
}
inline void TxBlock::set_agg_sign(const void* value, size_t size) {
  set_has_agg_sign();
  agg_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxBlock.agg_sign)
}
inline ::std::string* TxBlock::mutable_agg_sign() {
  set_has_agg_sign();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.agg_sign)
  return agg_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_agg_sign() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBlock.agg_sign)
  if (!has_agg_sign()) {
    return NULL;
  }
  clear_has_agg_sign();
  return agg_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_agg_sign(::std::string* agg_sign) {
  if (agg_sign != NULL) {
    set_has_agg_sign();
  } else {
    clear_has_agg_sign();
  }
  agg_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agg_sign);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBlock.agg_sign)
}

// optional uint64 tx_id = 8;
inline bool TxBlock::has_tx_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxBlock::set_has_tx_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxBlock::clear_has_tx_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxBlock::clear_tx_id() {
  tx_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tx_id();
}
inline ::google::protobuf::uint64 TxBlock::tx_id() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.tx_id)
  return tx_id_;
}
inline void TxBlock::set_tx_id(::google::protobuf::uint64 value) {
  set_has_tx_id();
  tx_id_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.tx_id)
}

// optional bytes tx_hash = 9;
inline bool TxBlock::has_tx_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxBlock::set_has_tx_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxBlock::clear_has_tx_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxBlock::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_hash();
}
inline const ::std::string& TxBlock::tx_hash() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.tx_hash)
  return tx_hash_.GetNoArena();
}
inline void TxBlock::set_tx_hash(const ::std::string& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.tx_hash)
}
#if LANG_CXX11
inline void TxBlock::set_tx_hash(::std::string&& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxBlock.tx_hash)
}
#endif
inline void TxBlock::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxBlock.tx_hash)
}
inline void TxBlock::set_tx_hash(const void* value, size_t size) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxBlock.tx_hash)
}
inline ::std::string* TxBlock::mutable_tx_hash() {
  set_has_tx_hash();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_tx_hash() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBlock.tx_hash)
  if (!has_tx_hash()) {
    return NULL;
  }
  clear_has_tx_hash();
  return tx_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    set_has_tx_hash();
  } else {
    clear_has_tx_hash();
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBlock.tx_hash)
}

// optional bytes tx_root_hash = 10;
inline bool TxBlock::has_tx_root_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxBlock::set_has_tx_root_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxBlock::clear_has_tx_root_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxBlock::clear_tx_root_hash() {
  tx_root_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_root_hash();
}
inline const ::std::string& TxBlock::tx_root_hash() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.tx_root_hash)
  return tx_root_hash_.GetNoArena();
}
inline void TxBlock::set_tx_root_hash(const ::std::string& value) {
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.tx_root_hash)
}
#if LANG_CXX11
inline void TxBlock::set_tx_root_hash(::std::string&& value) {
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxBlock.tx_root_hash)
}
#endif
inline void TxBlock::set_tx_root_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxBlock.tx_root_hash)
}
inline void TxBlock::set_tx_root_hash(const void* value, size_t size) {
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxBlock.tx_root_hash)
}
inline ::std::string* TxBlock::mutable_tx_root_hash() {
  set_has_tx_root_hash();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.tx_root_hash)
  return tx_root_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_tx_root_hash() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBlock.tx_root_hash)
  if (!has_tx_root_hash()) {
    return NULL;
  }
  clear_has_tx_root_hash();
  return tx_root_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_tx_root_hash(::std::string* tx_root_hash) {
  if (tx_root_hash != NULL) {
    set_has_tx_root_hash();
  } else {
    clear_has_tx_root_hash();
  }
  tx_root_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_root_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBlock.tx_root_hash)
}

// repeated .lego.bft.protobuf.TxInfo tx_list = 11;
inline int TxBlock::tx_list_size() const {
  return tx_list_.size();
}
inline void TxBlock::clear_tx_list() {
  tx_list_.Clear();
}
inline ::lego::bft::protobuf::TxInfo* TxBlock::mutable_tx_list(int index) {
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBlock.tx_list)
  return tx_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxInfo >*
TxBlock::mutable_tx_list() {
  // @@protoc_insertion_point(field_mutable_list:lego.bft.protobuf.TxBlock.tx_list)
  return &tx_list_;
}
inline const ::lego::bft::protobuf::TxInfo& TxBlock::tx_list(int index) const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.tx_list)
  return tx_list_.Get(index);
}
inline ::lego::bft::protobuf::TxInfo* TxBlock::add_tx_list() {
  // @@protoc_insertion_point(field_add:lego.bft.protobuf.TxBlock.tx_list)
  return tx_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxInfo >&
TxBlock::tx_list() const {
  // @@protoc_insertion_point(field_list:lego.bft.protobuf.TxBlock.tx_list)
  return tx_list_;
}

// optional uint32 network_id = 12;
inline bool TxBlock::has_network_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxBlock::set_has_network_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxBlock::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxBlock::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 TxBlock::network_id() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBlock.network_id)
  return network_id_;
}
inline void TxBlock::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxBlock.network_id)
}

// -------------------------------------------------------------------

// Block

// optional bytes hash = 1;
inline bool Block::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& Block::hash() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.Block.hash)
  return hash_.GetNoArena();
}
inline void Block::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.Block.hash)
}
#if LANG_CXX11
inline void Block::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.Block.hash)
}
#endif
inline void Block::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.Block.hash)
}
inline void Block::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.Block.hash)
}
inline ::std::string* Block::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.Block.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_hash() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.Block.hash)
  if (!has_hash()) {
    return NULL;
  }
  clear_has_hash();
  return hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.Block.hash)
}

// optional uint64 height = 2;
inline bool Block::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Block::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Block::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Block::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 Block::height() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.Block.height)
  return height_;
}
inline void Block::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.Block.height)
}

// optional .lego.bft.protobuf.TxBlock tx_block = 3;
inline bool Block::has_tx_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_tx_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_tx_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_tx_block() {
  if (tx_block_ != NULL) tx_block_->Clear();
  clear_has_tx_block();
}
inline const ::lego::bft::protobuf::TxBlock& Block::_internal_tx_block() const {
  return *tx_block_;
}
inline const ::lego::bft::protobuf::TxBlock& Block::tx_block() const {
  const ::lego::bft::protobuf::TxBlock* p = tx_block_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.Block.tx_block)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::TxBlock*>(
      &::lego::bft::protobuf::_TxBlock_default_instance_);
}
inline ::lego::bft::protobuf::TxBlock* Block::release_tx_block() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.Block.tx_block)
  clear_has_tx_block();
  ::lego::bft::protobuf::TxBlock* temp = tx_block_;
  tx_block_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::TxBlock* Block::mutable_tx_block() {
  set_has_tx_block();
  if (tx_block_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::TxBlock>(GetArenaNoVirtual());
    tx_block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.Block.tx_block)
  return tx_block_;
}
inline void Block::set_allocated_tx_block(::lego::bft::protobuf::TxBlock* tx_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_block_;
  }
  if (tx_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_block, submessage_arena);
    }
    set_has_tx_block();
  } else {
    clear_has_tx_block();
  }
  tx_block_ = tx_block;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.Block.tx_block)
}

// -------------------------------------------------------------------

// TxPrepareItem

// optional bytes acc_addr = 1;
inline bool TxPrepareItem::has_acc_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxPrepareItem::set_has_acc_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxPrepareItem::clear_has_acc_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxPrepareItem::clear_acc_addr() {
  acc_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acc_addr();
}
inline const ::std::string& TxPrepareItem::acc_addr() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxPrepareItem.acc_addr)
  return acc_addr_.GetNoArena();
}
inline void TxPrepareItem::set_acc_addr(const ::std::string& value) {
  set_has_acc_addr();
  acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxPrepareItem.acc_addr)
}
#if LANG_CXX11
inline void TxPrepareItem::set_acc_addr(::std::string&& value) {
  set_has_acc_addr();
  acc_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxPrepareItem.acc_addr)
}
#endif
inline void TxPrepareItem::set_acc_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acc_addr();
  acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxPrepareItem.acc_addr)
}
inline void TxPrepareItem::set_acc_addr(const void* value, size_t size) {
  set_has_acc_addr();
  acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxPrepareItem.acc_addr)
}
inline ::std::string* TxPrepareItem::mutable_acc_addr() {
  set_has_acc_addr();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxPrepareItem.acc_addr)
  return acc_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxPrepareItem::release_acc_addr() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxPrepareItem.acc_addr)
  if (!has_acc_addr()) {
    return NULL;
  }
  clear_has_acc_addr();
  return acc_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxPrepareItem::set_allocated_acc_addr(::std::string* acc_addr) {
  if (acc_addr != NULL) {
    set_has_acc_addr();
  } else {
    clear_has_acc_addr();
  }
  acc_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acc_addr);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxPrepareItem.acc_addr)
}

// optional bytes gid = 2;
inline bool TxPrepareItem::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxPrepareItem::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxPrepareItem::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxPrepareItem::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxPrepareItem::gid() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxPrepareItem.gid)
  return gid_.GetNoArena();
}
inline void TxPrepareItem::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.TxPrepareItem.gid)
}
#if LANG_CXX11
inline void TxPrepareItem::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.TxPrepareItem.gid)
}
#endif
inline void TxPrepareItem::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.TxPrepareItem.gid)
}
inline void TxPrepareItem::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.TxPrepareItem.gid)
}
inline ::std::string* TxPrepareItem::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxPrepareItem.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxPrepareItem::release_gid() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxPrepareItem.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxPrepareItem::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxPrepareItem.gid)
}

// -------------------------------------------------------------------

// LeaderTxPrepare

// repeated .lego.bft.protobuf.TxPrepareItem txs = 1;
inline int LeaderTxPrepare::txs_size() const {
  return txs_.size();
}
inline void LeaderTxPrepare::clear_txs() {
  txs_.Clear();
}
inline ::lego::bft::protobuf::TxPrepareItem* LeaderTxPrepare::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.LeaderTxPrepare.txs)
  return txs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxPrepareItem >*
LeaderTxPrepare::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:lego.bft.protobuf.LeaderTxPrepare.txs)
  return &txs_;
}
inline const ::lego::bft::protobuf::TxPrepareItem& LeaderTxPrepare::txs(int index) const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.LeaderTxPrepare.txs)
  return txs_.Get(index);
}
inline ::lego::bft::protobuf::TxPrepareItem* LeaderTxPrepare::add_txs() {
  // @@protoc_insertion_point(field_add:lego.bft.protobuf.LeaderTxPrepare.txs)
  return txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::bft::protobuf::TxPrepareItem >&
LeaderTxPrepare::txs() const {
  // @@protoc_insertion_point(field_list:lego.bft.protobuf.LeaderTxPrepare.txs)
  return txs_;
}

// optional .lego.bft.protobuf.Block block = 2;
inline bool LeaderTxPrepare::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderTxPrepare::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderTxPrepare::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderTxPrepare::clear_block() {
  if (block_ != NULL) block_->Clear();
  clear_has_block();
}
inline const ::lego::bft::protobuf::Block& LeaderTxPrepare::_internal_block() const {
  return *block_;
}
inline const ::lego::bft::protobuf::Block& LeaderTxPrepare::block() const {
  const ::lego::bft::protobuf::Block* p = block_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.LeaderTxPrepare.block)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::Block*>(
      &::lego::bft::protobuf::_Block_default_instance_);
}
inline ::lego::bft::protobuf::Block* LeaderTxPrepare::release_block() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.LeaderTxPrepare.block)
  clear_has_block();
  ::lego::bft::protobuf::Block* temp = block_;
  block_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::Block* LeaderTxPrepare::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::Block>(GetArenaNoVirtual());
    block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.LeaderTxPrepare.block)
  return block_;
}
inline void LeaderTxPrepare::set_allocated_block(::lego::bft::protobuf::Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_;
  }
  if (block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
  } else {
    clear_has_block();
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.LeaderTxPrepare.block)
}

// -------------------------------------------------------------------

// BackupTxPrepare

// optional int32 status = 1;
inline bool BackupTxPrepare::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupTxPrepare::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupTxPrepare::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupTxPrepare::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BackupTxPrepare::status() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.BackupTxPrepare.status)
  return status_;
}
inline void BackupTxPrepare::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.BackupTxPrepare.status)
}

// -------------------------------------------------------------------

// LeaderTxPreCommit

// optional int32 status = 1;
inline bool LeaderTxPreCommit::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderTxPreCommit::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderTxPreCommit::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderTxPreCommit::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LeaderTxPreCommit::status() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.LeaderTxPreCommit.status)
  return status_;
}
inline void LeaderTxPreCommit::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.LeaderTxPreCommit.status)
}

// -------------------------------------------------------------------

// BackupTxPreCommit

// optional int32 status = 1;
inline bool BackupTxPreCommit::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupTxPreCommit::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupTxPreCommit::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupTxPreCommit::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BackupTxPreCommit::status() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.BackupTxPreCommit.status)
  return status_;
}
inline void BackupTxPreCommit::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.BackupTxPreCommit.status)
}

// -------------------------------------------------------------------

// LeaderTxCommit

// optional int32 status = 1;
inline bool LeaderTxCommit::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderTxCommit::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderTxCommit::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderTxCommit::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 LeaderTxCommit::status() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.LeaderTxCommit.status)
  return status_;
}
inline void LeaderTxCommit::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.LeaderTxCommit.status)
}

// -------------------------------------------------------------------

// NewTx

// optional bytes gid = 1;
inline bool NewTx::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewTx::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewTx::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewTx::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& NewTx::gid() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.NewTx.gid)
  return gid_.GetNoArena();
}
inline void NewTx::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.NewTx.gid)
}
#if LANG_CXX11
inline void NewTx::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.NewTx.gid)
}
#endif
inline void NewTx::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.NewTx.gid)
}
inline void NewTx::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.NewTx.gid)
}
inline ::std::string* NewTx::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.NewTx.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_gid() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.NewTx.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.NewTx.gid)
}

// optional bytes from_acc_addr = 2;
inline bool NewTx::has_from_acc_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewTx::set_has_from_acc_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewTx::clear_has_from_acc_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewTx::clear_from_acc_addr() {
  from_acc_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_acc_addr();
}
inline const ::std::string& NewTx::from_acc_addr() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.NewTx.from_acc_addr)
  return from_acc_addr_.GetNoArena();
}
inline void NewTx::set_from_acc_addr(const ::std::string& value) {
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.NewTx.from_acc_addr)
}
#if LANG_CXX11
inline void NewTx::set_from_acc_addr(::std::string&& value) {
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.NewTx.from_acc_addr)
}
#endif
inline void NewTx::set_from_acc_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.NewTx.from_acc_addr)
}
inline void NewTx::set_from_acc_addr(const void* value, size_t size) {
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.NewTx.from_acc_addr)
}
inline ::std::string* NewTx::mutable_from_acc_addr() {
  set_has_from_acc_addr();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.NewTx.from_acc_addr)
  return from_acc_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_from_acc_addr() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.NewTx.from_acc_addr)
  if (!has_from_acc_addr()) {
    return NULL;
  }
  clear_has_from_acc_addr();
  return from_acc_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_from_acc_addr(::std::string* from_acc_addr) {
  if (from_acc_addr != NULL) {
    set_has_from_acc_addr();
  } else {
    clear_has_from_acc_addr();
  }
  from_acc_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_acc_addr);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.NewTx.from_acc_addr)
}

// optional bytes from_pubkey = 3;
inline bool NewTx::has_from_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewTx::set_has_from_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewTx::clear_has_from_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewTx::clear_from_pubkey() {
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_pubkey();
}
inline const ::std::string& NewTx::from_pubkey() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.NewTx.from_pubkey)
  return from_pubkey_.GetNoArena();
}
inline void NewTx::set_from_pubkey(const ::std::string& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.NewTx.from_pubkey)
}
#if LANG_CXX11
inline void NewTx::set_from_pubkey(::std::string&& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.NewTx.from_pubkey)
}
#endif
inline void NewTx::set_from_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.NewTx.from_pubkey)
}
inline void NewTx::set_from_pubkey(const void* value, size_t size) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.NewTx.from_pubkey)
}
inline ::std::string* NewTx::mutable_from_pubkey() {
  set_has_from_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.NewTx.from_pubkey)
  return from_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_from_pubkey() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.NewTx.from_pubkey)
  if (!has_from_pubkey()) {
    return NULL;
  }
  clear_has_from_pubkey();
  return from_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_from_pubkey(::std::string* from_pubkey) {
  if (from_pubkey != NULL) {
    set_has_from_pubkey();
  } else {
    clear_has_from_pubkey();
  }
  from_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.NewTx.from_pubkey)
}

// optional bytes from_sign = 4;
inline bool NewTx::has_from_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewTx::set_has_from_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewTx::clear_has_from_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewTx::clear_from_sign() {
  from_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_sign();
}
inline const ::std::string& NewTx::from_sign() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.NewTx.from_sign)
  return from_sign_.GetNoArena();
}
inline void NewTx::set_from_sign(const ::std::string& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.NewTx.from_sign)
}
#if LANG_CXX11
inline void NewTx::set_from_sign(::std::string&& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.NewTx.from_sign)
}
#endif
inline void NewTx::set_from_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.NewTx.from_sign)
}
inline void NewTx::set_from_sign(const void* value, size_t size) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.NewTx.from_sign)
}
inline ::std::string* NewTx::mutable_from_sign() {
  set_has_from_sign();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.NewTx.from_sign)
  return from_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_from_sign() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.NewTx.from_sign)
  if (!has_from_sign()) {
    return NULL;
  }
  clear_has_from_sign();
  return from_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_from_sign(::std::string* from_sign) {
  if (from_sign != NULL) {
    set_has_from_sign();
  } else {
    clear_has_from_sign();
  }
  from_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_sign);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.NewTx.from_sign)
}

// optional bytes to_acc_addr = 5;
inline bool NewTx::has_to_acc_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewTx::set_has_to_acc_addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewTx::clear_has_to_acc_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewTx::clear_to_acc_addr() {
  to_acc_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_acc_addr();
}
inline const ::std::string& NewTx::to_acc_addr() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.NewTx.to_acc_addr)
  return to_acc_addr_.GetNoArena();
}
inline void NewTx::set_to_acc_addr(const ::std::string& value) {
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.NewTx.to_acc_addr)
}
#if LANG_CXX11
inline void NewTx::set_to_acc_addr(::std::string&& value) {
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.NewTx.to_acc_addr)
}
#endif
inline void NewTx::set_to_acc_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.NewTx.to_acc_addr)
}
inline void NewTx::set_to_acc_addr(const void* value, size_t size) {
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.NewTx.to_acc_addr)
}
inline ::std::string* NewTx::mutable_to_acc_addr() {
  set_has_to_acc_addr();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.NewTx.to_acc_addr)
  return to_acc_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_to_acc_addr() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.NewTx.to_acc_addr)
  if (!has_to_acc_addr()) {
    return NULL;
  }
  clear_has_to_acc_addr();
  return to_acc_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_to_acc_addr(::std::string* to_acc_addr) {
  if (to_acc_addr != NULL) {
    set_has_to_acc_addr();
  } else {
    clear_has_to_acc_addr();
  }
  to_acc_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_acc_addr);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.NewTx.to_acc_addr)
}

// optional uint64 lego_count = 6;
inline bool NewTx::has_lego_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewTx::set_has_lego_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewTx::clear_has_lego_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewTx::clear_lego_count() {
  lego_count_ = GOOGLE_ULONGLONG(0);
  clear_has_lego_count();
}
inline ::google::protobuf::uint64 NewTx::lego_count() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.NewTx.lego_count)
  return lego_count_;
}
inline void NewTx::set_lego_count(::google::protobuf::uint64 value) {
  set_has_lego_count();
  lego_count_ = value;
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.NewTx.lego_count)
}

// -------------------------------------------------------------------

// CheckTxRequest

// optional bytes tx_gid = 1;
inline bool CheckTxRequest::has_tx_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckTxRequest::set_has_tx_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckTxRequest::clear_has_tx_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckTxRequest::clear_tx_gid() {
  tx_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_gid();
}
inline const ::std::string& CheckTxRequest::tx_gid() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.CheckTxRequest.tx_gid)
  return tx_gid_.GetNoArena();
}
inline void CheckTxRequest::set_tx_gid(const ::std::string& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.CheckTxRequest.tx_gid)
}
#if LANG_CXX11
inline void CheckTxRequest::set_tx_gid(::std::string&& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.CheckTxRequest.tx_gid)
}
#endif
inline void CheckTxRequest::set_tx_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.CheckTxRequest.tx_gid)
}
inline void CheckTxRequest::set_tx_gid(const void* value, size_t size) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.CheckTxRequest.tx_gid)
}
inline ::std::string* CheckTxRequest::mutable_tx_gid() {
  set_has_tx_gid();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.CheckTxRequest.tx_gid)
  return tx_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckTxRequest::release_tx_gid() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.CheckTxRequest.tx_gid)
  if (!has_tx_gid()) {
    return NULL;
  }
  clear_has_tx_gid();
  return tx_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckTxRequest::set_allocated_tx_gid(::std::string* tx_gid) {
  if (tx_gid != NULL) {
    set_has_tx_gid();
  } else {
    clear_has_tx_gid();
  }
  tx_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_gid);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.CheckTxRequest.tx_gid)
}

// -------------------------------------------------------------------

// CheckTxResponse

// optional bytes block = 1;
inline bool CheckTxResponse::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckTxResponse::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckTxResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckTxResponse::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& CheckTxResponse::block() const {
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.CheckTxResponse.block)
  return block_.GetNoArena();
}
inline void CheckTxResponse::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.bft.protobuf.CheckTxResponse.block)
}
#if LANG_CXX11
inline void CheckTxResponse::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.bft.protobuf.CheckTxResponse.block)
}
#endif
inline void CheckTxResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.bft.protobuf.CheckTxResponse.block)
}
inline void CheckTxResponse::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.bft.protobuf.CheckTxResponse.block)
}
inline ::std::string* CheckTxResponse::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.CheckTxResponse.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckTxResponse::release_block() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.CheckTxResponse.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckTxResponse::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.CheckTxResponse.block)
}

// -------------------------------------------------------------------

// TxBft

// optional .lego.bft.protobuf.NewTx new_tx = 1;
inline bool TxBft::has_new_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxBft::set_has_new_tx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxBft::clear_has_new_tx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxBft::clear_new_tx() {
  if (new_tx_ != NULL) new_tx_->Clear();
  clear_has_new_tx();
}
inline const ::lego::bft::protobuf::NewTx& TxBft::_internal_new_tx() const {
  return *new_tx_;
}
inline const ::lego::bft::protobuf::NewTx& TxBft::new_tx() const {
  const ::lego::bft::protobuf::NewTx* p = new_tx_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.new_tx)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::NewTx*>(
      &::lego::bft::protobuf::_NewTx_default_instance_);
}
inline ::lego::bft::protobuf::NewTx* TxBft::release_new_tx() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.new_tx)
  clear_has_new_tx();
  ::lego::bft::protobuf::NewTx* temp = new_tx_;
  new_tx_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::NewTx* TxBft::mutable_new_tx() {
  set_has_new_tx();
  if (new_tx_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::NewTx>(GetArenaNoVirtual());
    new_tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.new_tx)
  return new_tx_;
}
inline void TxBft::set_allocated_new_tx(::lego::bft::protobuf::NewTx* new_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_tx_;
  }
  if (new_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_tx, submessage_arena);
    }
    set_has_new_tx();
  } else {
    clear_has_new_tx();
  }
  new_tx_ = new_tx;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.new_tx)
}

// optional .lego.bft.protobuf.LeaderTxPrepare ltx_prepare = 2;
inline bool TxBft::has_ltx_prepare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxBft::set_has_ltx_prepare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxBft::clear_has_ltx_prepare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxBft::clear_ltx_prepare() {
  if (ltx_prepare_ != NULL) ltx_prepare_->Clear();
  clear_has_ltx_prepare();
}
inline const ::lego::bft::protobuf::LeaderTxPrepare& TxBft::_internal_ltx_prepare() const {
  return *ltx_prepare_;
}
inline const ::lego::bft::protobuf::LeaderTxPrepare& TxBft::ltx_prepare() const {
  const ::lego::bft::protobuf::LeaderTxPrepare* p = ltx_prepare_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.ltx_prepare)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::LeaderTxPrepare*>(
      &::lego::bft::protobuf::_LeaderTxPrepare_default_instance_);
}
inline ::lego::bft::protobuf::LeaderTxPrepare* TxBft::release_ltx_prepare() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.ltx_prepare)
  clear_has_ltx_prepare();
  ::lego::bft::protobuf::LeaderTxPrepare* temp = ltx_prepare_;
  ltx_prepare_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::LeaderTxPrepare* TxBft::mutable_ltx_prepare() {
  set_has_ltx_prepare();
  if (ltx_prepare_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::LeaderTxPrepare>(GetArenaNoVirtual());
    ltx_prepare_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.ltx_prepare)
  return ltx_prepare_;
}
inline void TxBft::set_allocated_ltx_prepare(::lego::bft::protobuf::LeaderTxPrepare* ltx_prepare) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ltx_prepare_;
  }
  if (ltx_prepare) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ltx_prepare = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ltx_prepare, submessage_arena);
    }
    set_has_ltx_prepare();
  } else {
    clear_has_ltx_prepare();
  }
  ltx_prepare_ = ltx_prepare;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.ltx_prepare)
}

// optional .lego.bft.protobuf.BackupTxPrepare btx_prepare = 3;
inline bool TxBft::has_btx_prepare() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxBft::set_has_btx_prepare() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxBft::clear_has_btx_prepare() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxBft::clear_btx_prepare() {
  if (btx_prepare_ != NULL) btx_prepare_->Clear();
  clear_has_btx_prepare();
}
inline const ::lego::bft::protobuf::BackupTxPrepare& TxBft::_internal_btx_prepare() const {
  return *btx_prepare_;
}
inline const ::lego::bft::protobuf::BackupTxPrepare& TxBft::btx_prepare() const {
  const ::lego::bft::protobuf::BackupTxPrepare* p = btx_prepare_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.btx_prepare)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::BackupTxPrepare*>(
      &::lego::bft::protobuf::_BackupTxPrepare_default_instance_);
}
inline ::lego::bft::protobuf::BackupTxPrepare* TxBft::release_btx_prepare() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.btx_prepare)
  clear_has_btx_prepare();
  ::lego::bft::protobuf::BackupTxPrepare* temp = btx_prepare_;
  btx_prepare_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::BackupTxPrepare* TxBft::mutable_btx_prepare() {
  set_has_btx_prepare();
  if (btx_prepare_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::BackupTxPrepare>(GetArenaNoVirtual());
    btx_prepare_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.btx_prepare)
  return btx_prepare_;
}
inline void TxBft::set_allocated_btx_prepare(::lego::bft::protobuf::BackupTxPrepare* btx_prepare) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete btx_prepare_;
  }
  if (btx_prepare) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      btx_prepare = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, btx_prepare, submessage_arena);
    }
    set_has_btx_prepare();
  } else {
    clear_has_btx_prepare();
  }
  btx_prepare_ = btx_prepare;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.btx_prepare)
}

// optional .lego.bft.protobuf.LeaderTxPreCommit ltx_precommit = 4;
inline bool TxBft::has_ltx_precommit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxBft::set_has_ltx_precommit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxBft::clear_has_ltx_precommit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxBft::clear_ltx_precommit() {
  if (ltx_precommit_ != NULL) ltx_precommit_->Clear();
  clear_has_ltx_precommit();
}
inline const ::lego::bft::protobuf::LeaderTxPreCommit& TxBft::_internal_ltx_precommit() const {
  return *ltx_precommit_;
}
inline const ::lego::bft::protobuf::LeaderTxPreCommit& TxBft::ltx_precommit() const {
  const ::lego::bft::protobuf::LeaderTxPreCommit* p = ltx_precommit_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.ltx_precommit)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::LeaderTxPreCommit*>(
      &::lego::bft::protobuf::_LeaderTxPreCommit_default_instance_);
}
inline ::lego::bft::protobuf::LeaderTxPreCommit* TxBft::release_ltx_precommit() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.ltx_precommit)
  clear_has_ltx_precommit();
  ::lego::bft::protobuf::LeaderTxPreCommit* temp = ltx_precommit_;
  ltx_precommit_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::LeaderTxPreCommit* TxBft::mutable_ltx_precommit() {
  set_has_ltx_precommit();
  if (ltx_precommit_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::LeaderTxPreCommit>(GetArenaNoVirtual());
    ltx_precommit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.ltx_precommit)
  return ltx_precommit_;
}
inline void TxBft::set_allocated_ltx_precommit(::lego::bft::protobuf::LeaderTxPreCommit* ltx_precommit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ltx_precommit_;
  }
  if (ltx_precommit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ltx_precommit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ltx_precommit, submessage_arena);
    }
    set_has_ltx_precommit();
  } else {
    clear_has_ltx_precommit();
  }
  ltx_precommit_ = ltx_precommit;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.ltx_precommit)
}

// optional .lego.bft.protobuf.BackupTxPreCommit btx_precommit = 5;
inline bool TxBft::has_btx_precommit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxBft::set_has_btx_precommit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxBft::clear_has_btx_precommit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxBft::clear_btx_precommit() {
  if (btx_precommit_ != NULL) btx_precommit_->Clear();
  clear_has_btx_precommit();
}
inline const ::lego::bft::protobuf::BackupTxPreCommit& TxBft::_internal_btx_precommit() const {
  return *btx_precommit_;
}
inline const ::lego::bft::protobuf::BackupTxPreCommit& TxBft::btx_precommit() const {
  const ::lego::bft::protobuf::BackupTxPreCommit* p = btx_precommit_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.btx_precommit)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::BackupTxPreCommit*>(
      &::lego::bft::protobuf::_BackupTxPreCommit_default_instance_);
}
inline ::lego::bft::protobuf::BackupTxPreCommit* TxBft::release_btx_precommit() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.btx_precommit)
  clear_has_btx_precommit();
  ::lego::bft::protobuf::BackupTxPreCommit* temp = btx_precommit_;
  btx_precommit_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::BackupTxPreCommit* TxBft::mutable_btx_precommit() {
  set_has_btx_precommit();
  if (btx_precommit_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::BackupTxPreCommit>(GetArenaNoVirtual());
    btx_precommit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.btx_precommit)
  return btx_precommit_;
}
inline void TxBft::set_allocated_btx_precommit(::lego::bft::protobuf::BackupTxPreCommit* btx_precommit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete btx_precommit_;
  }
  if (btx_precommit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      btx_precommit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, btx_precommit, submessage_arena);
    }
    set_has_btx_precommit();
  } else {
    clear_has_btx_precommit();
  }
  btx_precommit_ = btx_precommit;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.btx_precommit)
}

// optional .lego.bft.protobuf.LeaderTxCommit ltx_commit = 6;
inline bool TxBft::has_ltx_commit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxBft::set_has_ltx_commit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxBft::clear_has_ltx_commit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxBft::clear_ltx_commit() {
  if (ltx_commit_ != NULL) ltx_commit_->Clear();
  clear_has_ltx_commit();
}
inline const ::lego::bft::protobuf::LeaderTxCommit& TxBft::_internal_ltx_commit() const {
  return *ltx_commit_;
}
inline const ::lego::bft::protobuf::LeaderTxCommit& TxBft::ltx_commit() const {
  const ::lego::bft::protobuf::LeaderTxCommit* p = ltx_commit_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.ltx_commit)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::LeaderTxCommit*>(
      &::lego::bft::protobuf::_LeaderTxCommit_default_instance_);
}
inline ::lego::bft::protobuf::LeaderTxCommit* TxBft::release_ltx_commit() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.ltx_commit)
  clear_has_ltx_commit();
  ::lego::bft::protobuf::LeaderTxCommit* temp = ltx_commit_;
  ltx_commit_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::LeaderTxCommit* TxBft::mutable_ltx_commit() {
  set_has_ltx_commit();
  if (ltx_commit_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::LeaderTxCommit>(GetArenaNoVirtual());
    ltx_commit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.ltx_commit)
  return ltx_commit_;
}
inline void TxBft::set_allocated_ltx_commit(::lego::bft::protobuf::LeaderTxCommit* ltx_commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ltx_commit_;
  }
  if (ltx_commit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ltx_commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ltx_commit, submessage_arena);
    }
    set_has_ltx_commit();
  } else {
    clear_has_ltx_commit();
  }
  ltx_commit_ = ltx_commit;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.ltx_commit)
}

// optional .lego.bft.protobuf.CheckTxRequest check_tx_req = 7;
inline bool TxBft::has_check_tx_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxBft::set_has_check_tx_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxBft::clear_has_check_tx_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxBft::clear_check_tx_req() {
  if (check_tx_req_ != NULL) check_tx_req_->Clear();
  clear_has_check_tx_req();
}
inline const ::lego::bft::protobuf::CheckTxRequest& TxBft::_internal_check_tx_req() const {
  return *check_tx_req_;
}
inline const ::lego::bft::protobuf::CheckTxRequest& TxBft::check_tx_req() const {
  const ::lego::bft::protobuf::CheckTxRequest* p = check_tx_req_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.check_tx_req)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::CheckTxRequest*>(
      &::lego::bft::protobuf::_CheckTxRequest_default_instance_);
}
inline ::lego::bft::protobuf::CheckTxRequest* TxBft::release_check_tx_req() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.check_tx_req)
  clear_has_check_tx_req();
  ::lego::bft::protobuf::CheckTxRequest* temp = check_tx_req_;
  check_tx_req_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::CheckTxRequest* TxBft::mutable_check_tx_req() {
  set_has_check_tx_req();
  if (check_tx_req_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::CheckTxRequest>(GetArenaNoVirtual());
    check_tx_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.check_tx_req)
  return check_tx_req_;
}
inline void TxBft::set_allocated_check_tx_req(::lego::bft::protobuf::CheckTxRequest* check_tx_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete check_tx_req_;
  }
  if (check_tx_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_tx_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_tx_req, submessage_arena);
    }
    set_has_check_tx_req();
  } else {
    clear_has_check_tx_req();
  }
  check_tx_req_ = check_tx_req;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.check_tx_req)
}

// optional .lego.bft.protobuf.CheckTxResponse check_tx_res = 8;
inline bool TxBft::has_check_tx_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxBft::set_has_check_tx_res() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxBft::clear_has_check_tx_res() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxBft::clear_check_tx_res() {
  if (check_tx_res_ != NULL) check_tx_res_->Clear();
  clear_has_check_tx_res();
}
inline const ::lego::bft::protobuf::CheckTxResponse& TxBft::_internal_check_tx_res() const {
  return *check_tx_res_;
}
inline const ::lego::bft::protobuf::CheckTxResponse& TxBft::check_tx_res() const {
  const ::lego::bft::protobuf::CheckTxResponse* p = check_tx_res_;
  // @@protoc_insertion_point(field_get:lego.bft.protobuf.TxBft.check_tx_res)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::bft::protobuf::CheckTxResponse*>(
      &::lego::bft::protobuf::_CheckTxResponse_default_instance_);
}
inline ::lego::bft::protobuf::CheckTxResponse* TxBft::release_check_tx_res() {
  // @@protoc_insertion_point(field_release:lego.bft.protobuf.TxBft.check_tx_res)
  clear_has_check_tx_res();
  ::lego::bft::protobuf::CheckTxResponse* temp = check_tx_res_;
  check_tx_res_ = NULL;
  return temp;
}
inline ::lego::bft::protobuf::CheckTxResponse* TxBft::mutable_check_tx_res() {
  set_has_check_tx_res();
  if (check_tx_res_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::bft::protobuf::CheckTxResponse>(GetArenaNoVirtual());
    check_tx_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.bft.protobuf.TxBft.check_tx_res)
  return check_tx_res_;
}
inline void TxBft::set_allocated_check_tx_res(::lego::bft::protobuf::CheckTxResponse* check_tx_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete check_tx_res_;
  }
  if (check_tx_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_tx_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_tx_res, submessage_arena);
    }
    set_has_check_tx_res();
  } else {
    clear_has_check_tx_res();
  }
  check_tx_res_ = check_tx_res;
  // @@protoc_insertion_point(field_set_allocated:lego.bft.protobuf.TxBft.check_tx_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace bft
}  // namespace lego

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tx_2eproto
