// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_service_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_service_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoResponse;
}  // namespace protobuf_service_2eproto
namespace lego {
namespace service {
namespace protobuf {
class GetVpnInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVpnInfoRequest>
      _instance;
} _GetVpnInfoRequest_default_instance_;
class GetVpnInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetVpnInfoResponse>
      _instance;
} _GetVpnInfoResponse_default_instance_;
class ServiceMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceMessage>
      _instance;
} _ServiceMessage_default_instance_;
}  // namespace protobuf
}  // namespace service
}  // namespace lego
namespace protobuf_service_2eproto {
static void InitDefaultsGetVpnInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lego::service::protobuf::_GetVpnInfoRequest_default_instance_;
    new (ptr) ::lego::service::protobuf::GetVpnInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lego::service::protobuf::GetVpnInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetVpnInfoRequest}, {}};

static void InitDefaultsGetVpnInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lego::service::protobuf::_GetVpnInfoResponse_default_instance_;
    new (ptr) ::lego::service::protobuf::GetVpnInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lego::service::protobuf::GetVpnInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetVpnInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetVpnInfoResponse}, {}};

static void InitDefaultsServiceMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lego::service::protobuf::_ServiceMessage_default_instance_;
    new (ptr) ::lego::service::protobuf::ServiceMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lego::service::protobuf::ServiceMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ServiceMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsServiceMessage}, {
      &protobuf_service_2eproto::scc_info_GetVpnInfoRequest.base,
      &protobuf_service_2eproto::scc_info_GetVpnInfoResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetVpnInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetVpnInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceMessage.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoRequest, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoRequest, sign_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoRequest, sign_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoRequest, heartbeat_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, encrypt_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::GetVpnInfoResponse, country_),
  0,
  5,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::ServiceMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::ServiceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::ServiceMessage, vpn_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lego::service::protobuf::ServiceMessage, vpn_res_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::lego::service::protobuf::GetVpnInfoRequest)},
  { 13, 24, sizeof(::lego::service::protobuf::GetVpnInfoResponse)},
  { 30, 37, sizeof(::lego::service::protobuf::ServiceMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lego::service::protobuf::_GetVpnInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lego::service::protobuf::_GetVpnInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lego::service::protobuf::_ServiceMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rservice.proto\022\025lego.service.protobuf\"e"
      "\n\021GetVpnInfoRequest\022\016\n\006pubkey\030\001 \001(\014\022\026\n\016s"
      "ign_challenge\030\002 \001(\014\022\025\n\rsign_response\030\003 \001"
      "(\014\022\021\n\theartbeat\030\004 \001(\010\"u\n\022GetVpnInfoRespo"
      "nse\022\n\n\002ip\030\001 \001(\014\022\014\n\004port\030\002 \001(\r\022\024\n\014encrypt"
      "_type\030\003 \001(\014\022\016\n\006passwd\030\004 \001(\014\022\016\n\006pubkey\030\005 "
      "\001(\014\022\017\n\007country\030\006 \001(\014\"\207\001\n\016ServiceMessage\022"
      "9\n\007vpn_req\030\001 \001(\0132(.lego.service.protobuf"
      ".GetVpnInfoRequest\022:\n\007vpn_res\030\002 \001(\0132).le"
      "go.service.protobuf.GetVpnInfoResponse"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_service_2eproto
namespace lego {
namespace service {
namespace protobuf {

// ===================================================================

void GetVpnInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVpnInfoRequest::kPubkeyFieldNumber;
const int GetVpnInfoRequest::kSignChallengeFieldNumber;
const int GetVpnInfoRequest::kSignResponseFieldNumber;
const int GetVpnInfoRequest::kHeartbeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVpnInfoRequest::GetVpnInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_GetVpnInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lego.service.protobuf.GetVpnInfoRequest)
}
GetVpnInfoRequest::GetVpnInfoRequest(const GetVpnInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_challenge()) {
    sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_challenge_);
  }
  sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_response()) {
    sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_response_);
  }
  heartbeat_ = from.heartbeat_;
  // @@protoc_insertion_point(copy_constructor:lego.service.protobuf.GetVpnInfoRequest)
}

void GetVpnInfoRequest::SharedCtor() {
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heartbeat_ = false;
}

GetVpnInfoRequest::~GetVpnInfoRequest() {
  // @@protoc_insertion_point(destructor:lego.service.protobuf.GetVpnInfoRequest)
  SharedDtor();
}

void GetVpnInfoRequest::SharedDtor() {
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVpnInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetVpnInfoRequest::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVpnInfoRequest& GetVpnInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_GetVpnInfoRequest.base);
  return *internal_default_instance();
}


void GetVpnInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lego.service.protobuf.GetVpnInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sign_challenge_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_response_.ClearNonDefaultToEmptyNoArena();
    }
  }
  heartbeat_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetVpnInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lego.service.protobuf.GetVpnInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pubkey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_challenge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool heartbeat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_heartbeat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lego.service.protobuf.GetVpnInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lego.service.protobuf.GetVpnInfoRequest)
  return false;
#undef DO_
}

void GetVpnInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lego.service.protobuf.GetVpnInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pubkey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pubkey(), output);
  }

  // optional bytes sign_challenge = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sign_challenge(), output);
  }

  // optional bytes sign_response = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sign_response(), output);
  }

  // optional bool heartbeat = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->heartbeat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lego.service.protobuf.GetVpnInfoRequest)
}

::google::protobuf::uint8* GetVpnInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lego.service.protobuf.GetVpnInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pubkey = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pubkey(), target);
  }

  // optional bytes sign_challenge = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign_challenge(), target);
  }

  // optional bytes sign_response = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sign_response(), target);
  }

  // optional bool heartbeat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->heartbeat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lego.service.protobuf.GetVpnInfoRequest)
  return target;
}

size_t GetVpnInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lego.service.protobuf.GetVpnInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes pubkey = 1;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes sign_challenge = 2;
    if (has_sign_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_challenge());
    }

    // optional bytes sign_response = 3;
    if (has_sign_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_response());
    }

    // optional bool heartbeat = 4;
    if (has_heartbeat()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVpnInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lego.service.protobuf.GetVpnInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVpnInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVpnInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lego.service.protobuf.GetVpnInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lego.service.protobuf.GetVpnInfoRequest)
    MergeFrom(*source);
  }
}

void GetVpnInfoRequest::MergeFrom(const GetVpnInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lego.service.protobuf.GetVpnInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_challenge();
      sign_challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_challenge_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign_response();
      sign_response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_response_);
    }
    if (cached_has_bits & 0x00000008u) {
      heartbeat_ = from.heartbeat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetVpnInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lego.service.protobuf.GetVpnInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVpnInfoRequest::CopyFrom(const GetVpnInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lego.service.protobuf.GetVpnInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVpnInfoRequest::IsInitialized() const {
  return true;
}

void GetVpnInfoRequest::Swap(GetVpnInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVpnInfoRequest::InternalSwap(GetVpnInfoRequest* other) {
  using std::swap;
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_challenge_.Swap(&other->sign_challenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_response_.Swap(&other->sign_response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(heartbeat_, other->heartbeat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetVpnInfoRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetVpnInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetVpnInfoResponse::kIpFieldNumber;
const int GetVpnInfoResponse::kPortFieldNumber;
const int GetVpnInfoResponse::kEncryptTypeFieldNumber;
const int GetVpnInfoResponse::kPasswdFieldNumber;
const int GetVpnInfoResponse::kPubkeyFieldNumber;
const int GetVpnInfoResponse::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetVpnInfoResponse::GetVpnInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_GetVpnInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lego.service.protobuf.GetVpnInfoResponse)
}
GetVpnInfoResponse::GetVpnInfoResponse(const GetVpnInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  encrypt_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypt_type()) {
    encrypt_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_type_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_passwd()) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:lego.service.protobuf.GetVpnInfoResponse)
}

void GetVpnInfoResponse::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

GetVpnInfoResponse::~GetVpnInfoResponse() {
  // @@protoc_insertion_point(destructor:lego.service.protobuf.GetVpnInfoResponse)
  SharedDtor();
}

void GetVpnInfoResponse::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetVpnInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetVpnInfoResponse::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetVpnInfoResponse& GetVpnInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_GetVpnInfoResponse.base);
  return *internal_default_instance();
}


void GetVpnInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lego.service.protobuf.GetVpnInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encrypt_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      passwd_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      country_.ClearNonDefaultToEmptyNoArena();
    }
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetVpnInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lego.service.protobuf.GetVpnInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encrypt_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypt_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes passwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes country = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lego.service.protobuf.GetVpnInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lego.service.protobuf.GetVpnInfoResponse)
  return false;
#undef DO_
}

void GetVpnInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lego.service.protobuf.GetVpnInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional bytes encrypt_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encrypt_type(), output);
  }

  // optional bytes passwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->passwd(), output);
  }

  // optional bytes pubkey = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pubkey(), output);
  }

  // optional bytes country = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lego.service.protobuf.GetVpnInfoResponse)
}

::google::protobuf::uint8* GetVpnInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lego.service.protobuf.GetVpnInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional bytes encrypt_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encrypt_type(), target);
  }

  // optional bytes passwd = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->passwd(), target);
  }

  // optional bytes pubkey = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pubkey(), target);
  }

  // optional bytes country = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lego.service.protobuf.GetVpnInfoResponse)
  return target;
}

size_t GetVpnInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lego.service.protobuf.GetVpnInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes encrypt_type = 3;
    if (has_encrypt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypt_type());
    }

    // optional bytes passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

    // optional bytes pubkey = 5;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

    // optional bytes country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->country());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVpnInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lego.service.protobuf.GetVpnInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVpnInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetVpnInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lego.service.protobuf.GetVpnInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lego.service.protobuf.GetVpnInfoResponse)
    MergeFrom(*source);
  }
}

void GetVpnInfoResponse::MergeFrom(const GetVpnInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lego.service.protobuf.GetVpnInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_encrypt_type();
      encrypt_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypt_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_passwd();
      passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000020u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetVpnInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lego.service.protobuf.GetVpnInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVpnInfoResponse::CopyFrom(const GetVpnInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lego.service.protobuf.GetVpnInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVpnInfoResponse::IsInitialized() const {
  return true;
}

void GetVpnInfoResponse::Swap(GetVpnInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetVpnInfoResponse::InternalSwap(GetVpnInfoResponse* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypt_type_.Swap(&other->encrypt_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetVpnInfoResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServiceMessage::InitAsDefaultInstance() {
  ::lego::service::protobuf::_ServiceMessage_default_instance_._instance.get_mutable()->vpn_req_ = const_cast< ::lego::service::protobuf::GetVpnInfoRequest*>(
      ::lego::service::protobuf::GetVpnInfoRequest::internal_default_instance());
  ::lego::service::protobuf::_ServiceMessage_default_instance_._instance.get_mutable()->vpn_res_ = const_cast< ::lego::service::protobuf::GetVpnInfoResponse*>(
      ::lego::service::protobuf::GetVpnInfoResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceMessage::kVpnReqFieldNumber;
const int ServiceMessage::kVpnResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceMessage::ServiceMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_service_2eproto::scc_info_ServiceMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lego.service.protobuf.ServiceMessage)
}
ServiceMessage::ServiceMessage(const ServiceMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vpn_req()) {
    vpn_req_ = new ::lego::service::protobuf::GetVpnInfoRequest(*from.vpn_req_);
  } else {
    vpn_req_ = NULL;
  }
  if (from.has_vpn_res()) {
    vpn_res_ = new ::lego::service::protobuf::GetVpnInfoResponse(*from.vpn_res_);
  } else {
    vpn_res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:lego.service.protobuf.ServiceMessage)
}

void ServiceMessage::SharedCtor() {
  ::memset(&vpn_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vpn_res_) -
      reinterpret_cast<char*>(&vpn_req_)) + sizeof(vpn_res_));
}

ServiceMessage::~ServiceMessage() {
  // @@protoc_insertion_point(destructor:lego.service.protobuf.ServiceMessage)
  SharedDtor();
}

void ServiceMessage::SharedDtor() {
  if (this != internal_default_instance()) delete vpn_req_;
  if (this != internal_default_instance()) delete vpn_res_;
}

void ServiceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServiceMessage::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceMessage& ServiceMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_service_2eproto::scc_info_ServiceMessage.base);
  return *internal_default_instance();
}


void ServiceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:lego.service.protobuf.ServiceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vpn_req_ != NULL);
      vpn_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vpn_res_ != NULL);
      vpn_res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lego.service.protobuf.ServiceMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lego.service.protobuf.GetVpnInfoRequest vpn_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpn_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .lego.service.protobuf.GetVpnInfoResponse vpn_res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpn_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lego.service.protobuf.ServiceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lego.service.protobuf.ServiceMessage)
  return false;
#undef DO_
}

void ServiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lego.service.protobuf.ServiceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lego.service.protobuf.GetVpnInfoRequest vpn_req = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_vpn_req(), output);
  }

  // optional .lego.service.protobuf.GetVpnInfoResponse vpn_res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vpn_res(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lego.service.protobuf.ServiceMessage)
}

::google::protobuf::uint8* ServiceMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lego.service.protobuf.ServiceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .lego.service.protobuf.GetVpnInfoRequest vpn_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_vpn_req(), deterministic, target);
  }

  // optional .lego.service.protobuf.GetVpnInfoResponse vpn_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vpn_res(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lego.service.protobuf.ServiceMessage)
  return target;
}

size_t ServiceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lego.service.protobuf.ServiceMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .lego.service.protobuf.GetVpnInfoRequest vpn_req = 1;
    if (has_vpn_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vpn_req_);
    }

    // optional .lego.service.protobuf.GetVpnInfoResponse vpn_res = 2;
    if (has_vpn_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vpn_res_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lego.service.protobuf.ServiceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lego.service.protobuf.ServiceMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lego.service.protobuf.ServiceMessage)
    MergeFrom(*source);
  }
}

void ServiceMessage::MergeFrom(const ServiceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lego.service.protobuf.ServiceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vpn_req()->::lego::service::protobuf::GetVpnInfoRequest::MergeFrom(from.vpn_req());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vpn_res()->::lego::service::protobuf::GetVpnInfoResponse::MergeFrom(from.vpn_res());
    }
  }
}

void ServiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lego.service.protobuf.ServiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceMessage::CopyFrom(const ServiceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lego.service.protobuf.ServiceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceMessage::IsInitialized() const {
  return true;
}

void ServiceMessage::Swap(ServiceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceMessage::InternalSwap(ServiceMessage* other) {
  using std::swap;
  swap(vpn_req_, other->vpn_req_);
  swap(vpn_res_, other->vpn_res_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServiceMessage::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace service
}  // namespace lego
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lego::service::protobuf::GetVpnInfoRequest* Arena::CreateMaybeMessage< ::lego::service::protobuf::GetVpnInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lego::service::protobuf::GetVpnInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lego::service::protobuf::GetVpnInfoResponse* Arena::CreateMaybeMessage< ::lego::service::protobuf::GetVpnInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lego::service::protobuf::GetVpnInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lego::service::protobuf::ServiceMessage* Arena::CreateMaybeMessage< ::lego::service::protobuf::ServiceMessage >(Arena* arena) {
  return Arena::CreateInternal< ::lego::service::protobuf::ServiceMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
