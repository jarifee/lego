// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_INCLUDED_client_2eproto
#define PROTOBUF_INCLUDED_client_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_client_2eproto 

namespace protobuf_client_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_client_2eproto
namespace lego {
namespace client {
namespace protobuf {
class BftMessage;
class BftMessageDefaultTypeInternal;
extern BftMessageDefaultTypeInternal _BftMessage_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockMessage;
class BlockMessageDefaultTypeInternal;
extern BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
class GetTxBlockRequest;
class GetTxBlockRequestDefaultTypeInternal;
extern GetTxBlockRequestDefaultTypeInternal _GetTxBlockRequest_default_instance_;
class GetTxBlockResponse;
class GetTxBlockResponseDefaultTypeInternal;
extern GetTxBlockResponseDefaultTypeInternal _GetTxBlockResponse_default_instance_;
class GetVpnInfoRequest;
class GetVpnInfoRequestDefaultTypeInternal;
extern GetVpnInfoRequestDefaultTypeInternal _GetVpnInfoRequest_default_instance_;
class GetVpnInfoResponse;
class GetVpnInfoResponseDefaultTypeInternal;
extern GetVpnInfoResponseDefaultTypeInternal _GetVpnInfoResponse_default_instance_;
class NewTx;
class NewTxDefaultTypeInternal;
extern NewTxDefaultTypeInternal _NewTx_default_instance_;
class ServiceMessage;
class ServiceMessageDefaultTypeInternal;
extern ServiceMessageDefaultTypeInternal _ServiceMessage_default_instance_;
class TxBft;
class TxBftDefaultTypeInternal;
extern TxBftDefaultTypeInternal _TxBft_default_instance_;
class TxBlock;
class TxBlockDefaultTypeInternal;
extern TxBlockDefaultTypeInternal _TxBlock_default_instance_;
class TxInfo;
class TxInfoDefaultTypeInternal;
extern TxInfoDefaultTypeInternal _TxInfo_default_instance_;
}  // namespace protobuf
}  // namespace client
}  // namespace lego
namespace google {
namespace protobuf {
template<> ::lego::client::protobuf::BftMessage* Arena::CreateMaybeMessage<::lego::client::protobuf::BftMessage>(Arena*);
template<> ::lego::client::protobuf::Block* Arena::CreateMaybeMessage<::lego::client::protobuf::Block>(Arena*);
template<> ::lego::client::protobuf::BlockMessage* Arena::CreateMaybeMessage<::lego::client::protobuf::BlockMessage>(Arena*);
template<> ::lego::client::protobuf::GetTxBlockRequest* Arena::CreateMaybeMessage<::lego::client::protobuf::GetTxBlockRequest>(Arena*);
template<> ::lego::client::protobuf::GetTxBlockResponse* Arena::CreateMaybeMessage<::lego::client::protobuf::GetTxBlockResponse>(Arena*);
template<> ::lego::client::protobuf::GetVpnInfoRequest* Arena::CreateMaybeMessage<::lego::client::protobuf::GetVpnInfoRequest>(Arena*);
template<> ::lego::client::protobuf::GetVpnInfoResponse* Arena::CreateMaybeMessage<::lego::client::protobuf::GetVpnInfoResponse>(Arena*);
template<> ::lego::client::protobuf::NewTx* Arena::CreateMaybeMessage<::lego::client::protobuf::NewTx>(Arena*);
template<> ::lego::client::protobuf::ServiceMessage* Arena::CreateMaybeMessage<::lego::client::protobuf::ServiceMessage>(Arena*);
template<> ::lego::client::protobuf::TxBft* Arena::CreateMaybeMessage<::lego::client::protobuf::TxBft>(Arena*);
template<> ::lego::client::protobuf::TxBlock* Arena::CreateMaybeMessage<::lego::client::protobuf::TxBlock>(Arena*);
template<> ::lego::client::protobuf::TxInfo* Arena::CreateMaybeMessage<::lego::client::protobuf::TxInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lego {
namespace client {
namespace protobuf {

// ===================================================================

class NewTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.NewTx) */ {
 public:
  NewTx();
  virtual ~NewTx();

  NewTx(const NewTx& from);

  inline NewTx& operator=(const NewTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewTx(NewTx&& from) noexcept
    : NewTx() {
    *this = ::std::move(from);
  }

  inline NewTx& operator=(NewTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewTx* internal_default_instance() {
    return reinterpret_cast<const NewTx*>(
               &_NewTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewTx* other);
  friend void swap(NewTx& a, NewTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewTx* New() const final {
    return CreateMaybeMessage<NewTx>(NULL);
  }

  NewTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewTx& from);
  void MergeFrom(const NewTx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 1;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes from_acc_addr = 2;
  bool has_from_acc_addr() const;
  void clear_from_acc_addr();
  static const int kFromAccAddrFieldNumber = 2;
  const ::std::string& from_acc_addr() const;
  void set_from_acc_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_from_acc_addr(::std::string&& value);
  #endif
  void set_from_acc_addr(const char* value);
  void set_from_acc_addr(const void* value, size_t size);
  ::std::string* mutable_from_acc_addr();
  ::std::string* release_from_acc_addr();
  void set_allocated_from_acc_addr(::std::string* from_acc_addr);

  // optional bytes from_pubkey = 3;
  bool has_from_pubkey() const;
  void clear_from_pubkey();
  static const int kFromPubkeyFieldNumber = 3;
  const ::std::string& from_pubkey() const;
  void set_from_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_pubkey(::std::string&& value);
  #endif
  void set_from_pubkey(const char* value);
  void set_from_pubkey(const void* value, size_t size);
  ::std::string* mutable_from_pubkey();
  ::std::string* release_from_pubkey();
  void set_allocated_from_pubkey(::std::string* from_pubkey);

  // optional bytes from_sign = 4;
  bool has_from_sign() const;
  void clear_from_sign();
  static const int kFromSignFieldNumber = 4;
  const ::std::string& from_sign() const;
  void set_from_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_from_sign(::std::string&& value);
  #endif
  void set_from_sign(const char* value);
  void set_from_sign(const void* value, size_t size);
  ::std::string* mutable_from_sign();
  ::std::string* release_from_sign();
  void set_allocated_from_sign(::std::string* from_sign);

  // optional bytes to_acc_addr = 5;
  bool has_to_acc_addr() const;
  void clear_to_acc_addr();
  static const int kToAccAddrFieldNumber = 5;
  const ::std::string& to_acc_addr() const;
  void set_to_acc_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_to_acc_addr(::std::string&& value);
  #endif
  void set_to_acc_addr(const char* value);
  void set_to_acc_addr(const void* value, size_t size);
  ::std::string* mutable_to_acc_addr();
  ::std::string* release_to_acc_addr();
  void set_allocated_to_acc_addr(::std::string* to_acc_addr);

  // optional uint64 lego_count = 6;
  bool has_lego_count() const;
  void clear_lego_count();
  static const int kLegoCountFieldNumber = 6;
  ::google::protobuf::uint64 lego_count() const;
  void set_lego_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.NewTx)
 private:
  void set_has_gid();
  void clear_has_gid();
  void set_has_from_acc_addr();
  void clear_has_from_acc_addr();
  void set_has_from_pubkey();
  void clear_has_from_pubkey();
  void set_has_from_sign();
  void clear_has_from_sign();
  void set_has_to_acc_addr();
  void clear_has_to_acc_addr();
  void set_has_lego_count();
  void clear_has_lego_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr from_acc_addr_;
  ::google::protobuf::internal::ArenaStringPtr from_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr from_sign_;
  ::google::protobuf::internal::ArenaStringPtr to_acc_addr_;
  ::google::protobuf::uint64 lego_count_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxBft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.TxBft) */ {
 public:
  TxBft();
  virtual ~TxBft();

  TxBft(const TxBft& from);

  inline TxBft& operator=(const TxBft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxBft(TxBft&& from) noexcept
    : TxBft() {
    *this = ::std::move(from);
  }

  inline TxBft& operator=(TxBft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxBft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxBft* internal_default_instance() {
    return reinterpret_cast<const TxBft*>(
               &_TxBft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TxBft* other);
  friend void swap(TxBft& a, TxBft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxBft* New() const final {
    return CreateMaybeMessage<TxBft>(NULL);
  }

  TxBft* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxBft>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxBft& from);
  void MergeFrom(const TxBft& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lego.client.protobuf.NewTx new_tx = 1;
  bool has_new_tx() const;
  void clear_new_tx();
  static const int kNewTxFieldNumber = 1;
  private:
  const ::lego::client::protobuf::NewTx& _internal_new_tx() const;
  public:
  const ::lego::client::protobuf::NewTx& new_tx() const;
  ::lego::client::protobuf::NewTx* release_new_tx();
  ::lego::client::protobuf::NewTx* mutable_new_tx();
  void set_allocated_new_tx(::lego::client::protobuf::NewTx* new_tx);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.TxBft)
 private:
  void set_has_new_tx();
  void clear_has_new_tx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::lego::client::protobuf::NewTx* new_tx_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BftMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.BftMessage) */ {
 public:
  BftMessage();
  virtual ~BftMessage();

  BftMessage(const BftMessage& from);

  inline BftMessage& operator=(const BftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BftMessage(BftMessage&& from) noexcept
    : BftMessage() {
    *this = ::std::move(from);
  }

  inline BftMessage& operator=(BftMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BftMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BftMessage* internal_default_instance() {
    return reinterpret_cast<const BftMessage*>(
               &_BftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BftMessage* other);
  friend void swap(BftMessage& a, BftMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BftMessage* New() const final {
    return CreateMaybeMessage<BftMessage>(NULL);
  }

  BftMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BftMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BftMessage& from);
  void MergeFrom(const BftMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BftMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bitmap = 15;
  int bitmap_size() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 15;
  ::google::protobuf::uint64 bitmap(int index) const;
  void set_bitmap(int index, ::google::protobuf::uint64 value);
  void add_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bitmap();

  // optional bytes gid = 1;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes node_id = 6;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 6;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // optional bytes pubkey = 7;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 7;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional bytes sign_challenge = 8;
  bool has_sign_challenge() const;
  void clear_sign_challenge();
  static const int kSignChallengeFieldNumber = 8;
  const ::std::string& sign_challenge() const;
  void set_sign_challenge(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_challenge(::std::string&& value);
  #endif
  void set_sign_challenge(const char* value);
  void set_sign_challenge(const void* value, size_t size);
  ::std::string* mutable_sign_challenge();
  ::std::string* release_sign_challenge();
  void set_allocated_sign_challenge(::std::string* sign_challenge);

  // optional bytes sign_response = 9;
  bool has_sign_response() const;
  void clear_sign_response();
  static const int kSignResponseFieldNumber = 9;
  const ::std::string& sign_response() const;
  void set_sign_response(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_response(::std::string&& value);
  #endif
  void set_sign_response(const char* value);
  void set_sign_response(const void* value, size_t size);
  ::std::string* mutable_sign_response();
  ::std::string* release_sign_response();
  void set_allocated_sign_response(::std::string* sign_response);

  // optional bytes secret = 10;
  bool has_secret() const;
  void clear_secret();
  static const int kSecretFieldNumber = 10;
  const ::std::string& secret() const;
  void set_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_secret(::std::string&& value);
  #endif
  void set_secret(const char* value);
  void set_secret(const void* value, size_t size);
  ::std::string* mutable_secret();
  ::std::string* release_secret();
  void set_allocated_secret(::std::string* secret);

  // optional bytes challenge = 11;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 11;
  const ::std::string& challenge() const;
  void set_challenge(const ::std::string& value);
  #if LANG_CXX11
  void set_challenge(::std::string&& value);
  #endif
  void set_challenge(const char* value);
  void set_challenge(const void* value, size_t size);
  ::std::string* mutable_challenge();
  ::std::string* release_challenge();
  void set_allocated_challenge(::std::string* challenge);

  // optional bytes response = 12;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 12;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // optional bytes agg_sign_challenge = 13;
  bool has_agg_sign_challenge() const;
  void clear_agg_sign_challenge();
  static const int kAggSignChallengeFieldNumber = 13;
  const ::std::string& agg_sign_challenge() const;
  void set_agg_sign_challenge(const ::std::string& value);
  #if LANG_CXX11
  void set_agg_sign_challenge(::std::string&& value);
  #endif
  void set_agg_sign_challenge(const char* value);
  void set_agg_sign_challenge(const void* value, size_t size);
  ::std::string* mutable_agg_sign_challenge();
  ::std::string* release_agg_sign_challenge();
  void set_allocated_agg_sign_challenge(::std::string* agg_sign_challenge);

  // optional bytes agg_sign_response = 14;
  bool has_agg_sign_response() const;
  void clear_agg_sign_response();
  static const int kAggSignResponseFieldNumber = 14;
  const ::std::string& agg_sign_response() const;
  void set_agg_sign_response(const ::std::string& value);
  #if LANG_CXX11
  void set_agg_sign_response(::std::string&& value);
  #endif
  void set_agg_sign_response(const char* value);
  void set_agg_sign_response(const void* value, size_t size);
  ::std::string* mutable_agg_sign_response();
  ::std::string* release_agg_sign_response();
  void set_allocated_agg_sign_response(::std::string* agg_sign_response);

  // optional bytes bft_address = 17;
  bool has_bft_address() const;
  void clear_bft_address();
  static const int kBftAddressFieldNumber = 17;
  const ::std::string& bft_address() const;
  void set_bft_address(const ::std::string& value);
  #if LANG_CXX11
  void set_bft_address(::std::string&& value);
  #endif
  void set_bft_address(const char* value);
  void set_bft_address(const void* value, size_t size);
  ::std::string* mutable_bft_address();
  ::std::string* release_bft_address();
  void set_allocated_bft_address(::std::string* bft_address);

  // optional bytes data = 19;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 19;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional uint64 rand = 2;
  bool has_rand() const;
  void clear_rand();
  static const int kRandFieldNumber = 2;
  ::google::protobuf::uint64 rand() const;
  void set_rand(::google::protobuf::uint64 value);

  // optional int32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional uint32 net_id = 5;
  bool has_net_id() const;
  void clear_net_id();
  static const int kNetIdFieldNumber = 5;
  ::google::protobuf::uint32 net_id() const;
  void set_net_id(::google::protobuf::uint32 value);

  // optional bool leader = 4;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 4;
  bool leader() const;
  void set_leader(bool value);

  // optional bool agree = 16;
  bool has_agree() const;
  void clear_agree();
  static const int kAgreeFieldNumber = 16;
  bool agree() const;
  void set_agree(bool value);

  // optional uint32 pool_index = 18;
  bool has_pool_index() const;
  void clear_pool_index();
  static const int kPoolIndexFieldNumber = 18;
  ::google::protobuf::uint32 pool_index() const;
  void set_pool_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.BftMessage)
 private:
  void set_has_gid();
  void clear_has_gid();
  void set_has_rand();
  void clear_has_rand();
  void set_has_status();
  void clear_has_status();
  void set_has_leader();
  void clear_has_leader();
  void set_has_net_id();
  void clear_has_net_id();
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_sign_challenge();
  void clear_has_sign_challenge();
  void set_has_sign_response();
  void clear_has_sign_response();
  void set_has_secret();
  void clear_has_secret();
  void set_has_challenge();
  void clear_has_challenge();
  void set_has_response();
  void clear_has_response();
  void set_has_agg_sign_challenge();
  void clear_has_agg_sign_challenge();
  void set_has_agg_sign_response();
  void clear_has_agg_sign_response();
  void set_has_agree();
  void clear_has_agree();
  void set_has_bft_address();
  void clear_has_bft_address();
  void set_has_pool_index();
  void clear_has_pool_index();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bitmap_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr sign_challenge_;
  ::google::protobuf::internal::ArenaStringPtr sign_response_;
  ::google::protobuf::internal::ArenaStringPtr secret_;
  ::google::protobuf::internal::ArenaStringPtr challenge_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::internal::ArenaStringPtr agg_sign_challenge_;
  ::google::protobuf::internal::ArenaStringPtr agg_sign_response_;
  ::google::protobuf::internal::ArenaStringPtr bft_address_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 rand_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 net_id_;
  bool leader_;
  bool agree_;
  ::google::protobuf::uint32 pool_index_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVpnInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.GetVpnInfoRequest) */ {
 public:
  GetVpnInfoRequest();
  virtual ~GetVpnInfoRequest();

  GetVpnInfoRequest(const GetVpnInfoRequest& from);

  inline GetVpnInfoRequest& operator=(const GetVpnInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVpnInfoRequest(GetVpnInfoRequest&& from) noexcept
    : GetVpnInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetVpnInfoRequest& operator=(GetVpnInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVpnInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVpnInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetVpnInfoRequest*>(
               &_GetVpnInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetVpnInfoRequest* other);
  friend void swap(GetVpnInfoRequest& a, GetVpnInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVpnInfoRequest* New() const final {
    return CreateMaybeMessage<GetVpnInfoRequest>(NULL);
  }

  GetVpnInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVpnInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVpnInfoRequest& from);
  void MergeFrom(const GetVpnInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVpnInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pubkey = 1;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.GetVpnInfoRequest)
 private:
  void set_has_pubkey();
  void clear_has_pubkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVpnInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.GetVpnInfoResponse) */ {
 public:
  GetVpnInfoResponse();
  virtual ~GetVpnInfoResponse();

  GetVpnInfoResponse(const GetVpnInfoResponse& from);

  inline GetVpnInfoResponse& operator=(const GetVpnInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVpnInfoResponse(GetVpnInfoResponse&& from) noexcept
    : GetVpnInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetVpnInfoResponse& operator=(GetVpnInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVpnInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVpnInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetVpnInfoResponse*>(
               &_GetVpnInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetVpnInfoResponse* other);
  friend void swap(GetVpnInfoResponse& a, GetVpnInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVpnInfoResponse* New() const final {
    return CreateMaybeMessage<GetVpnInfoResponse>(NULL);
  }

  GetVpnInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVpnInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVpnInfoResponse& from);
  void MergeFrom(const GetVpnInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVpnInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional bytes encrypt_type = 3;
  bool has_encrypt_type() const;
  void clear_encrypt_type();
  static const int kEncryptTypeFieldNumber = 3;
  const ::std::string& encrypt_type() const;
  void set_encrypt_type(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypt_type(::std::string&& value);
  #endif
  void set_encrypt_type(const char* value);
  void set_encrypt_type(const void* value, size_t size);
  ::std::string* mutable_encrypt_type();
  ::std::string* release_encrypt_type();
  void set_allocated_encrypt_type(::std::string* encrypt_type);

  // optional bytes passwd = 4;
  bool has_passwd() const;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const void* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // optional bytes pubkey = 5;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 5;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.GetVpnInfoResponse)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();
  void set_has_encrypt_type();
  void clear_has_encrypt_type();
  void set_has_passwd();
  void clear_has_passwd();
  void set_has_pubkey();
  void clear_has_pubkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr encrypt_type_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::uint32 port_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.ServiceMessage) */ {
 public:
  ServiceMessage();
  virtual ~ServiceMessage();

  ServiceMessage(const ServiceMessage& from);

  inline ServiceMessage& operator=(const ServiceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceMessage(ServiceMessage&& from) noexcept
    : ServiceMessage() {
    *this = ::std::move(from);
  }

  inline ServiceMessage& operator=(ServiceMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMessage* internal_default_instance() {
    return reinterpret_cast<const ServiceMessage*>(
               &_ServiceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServiceMessage* other);
  friend void swap(ServiceMessage& a, ServiceMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceMessage* New() const final {
    return CreateMaybeMessage<ServiceMessage>(NULL);
  }

  ServiceMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceMessage& from);
  void MergeFrom(const ServiceMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lego.client.protobuf.GetVpnInfoRequest vpn_req = 1;
  bool has_vpn_req() const;
  void clear_vpn_req();
  static const int kVpnReqFieldNumber = 1;
  private:
  const ::lego::client::protobuf::GetVpnInfoRequest& _internal_vpn_req() const;
  public:
  const ::lego::client::protobuf::GetVpnInfoRequest& vpn_req() const;
  ::lego::client::protobuf::GetVpnInfoRequest* release_vpn_req();
  ::lego::client::protobuf::GetVpnInfoRequest* mutable_vpn_req();
  void set_allocated_vpn_req(::lego::client::protobuf::GetVpnInfoRequest* vpn_req);

  // optional .lego.client.protobuf.GetVpnInfoResponse vpn_res = 2;
  bool has_vpn_res() const;
  void clear_vpn_res();
  static const int kVpnResFieldNumber = 2;
  private:
  const ::lego::client::protobuf::GetVpnInfoResponse& _internal_vpn_res() const;
  public:
  const ::lego::client::protobuf::GetVpnInfoResponse& vpn_res() const;
  ::lego::client::protobuf::GetVpnInfoResponse* release_vpn_res();
  ::lego::client::protobuf::GetVpnInfoResponse* mutable_vpn_res();
  void set_allocated_vpn_res(::lego::client::protobuf::GetVpnInfoResponse* vpn_res);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.ServiceMessage)
 private:
  void set_has_vpn_req();
  void clear_has_vpn_req();
  void set_has_vpn_res();
  void clear_has_vpn_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::lego::client::protobuf::GetVpnInfoRequest* vpn_req_;
  ::lego::client::protobuf::GetVpnInfoResponse* vpn_res_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTxBlockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.GetTxBlockRequest) */ {
 public:
  GetTxBlockRequest();
  virtual ~GetTxBlockRequest();

  GetTxBlockRequest(const GetTxBlockRequest& from);

  inline GetTxBlockRequest& operator=(const GetTxBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxBlockRequest(GetTxBlockRequest&& from) noexcept
    : GetTxBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetTxBlockRequest& operator=(GetTxBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockRequest*>(
               &_GetTxBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetTxBlockRequest* other);
  friend void swap(GetTxBlockRequest& a, GetTxBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxBlockRequest* New() const final {
    return CreateMaybeMessage<GetTxBlockRequest>(NULL);
  }

  GetTxBlockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxBlockRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxBlockRequest& from);
  void MergeFrom(const GetTxBlockRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx_gid = 1;
  bool has_tx_gid() const;
  void clear_tx_gid();
  static const int kTxGidFieldNumber = 1;
  const ::std::string& tx_gid() const;
  void set_tx_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_gid(::std::string&& value);
  #endif
  void set_tx_gid(const char* value);
  void set_tx_gid(const void* value, size_t size);
  ::std::string* mutable_tx_gid();
  ::std::string* release_tx_gid();
  void set_allocated_tx_gid(::std::string* tx_gid);

  // optional bytes block_hash = 2;
  bool has_block_hash() const;
  void clear_block_hash();
  static const int kBlockHashFieldNumber = 2;
  const ::std::string& block_hash() const;
  void set_block_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_block_hash(::std::string&& value);
  #endif
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  ::std::string* mutable_block_hash();
  ::std::string* release_block_hash();
  void set_allocated_block_hash(::std::string* block_hash);

  // optional bool from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  bool from() const;
  void set_from(bool value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.GetTxBlockRequest)
 private:
  void set_has_tx_gid();
  void clear_has_tx_gid();
  void set_has_block_hash();
  void clear_has_block_hash();
  void set_has_from();
  void clear_has_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tx_gid_;
  ::google::protobuf::internal::ArenaStringPtr block_hash_;
  bool from_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTxBlockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.GetTxBlockResponse) */ {
 public:
  GetTxBlockResponse();
  virtual ~GetTxBlockResponse();

  GetTxBlockResponse(const GetTxBlockResponse& from);

  inline GetTxBlockResponse& operator=(const GetTxBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxBlockResponse(GetTxBlockResponse&& from) noexcept
    : GetTxBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetTxBlockResponse& operator=(GetTxBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockResponse*>(
               &_GetTxBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetTxBlockResponse* other);
  friend void swap(GetTxBlockResponse& a, GetTxBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxBlockResponse* New() const final {
    return CreateMaybeMessage<GetTxBlockResponse>(NULL);
  }

  GetTxBlockResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxBlockResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxBlockResponse& from);
  void MergeFrom(const GetTxBlockResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.GetTxBlockResponse)
 private:
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.BlockMessage) */ {
 public:
  BlockMessage();
  virtual ~BlockMessage();

  BlockMessage(const BlockMessage& from);

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockMessage(BlockMessage&& from) noexcept
    : BlockMessage() {
    *this = ::std::move(from);
  }

  inline BlockMessage& operator=(BlockMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockMessage* internal_default_instance() {
    return reinterpret_cast<const BlockMessage*>(
               &_BlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BlockMessage* other);
  friend void swap(BlockMessage& a, BlockMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockMessage* New() const final {
    return CreateMaybeMessage<BlockMessage>(NULL);
  }

  BlockMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockMessage& from);
  void MergeFrom(const BlockMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lego.client.protobuf.GetTxBlockRequest block_req = 1;
  bool has_block_req() const;
  void clear_block_req();
  static const int kBlockReqFieldNumber = 1;
  private:
  const ::lego::client::protobuf::GetTxBlockRequest& _internal_block_req() const;
  public:
  const ::lego::client::protobuf::GetTxBlockRequest& block_req() const;
  ::lego::client::protobuf::GetTxBlockRequest* release_block_req();
  ::lego::client::protobuf::GetTxBlockRequest* mutable_block_req();
  void set_allocated_block_req(::lego::client::protobuf::GetTxBlockRequest* block_req);

  // optional .lego.client.protobuf.GetTxBlockResponse block_res = 2;
  bool has_block_res() const;
  void clear_block_res();
  static const int kBlockResFieldNumber = 2;
  private:
  const ::lego::client::protobuf::GetTxBlockResponse& _internal_block_res() const;
  public:
  const ::lego::client::protobuf::GetTxBlockResponse& block_res() const;
  ::lego::client::protobuf::GetTxBlockResponse* release_block_res();
  ::lego::client::protobuf::GetTxBlockResponse* mutable_block_res();
  void set_allocated_block_res(::lego::client::protobuf::GetTxBlockResponse* block_res);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.BlockMessage)
 private:
  void set_has_block_req();
  void clear_has_block_req();
  void set_has_block_res();
  void clear_has_block_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::lego::client::protobuf::GetTxBlockRequest* block_req_;
  ::lego::client::protobuf::GetTxBlockResponse* block_res_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.TxInfo) */ {
 public:
  TxInfo();
  virtual ~TxInfo();

  TxInfo(const TxInfo& from);

  inline TxInfo& operator=(const TxInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxInfo(TxInfo&& from) noexcept
    : TxInfo() {
    *this = ::std::move(from);
  }

  inline TxInfo& operator=(TxInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInfo* internal_default_instance() {
    return reinterpret_cast<const TxInfo*>(
               &_TxInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TxInfo* other);
  friend void swap(TxInfo& a, TxInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxInfo* New() const final {
    return CreateMaybeMessage<TxInfo>(NULL);
  }

  TxInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxInfo& from);
  void MergeFrom(const TxInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gid = 2;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_gid(::std::string&& value);
  #endif
  void set_gid(const char* value);
  void set_gid(const void* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // optional bytes from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional bytes from_pubkey = 4;
  bool has_from_pubkey() const;
  void clear_from_pubkey();
  static const int kFromPubkeyFieldNumber = 4;
  const ::std::string& from_pubkey() const;
  void set_from_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_from_pubkey(::std::string&& value);
  #endif
  void set_from_pubkey(const char* value);
  void set_from_pubkey(const void* value, size_t size);
  ::std::string* mutable_from_pubkey();
  ::std::string* release_from_pubkey();
  void set_allocated_from_pubkey(::std::string* from_pubkey);

  // optional bytes from_sign = 5;
  bool has_from_sign() const;
  void clear_from_sign();
  static const int kFromSignFieldNumber = 5;
  const ::std::string& from_sign() const;
  void set_from_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_from_sign(::std::string&& value);
  #endif
  void set_from_sign(const char* value);
  void set_from_sign(const void* value, size_t size);
  ::std::string* mutable_from_sign();
  ::std::string* release_from_sign();
  void set_allocated_from_sign(::std::string* from_sign);

  // optional bytes to = 6;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 6;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool to_add = 12;
  bool has_to_add() const;
  void clear_to_add();
  static const int kToAddFieldNumber = 12;
  bool to_add() const;
  void set_to_add(bool value);

  // optional uint64 amount = 7;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 gas_limit = 8;
  bool has_gas_limit() const;
  void clear_gas_limit();
  static const int kGasLimitFieldNumber = 8;
  ::google::protobuf::uint64 gas_limit() const;
  void set_gas_limit(::google::protobuf::uint64 value);

  // optional uint64 gas_used = 9;
  bool has_gas_used() const;
  void clear_gas_used();
  static const int kGasUsedFieldNumber = 9;
  ::google::protobuf::uint64 gas_used() const;
  void set_gas_used(::google::protobuf::uint64 value);

  // optional uint64 gas_price = 10;
  bool has_gas_price() const;
  void clear_gas_price();
  static const int kGasPriceFieldNumber = 10;
  ::google::protobuf::uint64 gas_price() const;
  void set_gas_price(::google::protobuf::uint64 value);

  // optional uint64 balance = 11;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 11;
  ::google::protobuf::uint64 balance() const;
  void set_balance(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.TxInfo)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_gid();
  void clear_has_gid();
  void set_has_from();
  void clear_has_from();
  void set_has_from_pubkey();
  void clear_has_from_pubkey();
  void set_has_from_sign();
  void clear_has_from_sign();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();
  void set_has_gas_limit();
  void clear_has_gas_limit();
  void set_has_gas_used();
  void clear_has_gas_used();
  void set_has_gas_price();
  void clear_has_gas_price();
  void set_has_balance();
  void clear_has_balance();
  void set_has_to_add();
  void clear_has_to_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr from_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr from_sign_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::uint32 version_;
  bool to_add_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 gas_limit_;
  ::google::protobuf::uint64 gas_used_;
  ::google::protobuf::uint64 gas_price_;
  ::google::protobuf::uint64 balance_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.TxBlock) */ {
 public:
  TxBlock();
  virtual ~TxBlock();

  TxBlock(const TxBlock& from);

  inline TxBlock& operator=(const TxBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxBlock(TxBlock&& from) noexcept
    : TxBlock() {
    *this = ::std::move(from);
  }

  inline TxBlock& operator=(TxBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxBlock* internal_default_instance() {
    return reinterpret_cast<const TxBlock*>(
               &_TxBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TxBlock* other);
  friend void swap(TxBlock& a, TxBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxBlock* New() const final {
    return CreateMaybeMessage<TxBlock>(NULL);
  }

  TxBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxBlock& from);
  void MergeFrom(const TxBlock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bitmap = 5;
  int bitmap_size() const;
  void clear_bitmap();
  static const int kBitmapFieldNumber = 5;
  ::google::protobuf::uint64 bitmap(int index) const;
  void set_bitmap(int index, ::google::protobuf::uint64 value);
  void add_bitmap(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bitmap() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bitmap();

  // repeated .lego.client.protobuf.TxInfo tx_list = 11;
  int tx_list_size() const;
  void clear_tx_list();
  static const int kTxListFieldNumber = 11;
  ::lego::client::protobuf::TxInfo* mutable_tx_list(int index);
  ::google::protobuf::RepeatedPtrField< ::lego::client::protobuf::TxInfo >*
      mutable_tx_list();
  const ::lego::client::protobuf::TxInfo& tx_list(int index) const;
  ::lego::client::protobuf::TxInfo* add_tx_list();
  const ::google::protobuf::RepeatedPtrField< ::lego::client::protobuf::TxInfo >&
      tx_list() const;

  // optional bytes prehash = 1;
  bool has_prehash() const;
  void clear_prehash();
  static const int kPrehashFieldNumber = 1;
  const ::std::string& prehash() const;
  void set_prehash(const ::std::string& value);
  #if LANG_CXX11
  void set_prehash(::std::string&& value);
  #endif
  void set_prehash(const char* value);
  void set_prehash(const void* value, size_t size);
  ::std::string* mutable_prehash();
  ::std::string* release_prehash();
  void set_allocated_prehash(::std::string* prehash);

  // optional bytes rc_hash = 4;
  bool has_rc_hash() const;
  void clear_rc_hash();
  static const int kRcHashFieldNumber = 4;
  const ::std::string& rc_hash() const;
  void set_rc_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_rc_hash(::std::string&& value);
  #endif
  void set_rc_hash(const char* value);
  void set_rc_hash(const void* value, size_t size);
  ::std::string* mutable_rc_hash();
  ::std::string* release_rc_hash();
  void set_allocated_rc_hash(::std::string* rc_hash);

  // optional bytes agg_pubkey = 6;
  bool has_agg_pubkey() const;
  void clear_agg_pubkey();
  static const int kAggPubkeyFieldNumber = 6;
  const ::std::string& agg_pubkey() const;
  void set_agg_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_agg_pubkey(::std::string&& value);
  #endif
  void set_agg_pubkey(const char* value);
  void set_agg_pubkey(const void* value, size_t size);
  ::std::string* mutable_agg_pubkey();
  ::std::string* release_agg_pubkey();
  void set_allocated_agg_pubkey(::std::string* agg_pubkey);

  // optional bytes agg_sign = 7;
  bool has_agg_sign() const;
  void clear_agg_sign();
  static const int kAggSignFieldNumber = 7;
  const ::std::string& agg_sign() const;
  void set_agg_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_agg_sign(::std::string&& value);
  #endif
  void set_agg_sign(const char* value);
  void set_agg_sign(const void* value, size_t size);
  ::std::string* mutable_agg_sign();
  ::std::string* release_agg_sign();
  void set_allocated_agg_sign(::std::string* agg_sign);

  // optional bytes tx_hash = 9;
  bool has_tx_hash() const;
  void clear_tx_hash();
  static const int kTxHashFieldNumber = 9;
  const ::std::string& tx_hash() const;
  void set_tx_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_hash(::std::string&& value);
  #endif
  void set_tx_hash(const char* value);
  void set_tx_hash(const void* value, size_t size);
  ::std::string* mutable_tx_hash();
  ::std::string* release_tx_hash();
  void set_allocated_tx_hash(::std::string* tx_hash);

  // optional bytes tx_root_hash = 10;
  bool has_tx_root_hash() const;
  void clear_tx_root_hash();
  static const int kTxRootHashFieldNumber = 10;
  const ::std::string& tx_root_hash() const;
  void set_tx_root_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_root_hash(::std::string&& value);
  #endif
  void set_tx_root_hash(const char* value);
  void set_tx_root_hash(const void* value, size_t size);
  ::std::string* mutable_tx_root_hash();
  ::std::string* release_tx_root_hash();
  void set_allocated_tx_root_hash(::std::string* tx_root_hash);

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 elect_ver = 3;
  bool has_elect_ver() const;
  void clear_elect_ver();
  static const int kElectVerFieldNumber = 3;
  ::google::protobuf::uint32 elect_ver() const;
  void set_elect_ver(::google::protobuf::uint32 value);

  // optional uint64 tx_id = 8;
  bool has_tx_id() const;
  void clear_tx_id();
  static const int kTxIdFieldNumber = 8;
  ::google::protobuf::uint64 tx_id() const;
  void set_tx_id(::google::protobuf::uint64 value);

  // optional uint32 network_id = 12;
  bool has_network_id() const;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 12;
  ::google::protobuf::uint32 network_id() const;
  void set_network_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.TxBlock)
 private:
  void set_has_prehash();
  void clear_has_prehash();
  void set_has_version();
  void clear_has_version();
  void set_has_elect_ver();
  void clear_has_elect_ver();
  void set_has_rc_hash();
  void clear_has_rc_hash();
  void set_has_agg_pubkey();
  void clear_has_agg_pubkey();
  void set_has_agg_sign();
  void clear_has_agg_sign();
  void set_has_tx_id();
  void clear_has_tx_id();
  void set_has_tx_hash();
  void clear_has_tx_hash();
  void set_has_tx_root_hash();
  void clear_has_tx_root_hash();
  void set_has_network_id();
  void clear_has_network_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bitmap_;
  ::google::protobuf::RepeatedPtrField< ::lego::client::protobuf::TxInfo > tx_list_;
  ::google::protobuf::internal::ArenaStringPtr prehash_;
  ::google::protobuf::internal::ArenaStringPtr rc_hash_;
  ::google::protobuf::internal::ArenaStringPtr agg_pubkey_;
  ::google::protobuf::internal::ArenaStringPtr agg_sign_;
  ::google::protobuf::internal::ArenaStringPtr tx_hash_;
  ::google::protobuf::internal::ArenaStringPtr tx_root_hash_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 elect_ver_;
  ::google::protobuf::uint64 tx_id_;
  ::google::protobuf::uint32 network_id_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.client.protobuf.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional .lego.client.protobuf.TxBlock tx_block = 3;
  bool has_tx_block() const;
  void clear_tx_block();
  static const int kTxBlockFieldNumber = 3;
  private:
  const ::lego::client::protobuf::TxBlock& _internal_tx_block() const;
  public:
  const ::lego::client::protobuf::TxBlock& tx_block() const;
  ::lego::client::protobuf::TxBlock* release_tx_block();
  ::lego::client::protobuf::TxBlock* mutable_tx_block();
  void set_allocated_tx_block(::lego::client::protobuf::TxBlock* tx_block);

  // optional uint64 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:lego.client.protobuf.Block)
 private:
  void set_has_hash();
  void clear_has_hash();
  void set_has_height();
  void clear_has_height();
  void set_has_tx_block();
  void clear_has_tx_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::lego::client::protobuf::TxBlock* tx_block_;
  ::google::protobuf::uint64 height_;
  friend struct ::protobuf_client_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewTx

// optional bytes gid = 1;
inline bool NewTx::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewTx::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewTx::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewTx::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& NewTx::gid() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.NewTx.gid)
  return gid_.GetNoArena();
}
inline void NewTx::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.NewTx.gid)
}
#if LANG_CXX11
inline void NewTx::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.NewTx.gid)
}
#endif
inline void NewTx::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.NewTx.gid)
}
inline void NewTx::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.NewTx.gid)
}
inline ::std::string* NewTx::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.NewTx.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_gid() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.NewTx.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.NewTx.gid)
}

// optional bytes from_acc_addr = 2;
inline bool NewTx::has_from_acc_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewTx::set_has_from_acc_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewTx::clear_has_from_acc_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewTx::clear_from_acc_addr() {
  from_acc_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_acc_addr();
}
inline const ::std::string& NewTx::from_acc_addr() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.NewTx.from_acc_addr)
  return from_acc_addr_.GetNoArena();
}
inline void NewTx::set_from_acc_addr(const ::std::string& value) {
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.NewTx.from_acc_addr)
}
#if LANG_CXX11
inline void NewTx::set_from_acc_addr(::std::string&& value) {
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.NewTx.from_acc_addr)
}
#endif
inline void NewTx::set_from_acc_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.NewTx.from_acc_addr)
}
inline void NewTx::set_from_acc_addr(const void* value, size_t size) {
  set_has_from_acc_addr();
  from_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.NewTx.from_acc_addr)
}
inline ::std::string* NewTx::mutable_from_acc_addr() {
  set_has_from_acc_addr();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.NewTx.from_acc_addr)
  return from_acc_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_from_acc_addr() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.NewTx.from_acc_addr)
  if (!has_from_acc_addr()) {
    return NULL;
  }
  clear_has_from_acc_addr();
  return from_acc_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_from_acc_addr(::std::string* from_acc_addr) {
  if (from_acc_addr != NULL) {
    set_has_from_acc_addr();
  } else {
    clear_has_from_acc_addr();
  }
  from_acc_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_acc_addr);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.NewTx.from_acc_addr)
}

// optional bytes from_pubkey = 3;
inline bool NewTx::has_from_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewTx::set_has_from_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewTx::clear_has_from_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewTx::clear_from_pubkey() {
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_pubkey();
}
inline const ::std::string& NewTx::from_pubkey() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.NewTx.from_pubkey)
  return from_pubkey_.GetNoArena();
}
inline void NewTx::set_from_pubkey(const ::std::string& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.NewTx.from_pubkey)
}
#if LANG_CXX11
inline void NewTx::set_from_pubkey(::std::string&& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.NewTx.from_pubkey)
}
#endif
inline void NewTx::set_from_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.NewTx.from_pubkey)
}
inline void NewTx::set_from_pubkey(const void* value, size_t size) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.NewTx.from_pubkey)
}
inline ::std::string* NewTx::mutable_from_pubkey() {
  set_has_from_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.NewTx.from_pubkey)
  return from_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_from_pubkey() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.NewTx.from_pubkey)
  if (!has_from_pubkey()) {
    return NULL;
  }
  clear_has_from_pubkey();
  return from_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_from_pubkey(::std::string* from_pubkey) {
  if (from_pubkey != NULL) {
    set_has_from_pubkey();
  } else {
    clear_has_from_pubkey();
  }
  from_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.NewTx.from_pubkey)
}

// optional bytes from_sign = 4;
inline bool NewTx::has_from_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewTx::set_has_from_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewTx::clear_has_from_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewTx::clear_from_sign() {
  from_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_sign();
}
inline const ::std::string& NewTx::from_sign() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.NewTx.from_sign)
  return from_sign_.GetNoArena();
}
inline void NewTx::set_from_sign(const ::std::string& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.NewTx.from_sign)
}
#if LANG_CXX11
inline void NewTx::set_from_sign(::std::string&& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.NewTx.from_sign)
}
#endif
inline void NewTx::set_from_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.NewTx.from_sign)
}
inline void NewTx::set_from_sign(const void* value, size_t size) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.NewTx.from_sign)
}
inline ::std::string* NewTx::mutable_from_sign() {
  set_has_from_sign();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.NewTx.from_sign)
  return from_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_from_sign() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.NewTx.from_sign)
  if (!has_from_sign()) {
    return NULL;
  }
  clear_has_from_sign();
  return from_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_from_sign(::std::string* from_sign) {
  if (from_sign != NULL) {
    set_has_from_sign();
  } else {
    clear_has_from_sign();
  }
  from_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_sign);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.NewTx.from_sign)
}

// optional bytes to_acc_addr = 5;
inline bool NewTx::has_to_acc_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewTx::set_has_to_acc_addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewTx::clear_has_to_acc_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewTx::clear_to_acc_addr() {
  to_acc_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_acc_addr();
}
inline const ::std::string& NewTx::to_acc_addr() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.NewTx.to_acc_addr)
  return to_acc_addr_.GetNoArena();
}
inline void NewTx::set_to_acc_addr(const ::std::string& value) {
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.NewTx.to_acc_addr)
}
#if LANG_CXX11
inline void NewTx::set_to_acc_addr(::std::string&& value) {
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.NewTx.to_acc_addr)
}
#endif
inline void NewTx::set_to_acc_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.NewTx.to_acc_addr)
}
inline void NewTx::set_to_acc_addr(const void* value, size_t size) {
  set_has_to_acc_addr();
  to_acc_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.NewTx.to_acc_addr)
}
inline ::std::string* NewTx::mutable_to_acc_addr() {
  set_has_to_acc_addr();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.NewTx.to_acc_addr)
  return to_acc_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTx::release_to_acc_addr() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.NewTx.to_acc_addr)
  if (!has_to_acc_addr()) {
    return NULL;
  }
  clear_has_to_acc_addr();
  return to_acc_addr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTx::set_allocated_to_acc_addr(::std::string* to_acc_addr) {
  if (to_acc_addr != NULL) {
    set_has_to_acc_addr();
  } else {
    clear_has_to_acc_addr();
  }
  to_acc_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_acc_addr);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.NewTx.to_acc_addr)
}

// optional uint64 lego_count = 6;
inline bool NewTx::has_lego_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewTx::set_has_lego_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewTx::clear_has_lego_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewTx::clear_lego_count() {
  lego_count_ = GOOGLE_ULONGLONG(0);
  clear_has_lego_count();
}
inline ::google::protobuf::uint64 NewTx::lego_count() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.NewTx.lego_count)
  return lego_count_;
}
inline void NewTx::set_lego_count(::google::protobuf::uint64 value) {
  set_has_lego_count();
  lego_count_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.NewTx.lego_count)
}

// -------------------------------------------------------------------

// TxBft

// optional .lego.client.protobuf.NewTx new_tx = 1;
inline bool TxBft::has_new_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxBft::set_has_new_tx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxBft::clear_has_new_tx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxBft::clear_new_tx() {
  if (new_tx_ != NULL) new_tx_->Clear();
  clear_has_new_tx();
}
inline const ::lego::client::protobuf::NewTx& TxBft::_internal_new_tx() const {
  return *new_tx_;
}
inline const ::lego::client::protobuf::NewTx& TxBft::new_tx() const {
  const ::lego::client::protobuf::NewTx* p = new_tx_;
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBft.new_tx)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::client::protobuf::NewTx*>(
      &::lego::client::protobuf::_NewTx_default_instance_);
}
inline ::lego::client::protobuf::NewTx* TxBft::release_new_tx() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBft.new_tx)
  clear_has_new_tx();
  ::lego::client::protobuf::NewTx* temp = new_tx_;
  new_tx_ = NULL;
  return temp;
}
inline ::lego::client::protobuf::NewTx* TxBft::mutable_new_tx() {
  set_has_new_tx();
  if (new_tx_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::client::protobuf::NewTx>(GetArenaNoVirtual());
    new_tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBft.new_tx)
  return new_tx_;
}
inline void TxBft::set_allocated_new_tx(::lego::client::protobuf::NewTx* new_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_tx_;
  }
  if (new_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_tx, submessage_arena);
    }
    set_has_new_tx();
  } else {
    clear_has_new_tx();
  }
  new_tx_ = new_tx;
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBft.new_tx)
}

// -------------------------------------------------------------------

// BftMessage

// optional bytes gid = 1;
inline bool BftMessage::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BftMessage::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BftMessage::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BftMessage::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& BftMessage::gid() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.gid)
  return gid_.GetNoArena();
}
inline void BftMessage::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.gid)
}
#if LANG_CXX11
inline void BftMessage::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.gid)
}
#endif
inline void BftMessage::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.gid)
}
inline void BftMessage::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.gid)
}
inline ::std::string* BftMessage::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_gid() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.gid)
}

// optional uint64 rand = 2;
inline bool BftMessage::has_rand() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BftMessage::set_has_rand() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BftMessage::clear_has_rand() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BftMessage::clear_rand() {
  rand_ = GOOGLE_ULONGLONG(0);
  clear_has_rand();
}
inline ::google::protobuf::uint64 BftMessage::rand() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.rand)
  return rand_;
}
inline void BftMessage::set_rand(::google::protobuf::uint64 value) {
  set_has_rand();
  rand_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.rand)
}

// optional int32 status = 3;
inline bool BftMessage::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BftMessage::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BftMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BftMessage::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BftMessage::status() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.status)
  return status_;
}
inline void BftMessage::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.status)
}

// optional bool leader = 4;
inline bool BftMessage::has_leader() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BftMessage::set_has_leader() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BftMessage::clear_has_leader() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BftMessage::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool BftMessage::leader() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.leader)
  return leader_;
}
inline void BftMessage::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.leader)
}

// optional uint32 net_id = 5;
inline bool BftMessage::has_net_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BftMessage::set_has_net_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BftMessage::clear_has_net_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BftMessage::clear_net_id() {
  net_id_ = 0u;
  clear_has_net_id();
}
inline ::google::protobuf::uint32 BftMessage::net_id() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.net_id)
  return net_id_;
}
inline void BftMessage::set_net_id(::google::protobuf::uint32 value) {
  set_has_net_id();
  net_id_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.net_id)
}

// optional bytes node_id = 6;
inline bool BftMessage::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BftMessage::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BftMessage::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BftMessage::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_id();
}
inline const ::std::string& BftMessage::node_id() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.node_id)
  return node_id_.GetNoArena();
}
inline void BftMessage::set_node_id(const ::std::string& value) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.node_id)
}
#if LANG_CXX11
inline void BftMessage::set_node_id(::std::string&& value) {
  set_has_node_id();
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.node_id)
}
#endif
inline void BftMessage::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.node_id)
}
inline void BftMessage::set_node_id(const void* value, size_t size) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.node_id)
}
inline ::std::string* BftMessage::mutable_node_id() {
  set_has_node_id();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_node_id() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.node_id)
  if (!has_node_id()) {
    return NULL;
  }
  clear_has_node_id();
  return node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    set_has_node_id();
  } else {
    clear_has_node_id();
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.node_id)
}

// optional bytes pubkey = 7;
inline bool BftMessage::has_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BftMessage::set_has_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BftMessage::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BftMessage::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& BftMessage::pubkey() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.pubkey)
  return pubkey_.GetNoArena();
}
inline void BftMessage::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.pubkey)
}
#if LANG_CXX11
inline void BftMessage::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.pubkey)
}
#endif
inline void BftMessage::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.pubkey)
}
inline void BftMessage::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.pubkey)
}
inline ::std::string* BftMessage::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_pubkey() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.pubkey)
}

// optional bytes sign_challenge = 8;
inline bool BftMessage::has_sign_challenge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BftMessage::set_has_sign_challenge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BftMessage::clear_has_sign_challenge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BftMessage::clear_sign_challenge() {
  sign_challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_challenge();
}
inline const ::std::string& BftMessage::sign_challenge() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.sign_challenge)
  return sign_challenge_.GetNoArena();
}
inline void BftMessage::set_sign_challenge(const ::std::string& value) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.sign_challenge)
}
#if LANG_CXX11
inline void BftMessage::set_sign_challenge(::std::string&& value) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.sign_challenge)
}
#endif
inline void BftMessage::set_sign_challenge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.sign_challenge)
}
inline void BftMessage::set_sign_challenge(const void* value, size_t size) {
  set_has_sign_challenge();
  sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.sign_challenge)
}
inline ::std::string* BftMessage::mutable_sign_challenge() {
  set_has_sign_challenge();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.sign_challenge)
  return sign_challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_sign_challenge() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.sign_challenge)
  if (!has_sign_challenge()) {
    return NULL;
  }
  clear_has_sign_challenge();
  return sign_challenge_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_sign_challenge(::std::string* sign_challenge) {
  if (sign_challenge != NULL) {
    set_has_sign_challenge();
  } else {
    clear_has_sign_challenge();
  }
  sign_challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_challenge);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.sign_challenge)
}

// optional bytes sign_response = 9;
inline bool BftMessage::has_sign_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BftMessage::set_has_sign_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BftMessage::clear_has_sign_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BftMessage::clear_sign_response() {
  sign_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_response();
}
inline const ::std::string& BftMessage::sign_response() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.sign_response)
  return sign_response_.GetNoArena();
}
inline void BftMessage::set_sign_response(const ::std::string& value) {
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.sign_response)
}
#if LANG_CXX11
inline void BftMessage::set_sign_response(::std::string&& value) {
  set_has_sign_response();
  sign_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.sign_response)
}
#endif
inline void BftMessage::set_sign_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.sign_response)
}
inline void BftMessage::set_sign_response(const void* value, size_t size) {
  set_has_sign_response();
  sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.sign_response)
}
inline ::std::string* BftMessage::mutable_sign_response() {
  set_has_sign_response();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.sign_response)
  return sign_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_sign_response() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.sign_response)
  if (!has_sign_response()) {
    return NULL;
  }
  clear_has_sign_response();
  return sign_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_sign_response(::std::string* sign_response) {
  if (sign_response != NULL) {
    set_has_sign_response();
  } else {
    clear_has_sign_response();
  }
  sign_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_response);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.sign_response)
}

// optional bytes secret = 10;
inline bool BftMessage::has_secret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BftMessage::set_has_secret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BftMessage::clear_has_secret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BftMessage::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret();
}
inline const ::std::string& BftMessage::secret() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.secret)
  return secret_.GetNoArena();
}
inline void BftMessage::set_secret(const ::std::string& value) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.secret)
}
#if LANG_CXX11
inline void BftMessage::set_secret(::std::string&& value) {
  set_has_secret();
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.secret)
}
#endif
inline void BftMessage::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.secret)
}
inline void BftMessage::set_secret(const void* value, size_t size) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.secret)
}
inline ::std::string* BftMessage::mutable_secret() {
  set_has_secret();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_secret() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.secret)
  if (!has_secret()) {
    return NULL;
  }
  clear_has_secret();
  return secret_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    set_has_secret();
  } else {
    clear_has_secret();
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.secret)
}

// optional bytes challenge = 11;
inline bool BftMessage::has_challenge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BftMessage::set_has_challenge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BftMessage::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BftMessage::clear_challenge() {
  challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_challenge();
}
inline const ::std::string& BftMessage::challenge() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.challenge)
  return challenge_.GetNoArena();
}
inline void BftMessage::set_challenge(const ::std::string& value) {
  set_has_challenge();
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.challenge)
}
#if LANG_CXX11
inline void BftMessage::set_challenge(::std::string&& value) {
  set_has_challenge();
  challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.challenge)
}
#endif
inline void BftMessage::set_challenge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_challenge();
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.challenge)
}
inline void BftMessage::set_challenge(const void* value, size_t size) {
  set_has_challenge();
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.challenge)
}
inline ::std::string* BftMessage::mutable_challenge() {
  set_has_challenge();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.challenge)
  return challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_challenge() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.challenge)
  if (!has_challenge()) {
    return NULL;
  }
  clear_has_challenge();
  return challenge_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_challenge(::std::string* challenge) {
  if (challenge != NULL) {
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), challenge);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.challenge)
}

// optional bytes response = 12;
inline bool BftMessage::has_response() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BftMessage::set_has_response() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BftMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BftMessage::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
inline const ::std::string& BftMessage::response() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.response)
  return response_.GetNoArena();
}
inline void BftMessage::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.response)
}
#if LANG_CXX11
inline void BftMessage::set_response(::std::string&& value) {
  set_has_response();
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.response)
}
#endif
inline void BftMessage::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.response)
}
inline void BftMessage::set_response(const void* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.response)
}
inline ::std::string* BftMessage::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_response() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.response)
  if (!has_response()) {
    return NULL;
  }
  clear_has_response();
  return response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.response)
}

// optional bytes agg_sign_challenge = 13;
inline bool BftMessage::has_agg_sign_challenge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BftMessage::set_has_agg_sign_challenge() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BftMessage::clear_has_agg_sign_challenge() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BftMessage::clear_agg_sign_challenge() {
  agg_sign_challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_agg_sign_challenge();
}
inline const ::std::string& BftMessage::agg_sign_challenge() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.agg_sign_challenge)
  return agg_sign_challenge_.GetNoArena();
}
inline void BftMessage::set_agg_sign_challenge(const ::std::string& value) {
  set_has_agg_sign_challenge();
  agg_sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.agg_sign_challenge)
}
#if LANG_CXX11
inline void BftMessage::set_agg_sign_challenge(::std::string&& value) {
  set_has_agg_sign_challenge();
  agg_sign_challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.agg_sign_challenge)
}
#endif
inline void BftMessage::set_agg_sign_challenge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_agg_sign_challenge();
  agg_sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.agg_sign_challenge)
}
inline void BftMessage::set_agg_sign_challenge(const void* value, size_t size) {
  set_has_agg_sign_challenge();
  agg_sign_challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.agg_sign_challenge)
}
inline ::std::string* BftMessage::mutable_agg_sign_challenge() {
  set_has_agg_sign_challenge();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.agg_sign_challenge)
  return agg_sign_challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_agg_sign_challenge() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.agg_sign_challenge)
  if (!has_agg_sign_challenge()) {
    return NULL;
  }
  clear_has_agg_sign_challenge();
  return agg_sign_challenge_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_agg_sign_challenge(::std::string* agg_sign_challenge) {
  if (agg_sign_challenge != NULL) {
    set_has_agg_sign_challenge();
  } else {
    clear_has_agg_sign_challenge();
  }
  agg_sign_challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agg_sign_challenge);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.agg_sign_challenge)
}

// optional bytes agg_sign_response = 14;
inline bool BftMessage::has_agg_sign_response() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BftMessage::set_has_agg_sign_response() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BftMessage::clear_has_agg_sign_response() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BftMessage::clear_agg_sign_response() {
  agg_sign_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_agg_sign_response();
}
inline const ::std::string& BftMessage::agg_sign_response() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.agg_sign_response)
  return agg_sign_response_.GetNoArena();
}
inline void BftMessage::set_agg_sign_response(const ::std::string& value) {
  set_has_agg_sign_response();
  agg_sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.agg_sign_response)
}
#if LANG_CXX11
inline void BftMessage::set_agg_sign_response(::std::string&& value) {
  set_has_agg_sign_response();
  agg_sign_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.agg_sign_response)
}
#endif
inline void BftMessage::set_agg_sign_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_agg_sign_response();
  agg_sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.agg_sign_response)
}
inline void BftMessage::set_agg_sign_response(const void* value, size_t size) {
  set_has_agg_sign_response();
  agg_sign_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.agg_sign_response)
}
inline ::std::string* BftMessage::mutable_agg_sign_response() {
  set_has_agg_sign_response();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.agg_sign_response)
  return agg_sign_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_agg_sign_response() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.agg_sign_response)
  if (!has_agg_sign_response()) {
    return NULL;
  }
  clear_has_agg_sign_response();
  return agg_sign_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_agg_sign_response(::std::string* agg_sign_response) {
  if (agg_sign_response != NULL) {
    set_has_agg_sign_response();
  } else {
    clear_has_agg_sign_response();
  }
  agg_sign_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agg_sign_response);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.agg_sign_response)
}

// repeated uint64 bitmap = 15;
inline int BftMessage::bitmap_size() const {
  return bitmap_.size();
}
inline void BftMessage::clear_bitmap() {
  bitmap_.Clear();
}
inline ::google::protobuf::uint64 BftMessage::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.bitmap)
  return bitmap_.Get(index);
}
inline void BftMessage::set_bitmap(int index, ::google::protobuf::uint64 value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.bitmap)
}
inline void BftMessage::add_bitmap(::google::protobuf::uint64 value) {
  bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:lego.client.protobuf.BftMessage.bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BftMessage::bitmap() const {
  // @@protoc_insertion_point(field_list:lego.client.protobuf.BftMessage.bitmap)
  return bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BftMessage::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:lego.client.protobuf.BftMessage.bitmap)
  return &bitmap_;
}

// optional bool agree = 16;
inline bool BftMessage::has_agree() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BftMessage::set_has_agree() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BftMessage::clear_has_agree() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BftMessage::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool BftMessage::agree() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.agree)
  return agree_;
}
inline void BftMessage::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.agree)
}

// optional bytes bft_address = 17;
inline bool BftMessage::has_bft_address() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BftMessage::set_has_bft_address() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BftMessage::clear_has_bft_address() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BftMessage::clear_bft_address() {
  bft_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bft_address();
}
inline const ::std::string& BftMessage::bft_address() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.bft_address)
  return bft_address_.GetNoArena();
}
inline void BftMessage::set_bft_address(const ::std::string& value) {
  set_has_bft_address();
  bft_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.bft_address)
}
#if LANG_CXX11
inline void BftMessage::set_bft_address(::std::string&& value) {
  set_has_bft_address();
  bft_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.bft_address)
}
#endif
inline void BftMessage::set_bft_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bft_address();
  bft_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.bft_address)
}
inline void BftMessage::set_bft_address(const void* value, size_t size) {
  set_has_bft_address();
  bft_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.bft_address)
}
inline ::std::string* BftMessage::mutable_bft_address() {
  set_has_bft_address();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.bft_address)
  return bft_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_bft_address() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.bft_address)
  if (!has_bft_address()) {
    return NULL;
  }
  clear_has_bft_address();
  return bft_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_bft_address(::std::string* bft_address) {
  if (bft_address != NULL) {
    set_has_bft_address();
  } else {
    clear_has_bft_address();
  }
  bft_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bft_address);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.bft_address)
}

// optional uint32 pool_index = 18;
inline bool BftMessage::has_pool_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BftMessage::set_has_pool_index() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BftMessage::clear_has_pool_index() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BftMessage::clear_pool_index() {
  pool_index_ = 0u;
  clear_has_pool_index();
}
inline ::google::protobuf::uint32 BftMessage::pool_index() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.pool_index)
  return pool_index_;
}
inline void BftMessage::set_pool_index(::google::protobuf::uint32 value) {
  set_has_pool_index();
  pool_index_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.pool_index)
}

// optional bytes data = 19;
inline bool BftMessage::has_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BftMessage::set_has_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BftMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BftMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& BftMessage::data() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BftMessage.data)
  return data_.GetNoArena();
}
inline void BftMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.BftMessage.data)
}
#if LANG_CXX11
inline void BftMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.BftMessage.data)
}
#endif
inline void BftMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.BftMessage.data)
}
inline void BftMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.BftMessage.data)
}
inline ::std::string* BftMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BftMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BftMessage::release_data() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BftMessage.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BftMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BftMessage.data)
}

// -------------------------------------------------------------------

// GetVpnInfoRequest

// optional bytes pubkey = 1;
inline bool GetVpnInfoRequest::has_pubkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVpnInfoRequest::set_has_pubkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVpnInfoRequest::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVpnInfoRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& GetVpnInfoRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetVpnInfoRequest.pubkey)
  return pubkey_.GetNoArena();
}
inline void GetVpnInfoRequest::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetVpnInfoRequest.pubkey)
}
#if LANG_CXX11
inline void GetVpnInfoRequest::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetVpnInfoRequest.pubkey)
}
#endif
inline void GetVpnInfoRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetVpnInfoRequest.pubkey)
}
inline void GetVpnInfoRequest::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetVpnInfoRequest.pubkey)
}
inline ::std::string* GetVpnInfoRequest::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetVpnInfoRequest.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetVpnInfoRequest.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoRequest::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetVpnInfoRequest.pubkey)
}

// -------------------------------------------------------------------

// GetVpnInfoResponse

// optional bytes ip = 1;
inline bool GetVpnInfoResponse::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVpnInfoResponse::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVpnInfoResponse::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVpnInfoResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& GetVpnInfoResponse::ip() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetVpnInfoResponse.ip)
  return ip_.GetNoArena();
}
inline void GetVpnInfoResponse::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetVpnInfoResponse.ip)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetVpnInfoResponse.ip)
}
#endif
inline void GetVpnInfoResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetVpnInfoResponse.ip)
}
inline void GetVpnInfoResponse::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetVpnInfoResponse.ip)
}
inline ::std::string* GetVpnInfoResponse::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetVpnInfoResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_ip() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetVpnInfoResponse.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetVpnInfoResponse.ip)
}

// optional uint32 port = 2;
inline bool GetVpnInfoResponse::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetVpnInfoResponse::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetVpnInfoResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetVpnInfoResponse::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 GetVpnInfoResponse::port() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetVpnInfoResponse.port)
  return port_;
}
inline void GetVpnInfoResponse::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetVpnInfoResponse.port)
}

// optional bytes encrypt_type = 3;
inline bool GetVpnInfoResponse::has_encrypt_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetVpnInfoResponse::set_has_encrypt_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetVpnInfoResponse::clear_has_encrypt_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetVpnInfoResponse::clear_encrypt_type() {
  encrypt_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypt_type();
}
inline const ::std::string& GetVpnInfoResponse::encrypt_type() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
  return encrypt_type_.GetNoArena();
}
inline void GetVpnInfoResponse::set_encrypt_type(const ::std::string& value) {
  set_has_encrypt_type();
  encrypt_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_encrypt_type(::std::string&& value) {
  set_has_encrypt_type();
  encrypt_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
}
#endif
inline void GetVpnInfoResponse::set_encrypt_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypt_type();
  encrypt_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
}
inline void GetVpnInfoResponse::set_encrypt_type(const void* value, size_t size) {
  set_has_encrypt_type();
  encrypt_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
}
inline ::std::string* GetVpnInfoResponse::mutable_encrypt_type() {
  set_has_encrypt_type();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
  return encrypt_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_encrypt_type() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
  if (!has_encrypt_type()) {
    return NULL;
  }
  clear_has_encrypt_type();
  return encrypt_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_encrypt_type(::std::string* encrypt_type) {
  if (encrypt_type != NULL) {
    set_has_encrypt_type();
  } else {
    clear_has_encrypt_type();
  }
  encrypt_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypt_type);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetVpnInfoResponse.encrypt_type)
}

// optional bytes passwd = 4;
inline bool GetVpnInfoResponse::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetVpnInfoResponse::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetVpnInfoResponse::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetVpnInfoResponse::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passwd();
}
inline const ::std::string& GetVpnInfoResponse::passwd() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetVpnInfoResponse.passwd)
  return passwd_.GetNoArena();
}
inline void GetVpnInfoResponse::set_passwd(const ::std::string& value) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetVpnInfoResponse.passwd)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_passwd(::std::string&& value) {
  set_has_passwd();
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetVpnInfoResponse.passwd)
}
#endif
inline void GetVpnInfoResponse::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetVpnInfoResponse.passwd)
}
inline void GetVpnInfoResponse::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetVpnInfoResponse.passwd)
}
inline ::std::string* GetVpnInfoResponse::mutable_passwd() {
  set_has_passwd();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetVpnInfoResponse.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_passwd() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetVpnInfoResponse.passwd)
  if (!has_passwd()) {
    return NULL;
  }
  clear_has_passwd();
  return passwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    set_has_passwd();
  } else {
    clear_has_passwd();
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetVpnInfoResponse.passwd)
}

// optional bytes pubkey = 5;
inline bool GetVpnInfoResponse::has_pubkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetVpnInfoResponse::set_has_pubkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetVpnInfoResponse::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetVpnInfoResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& GetVpnInfoResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetVpnInfoResponse.pubkey)
  return pubkey_.GetNoArena();
}
inline void GetVpnInfoResponse::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetVpnInfoResponse.pubkey)
}
#if LANG_CXX11
inline void GetVpnInfoResponse::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetVpnInfoResponse.pubkey)
}
#endif
inline void GetVpnInfoResponse::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetVpnInfoResponse.pubkey)
}
inline void GetVpnInfoResponse::set_pubkey(const void* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetVpnInfoResponse.pubkey)
}
inline ::std::string* GetVpnInfoResponse::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetVpnInfoResponse.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVpnInfoResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetVpnInfoResponse.pubkey)
  if (!has_pubkey()) {
    return NULL;
  }
  clear_has_pubkey();
  return pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVpnInfoResponse::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetVpnInfoResponse.pubkey)
}

// -------------------------------------------------------------------

// ServiceMessage

// optional .lego.client.protobuf.GetVpnInfoRequest vpn_req = 1;
inline bool ServiceMessage::has_vpn_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMessage::set_has_vpn_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceMessage::clear_has_vpn_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceMessage::clear_vpn_req() {
  if (vpn_req_ != NULL) vpn_req_->Clear();
  clear_has_vpn_req();
}
inline const ::lego::client::protobuf::GetVpnInfoRequest& ServiceMessage::_internal_vpn_req() const {
  return *vpn_req_;
}
inline const ::lego::client::protobuf::GetVpnInfoRequest& ServiceMessage::vpn_req() const {
  const ::lego::client::protobuf::GetVpnInfoRequest* p = vpn_req_;
  // @@protoc_insertion_point(field_get:lego.client.protobuf.ServiceMessage.vpn_req)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::client::protobuf::GetVpnInfoRequest*>(
      &::lego::client::protobuf::_GetVpnInfoRequest_default_instance_);
}
inline ::lego::client::protobuf::GetVpnInfoRequest* ServiceMessage::release_vpn_req() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.ServiceMessage.vpn_req)
  clear_has_vpn_req();
  ::lego::client::protobuf::GetVpnInfoRequest* temp = vpn_req_;
  vpn_req_ = NULL;
  return temp;
}
inline ::lego::client::protobuf::GetVpnInfoRequest* ServiceMessage::mutable_vpn_req() {
  set_has_vpn_req();
  if (vpn_req_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::client::protobuf::GetVpnInfoRequest>(GetArenaNoVirtual());
    vpn_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.ServiceMessage.vpn_req)
  return vpn_req_;
}
inline void ServiceMessage::set_allocated_vpn_req(::lego::client::protobuf::GetVpnInfoRequest* vpn_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vpn_req_;
  }
  if (vpn_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vpn_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpn_req, submessage_arena);
    }
    set_has_vpn_req();
  } else {
    clear_has_vpn_req();
  }
  vpn_req_ = vpn_req;
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.ServiceMessage.vpn_req)
}

// optional .lego.client.protobuf.GetVpnInfoResponse vpn_res = 2;
inline bool ServiceMessage::has_vpn_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMessage::set_has_vpn_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceMessage::clear_has_vpn_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceMessage::clear_vpn_res() {
  if (vpn_res_ != NULL) vpn_res_->Clear();
  clear_has_vpn_res();
}
inline const ::lego::client::protobuf::GetVpnInfoResponse& ServiceMessage::_internal_vpn_res() const {
  return *vpn_res_;
}
inline const ::lego::client::protobuf::GetVpnInfoResponse& ServiceMessage::vpn_res() const {
  const ::lego::client::protobuf::GetVpnInfoResponse* p = vpn_res_;
  // @@protoc_insertion_point(field_get:lego.client.protobuf.ServiceMessage.vpn_res)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::client::protobuf::GetVpnInfoResponse*>(
      &::lego::client::protobuf::_GetVpnInfoResponse_default_instance_);
}
inline ::lego::client::protobuf::GetVpnInfoResponse* ServiceMessage::release_vpn_res() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.ServiceMessage.vpn_res)
  clear_has_vpn_res();
  ::lego::client::protobuf::GetVpnInfoResponse* temp = vpn_res_;
  vpn_res_ = NULL;
  return temp;
}
inline ::lego::client::protobuf::GetVpnInfoResponse* ServiceMessage::mutable_vpn_res() {
  set_has_vpn_res();
  if (vpn_res_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::client::protobuf::GetVpnInfoResponse>(GetArenaNoVirtual());
    vpn_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.ServiceMessage.vpn_res)
  return vpn_res_;
}
inline void ServiceMessage::set_allocated_vpn_res(::lego::client::protobuf::GetVpnInfoResponse* vpn_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vpn_res_;
  }
  if (vpn_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vpn_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpn_res, submessage_arena);
    }
    set_has_vpn_res();
  } else {
    clear_has_vpn_res();
  }
  vpn_res_ = vpn_res;
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.ServiceMessage.vpn_res)
}

// -------------------------------------------------------------------

// GetTxBlockRequest

// optional bytes tx_gid = 1;
inline bool GetTxBlockRequest::has_tx_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockRequest::set_has_tx_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockRequest::clear_has_tx_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockRequest::clear_tx_gid() {
  tx_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_gid();
}
inline const ::std::string& GetTxBlockRequest::tx_gid() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetTxBlockRequest.tx_gid)
  return tx_gid_.GetNoArena();
}
inline void GetTxBlockRequest::set_tx_gid(const ::std::string& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetTxBlockRequest.tx_gid)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_tx_gid(::std::string&& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetTxBlockRequest.tx_gid)
}
#endif
inline void GetTxBlockRequest::set_tx_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetTxBlockRequest.tx_gid)
}
inline void GetTxBlockRequest::set_tx_gid(const void* value, size_t size) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetTxBlockRequest.tx_gid)
}
inline ::std::string* GetTxBlockRequest::mutable_tx_gid() {
  set_has_tx_gid();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetTxBlockRequest.tx_gid)
  return tx_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_tx_gid() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetTxBlockRequest.tx_gid)
  if (!has_tx_gid()) {
    return NULL;
  }
  clear_has_tx_gid();
  return tx_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_tx_gid(::std::string* tx_gid) {
  if (tx_gid != NULL) {
    set_has_tx_gid();
  } else {
    clear_has_tx_gid();
  }
  tx_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_gid);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetTxBlockRequest.tx_gid)
}

// optional bytes block_hash = 2;
inline bool GetTxBlockRequest::has_block_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTxBlockRequest::set_has_block_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTxBlockRequest::clear_has_block_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTxBlockRequest::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_hash();
}
inline const ::std::string& GetTxBlockRequest::block_hash() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetTxBlockRequest.block_hash)
  return block_hash_.GetNoArena();
}
inline void GetTxBlockRequest::set_block_hash(const ::std::string& value) {
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetTxBlockRequest.block_hash)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_block_hash(::std::string&& value) {
  set_has_block_hash();
  block_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetTxBlockRequest.block_hash)
}
#endif
inline void GetTxBlockRequest::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetTxBlockRequest.block_hash)
}
inline void GetTxBlockRequest::set_block_hash(const void* value, size_t size) {
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetTxBlockRequest.block_hash)
}
inline ::std::string* GetTxBlockRequest::mutable_block_hash() {
  set_has_block_hash();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetTxBlockRequest.block_hash)
  return block_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_block_hash() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetTxBlockRequest.block_hash)
  if (!has_block_hash()) {
    return NULL;
  }
  clear_has_block_hash();
  return block_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_block_hash(::std::string* block_hash) {
  if (block_hash != NULL) {
    set_has_block_hash();
  } else {
    clear_has_block_hash();
  }
  block_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetTxBlockRequest.block_hash)
}

// optional bool from = 3;
inline bool GetTxBlockRequest::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTxBlockRequest::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTxBlockRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTxBlockRequest::clear_from() {
  from_ = false;
  clear_has_from();
}
inline bool GetTxBlockRequest::from() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetTxBlockRequest.from)
  return from_;
}
inline void GetTxBlockRequest::set_from(bool value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetTxBlockRequest.from)
}

// -------------------------------------------------------------------

// GetTxBlockResponse

// optional bytes block = 1;
inline bool GetTxBlockResponse::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockResponse::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockResponse::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GetTxBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.GetTxBlockResponse.block)
  return block_.GetNoArena();
}
inline void GetTxBlockResponse::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.GetTxBlockResponse.block)
}
#if LANG_CXX11
inline void GetTxBlockResponse::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.GetTxBlockResponse.block)
}
#endif
inline void GetTxBlockResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.GetTxBlockResponse.block)
}
inline void GetTxBlockResponse::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.GetTxBlockResponse.block)
}
inline ::std::string* GetTxBlockResponse::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.GetTxBlockResponse.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.GetTxBlockResponse.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockResponse::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.GetTxBlockResponse.block)
}

// -------------------------------------------------------------------

// BlockMessage

// optional .lego.client.protobuf.GetTxBlockRequest block_req = 1;
inline bool BlockMessage::has_block_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMessage::set_has_block_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMessage::clear_has_block_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMessage::clear_block_req() {
  if (block_req_ != NULL) block_req_->Clear();
  clear_has_block_req();
}
inline const ::lego::client::protobuf::GetTxBlockRequest& BlockMessage::_internal_block_req() const {
  return *block_req_;
}
inline const ::lego::client::protobuf::GetTxBlockRequest& BlockMessage::block_req() const {
  const ::lego::client::protobuf::GetTxBlockRequest* p = block_req_;
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BlockMessage.block_req)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::client::protobuf::GetTxBlockRequest*>(
      &::lego::client::protobuf::_GetTxBlockRequest_default_instance_);
}
inline ::lego::client::protobuf::GetTxBlockRequest* BlockMessage::release_block_req() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BlockMessage.block_req)
  clear_has_block_req();
  ::lego::client::protobuf::GetTxBlockRequest* temp = block_req_;
  block_req_ = NULL;
  return temp;
}
inline ::lego::client::protobuf::GetTxBlockRequest* BlockMessage::mutable_block_req() {
  set_has_block_req();
  if (block_req_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::client::protobuf::GetTxBlockRequest>(GetArenaNoVirtual());
    block_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BlockMessage.block_req)
  return block_req_;
}
inline void BlockMessage::set_allocated_block_req(::lego::client::protobuf::GetTxBlockRequest* block_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_req_;
  }
  if (block_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_req, submessage_arena);
    }
    set_has_block_req();
  } else {
    clear_has_block_req();
  }
  block_req_ = block_req;
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BlockMessage.block_req)
}

// optional .lego.client.protobuf.GetTxBlockResponse block_res = 2;
inline bool BlockMessage::has_block_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMessage::set_has_block_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMessage::clear_has_block_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMessage::clear_block_res() {
  if (block_res_ != NULL) block_res_->Clear();
  clear_has_block_res();
}
inline const ::lego::client::protobuf::GetTxBlockResponse& BlockMessage::_internal_block_res() const {
  return *block_res_;
}
inline const ::lego::client::protobuf::GetTxBlockResponse& BlockMessage::block_res() const {
  const ::lego::client::protobuf::GetTxBlockResponse* p = block_res_;
  // @@protoc_insertion_point(field_get:lego.client.protobuf.BlockMessage.block_res)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::client::protobuf::GetTxBlockResponse*>(
      &::lego::client::protobuf::_GetTxBlockResponse_default_instance_);
}
inline ::lego::client::protobuf::GetTxBlockResponse* BlockMessage::release_block_res() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.BlockMessage.block_res)
  clear_has_block_res();
  ::lego::client::protobuf::GetTxBlockResponse* temp = block_res_;
  block_res_ = NULL;
  return temp;
}
inline ::lego::client::protobuf::GetTxBlockResponse* BlockMessage::mutable_block_res() {
  set_has_block_res();
  if (block_res_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::client::protobuf::GetTxBlockResponse>(GetArenaNoVirtual());
    block_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.BlockMessage.block_res)
  return block_res_;
}
inline void BlockMessage::set_allocated_block_res(::lego::client::protobuf::GetTxBlockResponse* block_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_res_;
  }
  if (block_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_res, submessage_arena);
    }
    set_has_block_res();
  } else {
    clear_has_block_res();
  }
  block_res_ = block_res;
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.BlockMessage.block_res)
}

// -------------------------------------------------------------------

// TxInfo

// optional uint32 version = 1;
inline bool TxInfo::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxInfo::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxInfo::version() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.version)
  return version_;
}
inline void TxInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.version)
}

// optional bytes gid = 2;
inline bool TxInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxInfo::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& TxInfo::gid() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.gid)
  return gid_.GetNoArena();
}
inline void TxInfo::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.gid)
}
#if LANG_CXX11
inline void TxInfo::set_gid(::std::string&& value) {
  set_has_gid();
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxInfo.gid)
}
#endif
inline void TxInfo::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxInfo.gid)
}
inline void TxInfo::set_gid(const void* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxInfo.gid)
}
inline ::std::string* TxInfo::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxInfo.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_gid() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxInfo.gid)
  if (!has_gid()) {
    return NULL;
  }
  clear_has_gid();
  return gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxInfo.gid)
}

// optional bytes from = 3;
inline bool TxInfo::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxInfo::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxInfo::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxInfo::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& TxInfo::from() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.from)
  return from_.GetNoArena();
}
inline void TxInfo::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.from)
}
#if LANG_CXX11
inline void TxInfo::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxInfo.from)
}
#endif
inline void TxInfo::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxInfo.from)
}
inline void TxInfo::set_from(const void* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxInfo.from)
}
inline ::std::string* TxInfo::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxInfo.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxInfo.from)
  if (!has_from()) {
    return NULL;
  }
  clear_has_from();
  return from_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxInfo.from)
}

// optional bytes from_pubkey = 4;
inline bool TxInfo::has_from_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxInfo::set_has_from_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxInfo::clear_has_from_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxInfo::clear_from_pubkey() {
  from_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_pubkey();
}
inline const ::std::string& TxInfo::from_pubkey() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.from_pubkey)
  return from_pubkey_.GetNoArena();
}
inline void TxInfo::set_from_pubkey(const ::std::string& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.from_pubkey)
}
#if LANG_CXX11
inline void TxInfo::set_from_pubkey(::std::string&& value) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxInfo.from_pubkey)
}
#endif
inline void TxInfo::set_from_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxInfo.from_pubkey)
}
inline void TxInfo::set_from_pubkey(const void* value, size_t size) {
  set_has_from_pubkey();
  from_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxInfo.from_pubkey)
}
inline ::std::string* TxInfo::mutable_from_pubkey() {
  set_has_from_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxInfo.from_pubkey)
  return from_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from_pubkey() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxInfo.from_pubkey)
  if (!has_from_pubkey()) {
    return NULL;
  }
  clear_has_from_pubkey();
  return from_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from_pubkey(::std::string* from_pubkey) {
  if (from_pubkey != NULL) {
    set_has_from_pubkey();
  } else {
    clear_has_from_pubkey();
  }
  from_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxInfo.from_pubkey)
}

// optional bytes from_sign = 5;
inline bool TxInfo::has_from_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxInfo::set_has_from_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxInfo::clear_has_from_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxInfo::clear_from_sign() {
  from_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_sign();
}
inline const ::std::string& TxInfo::from_sign() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.from_sign)
  return from_sign_.GetNoArena();
}
inline void TxInfo::set_from_sign(const ::std::string& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.from_sign)
}
#if LANG_CXX11
inline void TxInfo::set_from_sign(::std::string&& value) {
  set_has_from_sign();
  from_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxInfo.from_sign)
}
#endif
inline void TxInfo::set_from_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxInfo.from_sign)
}
inline void TxInfo::set_from_sign(const void* value, size_t size) {
  set_has_from_sign();
  from_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxInfo.from_sign)
}
inline ::std::string* TxInfo::mutable_from_sign() {
  set_has_from_sign();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxInfo.from_sign)
  return from_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_from_sign() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxInfo.from_sign)
  if (!has_from_sign()) {
    return NULL;
  }
  clear_has_from_sign();
  return from_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_from_sign(::std::string* from_sign) {
  if (from_sign != NULL) {
    set_has_from_sign();
  } else {
    clear_has_from_sign();
  }
  from_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_sign);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxInfo.from_sign)
}

// optional bytes to = 6;
inline bool TxInfo::has_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxInfo::set_has_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxInfo::clear_has_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxInfo::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TxInfo::to() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.to)
  return to_.GetNoArena();
}
inline void TxInfo::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.to)
}
#if LANG_CXX11
inline void TxInfo::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxInfo.to)
}
#endif
inline void TxInfo::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxInfo.to)
}
inline void TxInfo::set_to(const void* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxInfo.to)
}
inline ::std::string* TxInfo::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxInfo.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxInfo::release_to() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxInfo.to)
  if (!has_to()) {
    return NULL;
  }
  clear_has_to();
  return to_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxInfo.to)
}

// optional uint64 amount = 7;
inline bool TxInfo::has_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxInfo::set_has_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxInfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxInfo::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TxInfo::amount() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.amount)
  return amount_;
}
inline void TxInfo::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.amount)
}

// optional uint64 gas_limit = 8;
inline bool TxInfo::has_gas_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxInfo::set_has_gas_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxInfo::clear_has_gas_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxInfo::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_limit();
}
inline ::google::protobuf::uint64 TxInfo::gas_limit() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.gas_limit)
  return gas_limit_;
}
inline void TxInfo::set_gas_limit(::google::protobuf::uint64 value) {
  set_has_gas_limit();
  gas_limit_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.gas_limit)
}

// optional uint64 gas_used = 9;
inline bool TxInfo::has_gas_used() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxInfo::set_has_gas_used() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxInfo::clear_has_gas_used() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxInfo::clear_gas_used() {
  gas_used_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_used();
}
inline ::google::protobuf::uint64 TxInfo::gas_used() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.gas_used)
  return gas_used_;
}
inline void TxInfo::set_gas_used(::google::protobuf::uint64 value) {
  set_has_gas_used();
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.gas_used)
}

// optional uint64 gas_price = 10;
inline bool TxInfo::has_gas_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TxInfo::set_has_gas_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TxInfo::clear_has_gas_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TxInfo::clear_gas_price() {
  gas_price_ = GOOGLE_ULONGLONG(0);
  clear_has_gas_price();
}
inline ::google::protobuf::uint64 TxInfo::gas_price() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.gas_price)
  return gas_price_;
}
inline void TxInfo::set_gas_price(::google::protobuf::uint64 value) {
  set_has_gas_price();
  gas_price_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.gas_price)
}

// optional uint64 balance = 11;
inline bool TxInfo::has_balance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TxInfo::set_has_balance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TxInfo::clear_has_balance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TxInfo::clear_balance() {
  balance_ = GOOGLE_ULONGLONG(0);
  clear_has_balance();
}
inline ::google::protobuf::uint64 TxInfo::balance() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.balance)
  return balance_;
}
inline void TxInfo::set_balance(::google::protobuf::uint64 value) {
  set_has_balance();
  balance_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.balance)
}

// optional bool to_add = 12;
inline bool TxInfo::has_to_add() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxInfo::set_has_to_add() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxInfo::clear_has_to_add() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxInfo::clear_to_add() {
  to_add_ = false;
  clear_has_to_add();
}
inline bool TxInfo::to_add() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxInfo.to_add)
  return to_add_;
}
inline void TxInfo::set_to_add(bool value) {
  set_has_to_add();
  to_add_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxInfo.to_add)
}

// -------------------------------------------------------------------

// TxBlock

// optional bytes prehash = 1;
inline bool TxBlock::has_prehash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxBlock::set_has_prehash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxBlock::clear_has_prehash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxBlock::clear_prehash() {
  prehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prehash();
}
inline const ::std::string& TxBlock::prehash() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.prehash)
  return prehash_.GetNoArena();
}
inline void TxBlock::set_prehash(const ::std::string& value) {
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.prehash)
}
#if LANG_CXX11
inline void TxBlock::set_prehash(::std::string&& value) {
  set_has_prehash();
  prehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxBlock.prehash)
}
#endif
inline void TxBlock::set_prehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxBlock.prehash)
}
inline void TxBlock::set_prehash(const void* value, size_t size) {
  set_has_prehash();
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxBlock.prehash)
}
inline ::std::string* TxBlock::mutable_prehash() {
  set_has_prehash();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.prehash)
  return prehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_prehash() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBlock.prehash)
  if (!has_prehash()) {
    return NULL;
  }
  clear_has_prehash();
  return prehash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_prehash(::std::string* prehash) {
  if (prehash != NULL) {
    set_has_prehash();
  } else {
    clear_has_prehash();
  }
  prehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prehash);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBlock.prehash)
}

// optional uint32 version = 2;
inline bool TxBlock::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TxBlock::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TxBlock::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TxBlock::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TxBlock::version() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.version)
  return version_;
}
inline void TxBlock::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.version)
}

// optional uint32 elect_ver = 3;
inline bool TxBlock::has_elect_ver() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TxBlock::set_has_elect_ver() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TxBlock::clear_has_elect_ver() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TxBlock::clear_elect_ver() {
  elect_ver_ = 0u;
  clear_has_elect_ver();
}
inline ::google::protobuf::uint32 TxBlock::elect_ver() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.elect_ver)
  return elect_ver_;
}
inline void TxBlock::set_elect_ver(::google::protobuf::uint32 value) {
  set_has_elect_ver();
  elect_ver_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.elect_ver)
}

// optional bytes rc_hash = 4;
inline bool TxBlock::has_rc_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxBlock::set_has_rc_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxBlock::clear_has_rc_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxBlock::clear_rc_hash() {
  rc_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rc_hash();
}
inline const ::std::string& TxBlock::rc_hash() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.rc_hash)
  return rc_hash_.GetNoArena();
}
inline void TxBlock::set_rc_hash(const ::std::string& value) {
  set_has_rc_hash();
  rc_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.rc_hash)
}
#if LANG_CXX11
inline void TxBlock::set_rc_hash(::std::string&& value) {
  set_has_rc_hash();
  rc_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxBlock.rc_hash)
}
#endif
inline void TxBlock::set_rc_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rc_hash();
  rc_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxBlock.rc_hash)
}
inline void TxBlock::set_rc_hash(const void* value, size_t size) {
  set_has_rc_hash();
  rc_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxBlock.rc_hash)
}
inline ::std::string* TxBlock::mutable_rc_hash() {
  set_has_rc_hash();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.rc_hash)
  return rc_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_rc_hash() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBlock.rc_hash)
  if (!has_rc_hash()) {
    return NULL;
  }
  clear_has_rc_hash();
  return rc_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_rc_hash(::std::string* rc_hash) {
  if (rc_hash != NULL) {
    set_has_rc_hash();
  } else {
    clear_has_rc_hash();
  }
  rc_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rc_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBlock.rc_hash)
}

// repeated uint64 bitmap = 5;
inline int TxBlock::bitmap_size() const {
  return bitmap_.size();
}
inline void TxBlock::clear_bitmap() {
  bitmap_.Clear();
}
inline ::google::protobuf::uint64 TxBlock::bitmap(int index) const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.bitmap)
  return bitmap_.Get(index);
}
inline void TxBlock::set_bitmap(int index, ::google::protobuf::uint64 value) {
  bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.bitmap)
}
inline void TxBlock::add_bitmap(::google::protobuf::uint64 value) {
  bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:lego.client.protobuf.TxBlock.bitmap)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TxBlock::bitmap() const {
  // @@protoc_insertion_point(field_list:lego.client.protobuf.TxBlock.bitmap)
  return bitmap_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TxBlock::mutable_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:lego.client.protobuf.TxBlock.bitmap)
  return &bitmap_;
}

// optional bytes agg_pubkey = 6;
inline bool TxBlock::has_agg_pubkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxBlock::set_has_agg_pubkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxBlock::clear_has_agg_pubkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TxBlock::clear_agg_pubkey() {
  agg_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_agg_pubkey();
}
inline const ::std::string& TxBlock::agg_pubkey() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.agg_pubkey)
  return agg_pubkey_.GetNoArena();
}
inline void TxBlock::set_agg_pubkey(const ::std::string& value) {
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.agg_pubkey)
}
#if LANG_CXX11
inline void TxBlock::set_agg_pubkey(::std::string&& value) {
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxBlock.agg_pubkey)
}
#endif
inline void TxBlock::set_agg_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxBlock.agg_pubkey)
}
inline void TxBlock::set_agg_pubkey(const void* value, size_t size) {
  set_has_agg_pubkey();
  agg_pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxBlock.agg_pubkey)
}
inline ::std::string* TxBlock::mutable_agg_pubkey() {
  set_has_agg_pubkey();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.agg_pubkey)
  return agg_pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_agg_pubkey() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBlock.agg_pubkey)
  if (!has_agg_pubkey()) {
    return NULL;
  }
  clear_has_agg_pubkey();
  return agg_pubkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_agg_pubkey(::std::string* agg_pubkey) {
  if (agg_pubkey != NULL) {
    set_has_agg_pubkey();
  } else {
    clear_has_agg_pubkey();
  }
  agg_pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agg_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBlock.agg_pubkey)
}

// optional bytes agg_sign = 7;
inline bool TxBlock::has_agg_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxBlock::set_has_agg_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxBlock::clear_has_agg_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxBlock::clear_agg_sign() {
  agg_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_agg_sign();
}
inline const ::std::string& TxBlock::agg_sign() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.agg_sign)
  return agg_sign_.GetNoArena();
}
inline void TxBlock::set_agg_sign(const ::std::string& value) {
  set_has_agg_sign();
  agg_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.agg_sign)
}
#if LANG_CXX11
inline void TxBlock::set_agg_sign(::std::string&& value) {
  set_has_agg_sign();
  agg_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxBlock.agg_sign)
}
#endif
inline void TxBlock::set_agg_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_agg_sign();
  agg_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxBlock.agg_sign)
}
inline void TxBlock::set_agg_sign(const void* value, size_t size) {
  set_has_agg_sign();
  agg_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxBlock.agg_sign)
}
inline ::std::string* TxBlock::mutable_agg_sign() {
  set_has_agg_sign();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.agg_sign)
  return agg_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_agg_sign() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBlock.agg_sign)
  if (!has_agg_sign()) {
    return NULL;
  }
  clear_has_agg_sign();
  return agg_sign_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_agg_sign(::std::string* agg_sign) {
  if (agg_sign != NULL) {
    set_has_agg_sign();
  } else {
    clear_has_agg_sign();
  }
  agg_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agg_sign);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBlock.agg_sign)
}

// optional uint64 tx_id = 8;
inline bool TxBlock::has_tx_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TxBlock::set_has_tx_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TxBlock::clear_has_tx_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TxBlock::clear_tx_id() {
  tx_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tx_id();
}
inline ::google::protobuf::uint64 TxBlock::tx_id() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.tx_id)
  return tx_id_;
}
inline void TxBlock::set_tx_id(::google::protobuf::uint64 value) {
  set_has_tx_id();
  tx_id_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.tx_id)
}

// optional bytes tx_hash = 9;
inline bool TxBlock::has_tx_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxBlock::set_has_tx_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxBlock::clear_has_tx_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxBlock::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_hash();
}
inline const ::std::string& TxBlock::tx_hash() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.tx_hash)
  return tx_hash_.GetNoArena();
}
inline void TxBlock::set_tx_hash(const ::std::string& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.tx_hash)
}
#if LANG_CXX11
inline void TxBlock::set_tx_hash(::std::string&& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxBlock.tx_hash)
}
#endif
inline void TxBlock::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxBlock.tx_hash)
}
inline void TxBlock::set_tx_hash(const void* value, size_t size) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxBlock.tx_hash)
}
inline ::std::string* TxBlock::mutable_tx_hash() {
  set_has_tx_hash();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_tx_hash() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBlock.tx_hash)
  if (!has_tx_hash()) {
    return NULL;
  }
  clear_has_tx_hash();
  return tx_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    set_has_tx_hash();
  } else {
    clear_has_tx_hash();
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBlock.tx_hash)
}

// optional bytes tx_root_hash = 10;
inline bool TxBlock::has_tx_root_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxBlock::set_has_tx_root_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxBlock::clear_has_tx_root_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxBlock::clear_tx_root_hash() {
  tx_root_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_root_hash();
}
inline const ::std::string& TxBlock::tx_root_hash() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.tx_root_hash)
  return tx_root_hash_.GetNoArena();
}
inline void TxBlock::set_tx_root_hash(const ::std::string& value) {
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.tx_root_hash)
}
#if LANG_CXX11
inline void TxBlock::set_tx_root_hash(::std::string&& value) {
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.TxBlock.tx_root_hash)
}
#endif
inline void TxBlock::set_tx_root_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.TxBlock.tx_root_hash)
}
inline void TxBlock::set_tx_root_hash(const void* value, size_t size) {
  set_has_tx_root_hash();
  tx_root_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.TxBlock.tx_root_hash)
}
inline ::std::string* TxBlock::mutable_tx_root_hash() {
  set_has_tx_root_hash();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.tx_root_hash)
  return tx_root_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxBlock::release_tx_root_hash() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.TxBlock.tx_root_hash)
  if (!has_tx_root_hash()) {
    return NULL;
  }
  clear_has_tx_root_hash();
  return tx_root_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxBlock::set_allocated_tx_root_hash(::std::string* tx_root_hash) {
  if (tx_root_hash != NULL) {
    set_has_tx_root_hash();
  } else {
    clear_has_tx_root_hash();
  }
  tx_root_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_root_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.TxBlock.tx_root_hash)
}

// repeated .lego.client.protobuf.TxInfo tx_list = 11;
inline int TxBlock::tx_list_size() const {
  return tx_list_.size();
}
inline void TxBlock::clear_tx_list() {
  tx_list_.Clear();
}
inline ::lego::client::protobuf::TxInfo* TxBlock::mutable_tx_list(int index) {
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.TxBlock.tx_list)
  return tx_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::lego::client::protobuf::TxInfo >*
TxBlock::mutable_tx_list() {
  // @@protoc_insertion_point(field_mutable_list:lego.client.protobuf.TxBlock.tx_list)
  return &tx_list_;
}
inline const ::lego::client::protobuf::TxInfo& TxBlock::tx_list(int index) const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.tx_list)
  return tx_list_.Get(index);
}
inline ::lego::client::protobuf::TxInfo* TxBlock::add_tx_list() {
  // @@protoc_insertion_point(field_add:lego.client.protobuf.TxBlock.tx_list)
  return tx_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lego::client::protobuf::TxInfo >&
TxBlock::tx_list() const {
  // @@protoc_insertion_point(field_list:lego.client.protobuf.TxBlock.tx_list)
  return tx_list_;
}

// optional uint32 network_id = 12;
inline bool TxBlock::has_network_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TxBlock::set_has_network_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TxBlock::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TxBlock::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 TxBlock::network_id() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.TxBlock.network_id)
  return network_id_;
}
inline void TxBlock::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.TxBlock.network_id)
}

// -------------------------------------------------------------------

// Block

// optional bytes hash = 1;
inline bool Block::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& Block::hash() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.Block.hash)
  return hash_.GetNoArena();
}
inline void Block::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.client.protobuf.Block.hash)
}
#if LANG_CXX11
inline void Block::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.client.protobuf.Block.hash)
}
#endif
inline void Block::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.client.protobuf.Block.hash)
}
inline void Block::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.client.protobuf.Block.hash)
}
inline ::std::string* Block::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.Block.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_hash() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.Block.hash)
  if (!has_hash()) {
    return NULL;
  }
  clear_has_hash();
  return hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.Block.hash)
}

// optional uint64 height = 2;
inline bool Block::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Block::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Block::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Block::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 Block::height() const {
  // @@protoc_insertion_point(field_get:lego.client.protobuf.Block.height)
  return height_;
}
inline void Block::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:lego.client.protobuf.Block.height)
}

// optional .lego.client.protobuf.TxBlock tx_block = 3;
inline bool Block::has_tx_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_tx_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_tx_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_tx_block() {
  if (tx_block_ != NULL) tx_block_->Clear();
  clear_has_tx_block();
}
inline const ::lego::client::protobuf::TxBlock& Block::_internal_tx_block() const {
  return *tx_block_;
}
inline const ::lego::client::protobuf::TxBlock& Block::tx_block() const {
  const ::lego::client::protobuf::TxBlock* p = tx_block_;
  // @@protoc_insertion_point(field_get:lego.client.protobuf.Block.tx_block)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::client::protobuf::TxBlock*>(
      &::lego::client::protobuf::_TxBlock_default_instance_);
}
inline ::lego::client::protobuf::TxBlock* Block::release_tx_block() {
  // @@protoc_insertion_point(field_release:lego.client.protobuf.Block.tx_block)
  clear_has_tx_block();
  ::lego::client::protobuf::TxBlock* temp = tx_block_;
  tx_block_ = NULL;
  return temp;
}
inline ::lego::client::protobuf::TxBlock* Block::mutable_tx_block() {
  set_has_tx_block();
  if (tx_block_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::client::protobuf::TxBlock>(GetArenaNoVirtual());
    tx_block_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.client.protobuf.Block.tx_block)
  return tx_block_;
}
inline void Block::set_allocated_tx_block(::lego::client::protobuf::TxBlock* tx_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tx_block_;
  }
  if (tx_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_block, submessage_arena);
    }
    set_has_tx_block();
  } else {
    clear_has_tx_block();
  }
  tx_block_ = tx_block;
  // @@protoc_insertion_point(field_set_allocated:lego.client.protobuf.Block.tx_block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace client
}  // namespace lego

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_client_2eproto
