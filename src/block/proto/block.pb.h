// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef PROTOBUF_INCLUDED_block_2eproto
#define PROTOBUF_INCLUDED_block_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_block_2eproto 

namespace protobuf_block_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_block_2eproto
namespace lego {
namespace block {
namespace protobuf {
class BlockMessage;
class BlockMessageDefaultTypeInternal;
extern BlockMessageDefaultTypeInternal _BlockMessage_default_instance_;
class GetTxBlockRequest;
class GetTxBlockRequestDefaultTypeInternal;
extern GetTxBlockRequestDefaultTypeInternal _GetTxBlockRequest_default_instance_;
class GetTxBlockResponse;
class GetTxBlockResponseDefaultTypeInternal;
extern GetTxBlockResponseDefaultTypeInternal _GetTxBlockResponse_default_instance_;
}  // namespace protobuf
}  // namespace block
}  // namespace lego
namespace google {
namespace protobuf {
template<> ::lego::block::protobuf::BlockMessage* Arena::CreateMaybeMessage<::lego::block::protobuf::BlockMessage>(Arena*);
template<> ::lego::block::protobuf::GetTxBlockRequest* Arena::CreateMaybeMessage<::lego::block::protobuf::GetTxBlockRequest>(Arena*);
template<> ::lego::block::protobuf::GetTxBlockResponse* Arena::CreateMaybeMessage<::lego::block::protobuf::GetTxBlockResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lego {
namespace block {
namespace protobuf {

// ===================================================================

class GetTxBlockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.block.protobuf.GetTxBlockRequest) */ {
 public:
  GetTxBlockRequest();
  virtual ~GetTxBlockRequest();

  GetTxBlockRequest(const GetTxBlockRequest& from);

  inline GetTxBlockRequest& operator=(const GetTxBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxBlockRequest(GetTxBlockRequest&& from) noexcept
    : GetTxBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetTxBlockRequest& operator=(GetTxBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockRequest*>(
               &_GetTxBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetTxBlockRequest* other);
  friend void swap(GetTxBlockRequest& a, GetTxBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxBlockRequest* New() const final {
    return CreateMaybeMessage<GetTxBlockRequest>(NULL);
  }

  GetTxBlockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxBlockRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxBlockRequest& from);
  void MergeFrom(const GetTxBlockRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx_gid = 1;
  bool has_tx_gid() const;
  void clear_tx_gid();
  static const int kTxGidFieldNumber = 1;
  const ::std::string& tx_gid() const;
  void set_tx_gid(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_gid(::std::string&& value);
  #endif
  void set_tx_gid(const char* value);
  void set_tx_gid(const void* value, size_t size);
  ::std::string* mutable_tx_gid();
  ::std::string* release_tx_gid();
  void set_allocated_tx_gid(::std::string* tx_gid);

  // optional bytes block_hash = 2;
  bool has_block_hash() const;
  void clear_block_hash();
  static const int kBlockHashFieldNumber = 2;
  const ::std::string& block_hash() const;
  void set_block_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_block_hash(::std::string&& value);
  #endif
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  ::std::string* mutable_block_hash();
  ::std::string* release_block_hash();
  void set_allocated_block_hash(::std::string* block_hash);

  // optional bool from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  bool from() const;
  void set_from(bool value);

  // @@protoc_insertion_point(class_scope:lego.block.protobuf.GetTxBlockRequest)
 private:
  void set_has_tx_gid();
  void clear_has_tx_gid();
  void set_has_block_hash();
  void clear_has_block_hash();
  void set_has_from();
  void clear_has_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tx_gid_;
  ::google::protobuf::internal::ArenaStringPtr block_hash_;
  bool from_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTxBlockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.block.protobuf.GetTxBlockResponse) */ {
 public:
  GetTxBlockResponse();
  virtual ~GetTxBlockResponse();

  GetTxBlockResponse(const GetTxBlockResponse& from);

  inline GetTxBlockResponse& operator=(const GetTxBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxBlockResponse(GetTxBlockResponse&& from) noexcept
    : GetTxBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetTxBlockResponse& operator=(GetTxBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxBlockResponse*>(
               &_GetTxBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetTxBlockResponse* other);
  friend void swap(GetTxBlockResponse& a, GetTxBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxBlockResponse* New() const final {
    return CreateMaybeMessage<GetTxBlockResponse>(NULL);
  }

  GetTxBlockResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxBlockResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxBlockResponse& from);
  void MergeFrom(const GetTxBlockResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxBlockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:lego.block.protobuf.GetTxBlockResponse)
 private:
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lego.block.protobuf.BlockMessage) */ {
 public:
  BlockMessage();
  virtual ~BlockMessage();

  BlockMessage(const BlockMessage& from);

  inline BlockMessage& operator=(const BlockMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockMessage(BlockMessage&& from) noexcept
    : BlockMessage() {
    *this = ::std::move(from);
  }

  inline BlockMessage& operator=(BlockMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockMessage* internal_default_instance() {
    return reinterpret_cast<const BlockMessage*>(
               &_BlockMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BlockMessage* other);
  friend void swap(BlockMessage& a, BlockMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockMessage* New() const final {
    return CreateMaybeMessage<BlockMessage>(NULL);
  }

  BlockMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockMessage& from);
  void MergeFrom(const BlockMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lego.block.protobuf.GetTxBlockRequest block_req = 1;
  bool has_block_req() const;
  void clear_block_req();
  static const int kBlockReqFieldNumber = 1;
  private:
  const ::lego::block::protobuf::GetTxBlockRequest& _internal_block_req() const;
  public:
  const ::lego::block::protobuf::GetTxBlockRequest& block_req() const;
  ::lego::block::protobuf::GetTxBlockRequest* release_block_req();
  ::lego::block::protobuf::GetTxBlockRequest* mutable_block_req();
  void set_allocated_block_req(::lego::block::protobuf::GetTxBlockRequest* block_req);

  // optional .lego.block.protobuf.GetTxBlockResponse block_res = 2;
  bool has_block_res() const;
  void clear_block_res();
  static const int kBlockResFieldNumber = 2;
  private:
  const ::lego::block::protobuf::GetTxBlockResponse& _internal_block_res() const;
  public:
  const ::lego::block::protobuf::GetTxBlockResponse& block_res() const;
  ::lego::block::protobuf::GetTxBlockResponse* release_block_res();
  ::lego::block::protobuf::GetTxBlockResponse* mutable_block_res();
  void set_allocated_block_res(::lego::block::protobuf::GetTxBlockResponse* block_res);

  // @@protoc_insertion_point(class_scope:lego.block.protobuf.BlockMessage)
 private:
  void set_has_block_req();
  void clear_has_block_req();
  void set_has_block_res();
  void clear_has_block_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::lego::block::protobuf::GetTxBlockRequest* block_req_;
  ::lego::block::protobuf::GetTxBlockResponse* block_res_;
  friend struct ::protobuf_block_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTxBlockRequest

// optional bytes tx_gid = 1;
inline bool GetTxBlockRequest::has_tx_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockRequest::set_has_tx_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockRequest::clear_has_tx_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockRequest::clear_tx_gid() {
  tx_gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_gid();
}
inline const ::std::string& GetTxBlockRequest::tx_gid() const {
  // @@protoc_insertion_point(field_get:lego.block.protobuf.GetTxBlockRequest.tx_gid)
  return tx_gid_.GetNoArena();
}
inline void GetTxBlockRequest::set_tx_gid(const ::std::string& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.block.protobuf.GetTxBlockRequest.tx_gid)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_tx_gid(::std::string&& value) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.block.protobuf.GetTxBlockRequest.tx_gid)
}
#endif
inline void GetTxBlockRequest::set_tx_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.block.protobuf.GetTxBlockRequest.tx_gid)
}
inline void GetTxBlockRequest::set_tx_gid(const void* value, size_t size) {
  set_has_tx_gid();
  tx_gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.block.protobuf.GetTxBlockRequest.tx_gid)
}
inline ::std::string* GetTxBlockRequest::mutable_tx_gid() {
  set_has_tx_gid();
  // @@protoc_insertion_point(field_mutable:lego.block.protobuf.GetTxBlockRequest.tx_gid)
  return tx_gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_tx_gid() {
  // @@protoc_insertion_point(field_release:lego.block.protobuf.GetTxBlockRequest.tx_gid)
  if (!has_tx_gid()) {
    return NULL;
  }
  clear_has_tx_gid();
  return tx_gid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_tx_gid(::std::string* tx_gid) {
  if (tx_gid != NULL) {
    set_has_tx_gid();
  } else {
    clear_has_tx_gid();
  }
  tx_gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_gid);
  // @@protoc_insertion_point(field_set_allocated:lego.block.protobuf.GetTxBlockRequest.tx_gid)
}

// optional bytes block_hash = 2;
inline bool GetTxBlockRequest::has_block_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTxBlockRequest::set_has_block_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTxBlockRequest::clear_has_block_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTxBlockRequest::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block_hash();
}
inline const ::std::string& GetTxBlockRequest::block_hash() const {
  // @@protoc_insertion_point(field_get:lego.block.protobuf.GetTxBlockRequest.block_hash)
  return block_hash_.GetNoArena();
}
inline void GetTxBlockRequest::set_block_hash(const ::std::string& value) {
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.block.protobuf.GetTxBlockRequest.block_hash)
}
#if LANG_CXX11
inline void GetTxBlockRequest::set_block_hash(::std::string&& value) {
  set_has_block_hash();
  block_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.block.protobuf.GetTxBlockRequest.block_hash)
}
#endif
inline void GetTxBlockRequest::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.block.protobuf.GetTxBlockRequest.block_hash)
}
inline void GetTxBlockRequest::set_block_hash(const void* value, size_t size) {
  set_has_block_hash();
  block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.block.protobuf.GetTxBlockRequest.block_hash)
}
inline ::std::string* GetTxBlockRequest::mutable_block_hash() {
  set_has_block_hash();
  // @@protoc_insertion_point(field_mutable:lego.block.protobuf.GetTxBlockRequest.block_hash)
  return block_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockRequest::release_block_hash() {
  // @@protoc_insertion_point(field_release:lego.block.protobuf.GetTxBlockRequest.block_hash)
  if (!has_block_hash()) {
    return NULL;
  }
  clear_has_block_hash();
  return block_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockRequest::set_allocated_block_hash(::std::string* block_hash) {
  if (block_hash != NULL) {
    set_has_block_hash();
  } else {
    clear_has_block_hash();
  }
  block_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:lego.block.protobuf.GetTxBlockRequest.block_hash)
}

// optional bool from = 3;
inline bool GetTxBlockRequest::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTxBlockRequest::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTxBlockRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTxBlockRequest::clear_from() {
  from_ = false;
  clear_has_from();
}
inline bool GetTxBlockRequest::from() const {
  // @@protoc_insertion_point(field_get:lego.block.protobuf.GetTxBlockRequest.from)
  return from_;
}
inline void GetTxBlockRequest::set_from(bool value) {
  set_has_from();
  from_ = value;
  // @@protoc_insertion_point(field_set:lego.block.protobuf.GetTxBlockRequest.from)
}

// -------------------------------------------------------------------

// GetTxBlockResponse

// optional bytes block = 1;
inline bool GetTxBlockResponse::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTxBlockResponse::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTxBlockResponse::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTxBlockResponse::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GetTxBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:lego.block.protobuf.GetTxBlockResponse.block)
  return block_.GetNoArena();
}
inline void GetTxBlockResponse::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lego.block.protobuf.GetTxBlockResponse.block)
}
#if LANG_CXX11
inline void GetTxBlockResponse::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lego.block.protobuf.GetTxBlockResponse.block)
}
#endif
inline void GetTxBlockResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lego.block.protobuf.GetTxBlockResponse.block)
}
inline void GetTxBlockResponse::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lego.block.protobuf.GetTxBlockResponse.block)
}
inline ::std::string* GetTxBlockResponse::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:lego.block.protobuf.GetTxBlockResponse.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTxBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:lego.block.protobuf.GetTxBlockResponse.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxBlockResponse::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:lego.block.protobuf.GetTxBlockResponse.block)
}

// -------------------------------------------------------------------

// BlockMessage

// optional .lego.block.protobuf.GetTxBlockRequest block_req = 1;
inline bool BlockMessage::has_block_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMessage::set_has_block_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMessage::clear_has_block_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMessage::clear_block_req() {
  if (block_req_ != NULL) block_req_->Clear();
  clear_has_block_req();
}
inline const ::lego::block::protobuf::GetTxBlockRequest& BlockMessage::_internal_block_req() const {
  return *block_req_;
}
inline const ::lego::block::protobuf::GetTxBlockRequest& BlockMessage::block_req() const {
  const ::lego::block::protobuf::GetTxBlockRequest* p = block_req_;
  // @@protoc_insertion_point(field_get:lego.block.protobuf.BlockMessage.block_req)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::block::protobuf::GetTxBlockRequest*>(
      &::lego::block::protobuf::_GetTxBlockRequest_default_instance_);
}
inline ::lego::block::protobuf::GetTxBlockRequest* BlockMessage::release_block_req() {
  // @@protoc_insertion_point(field_release:lego.block.protobuf.BlockMessage.block_req)
  clear_has_block_req();
  ::lego::block::protobuf::GetTxBlockRequest* temp = block_req_;
  block_req_ = NULL;
  return temp;
}
inline ::lego::block::protobuf::GetTxBlockRequest* BlockMessage::mutable_block_req() {
  set_has_block_req();
  if (block_req_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::block::protobuf::GetTxBlockRequest>(GetArenaNoVirtual());
    block_req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.block.protobuf.BlockMessage.block_req)
  return block_req_;
}
inline void BlockMessage::set_allocated_block_req(::lego::block::protobuf::GetTxBlockRequest* block_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_req_;
  }
  if (block_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_req, submessage_arena);
    }
    set_has_block_req();
  } else {
    clear_has_block_req();
  }
  block_req_ = block_req;
  // @@protoc_insertion_point(field_set_allocated:lego.block.protobuf.BlockMessage.block_req)
}

// optional .lego.block.protobuf.GetTxBlockResponse block_res = 2;
inline bool BlockMessage::has_block_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMessage::set_has_block_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMessage::clear_has_block_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMessage::clear_block_res() {
  if (block_res_ != NULL) block_res_->Clear();
  clear_has_block_res();
}
inline const ::lego::block::protobuf::GetTxBlockResponse& BlockMessage::_internal_block_res() const {
  return *block_res_;
}
inline const ::lego::block::protobuf::GetTxBlockResponse& BlockMessage::block_res() const {
  const ::lego::block::protobuf::GetTxBlockResponse* p = block_res_;
  // @@protoc_insertion_point(field_get:lego.block.protobuf.BlockMessage.block_res)
  return p != NULL ? *p : *reinterpret_cast<const ::lego::block::protobuf::GetTxBlockResponse*>(
      &::lego::block::protobuf::_GetTxBlockResponse_default_instance_);
}
inline ::lego::block::protobuf::GetTxBlockResponse* BlockMessage::release_block_res() {
  // @@protoc_insertion_point(field_release:lego.block.protobuf.BlockMessage.block_res)
  clear_has_block_res();
  ::lego::block::protobuf::GetTxBlockResponse* temp = block_res_;
  block_res_ = NULL;
  return temp;
}
inline ::lego::block::protobuf::GetTxBlockResponse* BlockMessage::mutable_block_res() {
  set_has_block_res();
  if (block_res_ == NULL) {
    auto* p = CreateMaybeMessage<::lego::block::protobuf::GetTxBlockResponse>(GetArenaNoVirtual());
    block_res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lego.block.protobuf.BlockMessage.block_res)
  return block_res_;
}
inline void BlockMessage::set_allocated_block_res(::lego::block::protobuf::GetTxBlockResponse* block_res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_res_;
  }
  if (block_res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_res, submessage_arena);
    }
    set_has_block_res();
  } else {
    clear_has_block_res();
  }
  block_res_ = block_res;
  // @@protoc_insertion_point(field_set_allocated:lego.block.protobuf.BlockMessage.block_res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace block
}  // namespace lego

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_block_2eproto
