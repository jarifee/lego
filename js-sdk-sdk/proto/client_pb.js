/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lego.client.protobuf.BftMessage', null, global);
goog.exportSymbol('proto.lego.client.protobuf.Block', null, global);
goog.exportSymbol('proto.lego.client.protobuf.BlockMessage', null, global);
goog.exportSymbol('proto.lego.client.protobuf.GetTxBlockRequest', null, global);
goog.exportSymbol('proto.lego.client.protobuf.GetTxBlockResponse', null, global);
goog.exportSymbol('proto.lego.client.protobuf.GetVpnInfoRequest', null, global);
goog.exportSymbol('proto.lego.client.protobuf.GetVpnInfoResponse', null, global);
goog.exportSymbol('proto.lego.client.protobuf.NewTx', null, global);
goog.exportSymbol('proto.lego.client.protobuf.ServiceMessage', null, global);
goog.exportSymbol('proto.lego.client.protobuf.TxBft', null, global);
goog.exportSymbol('proto.lego.client.protobuf.TxBlock', null, global);
goog.exportSymbol('proto.lego.client.protobuf.TxInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.NewTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.NewTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.NewTx.displayName = 'proto.lego.client.protobuf.NewTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.NewTx.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.NewTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.NewTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.NewTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    gid: msg.getGid_asB64(),
    fromAccAddr: msg.getFromAccAddr_asB64(),
    fromPubkey: msg.getFromPubkey_asB64(),
    fromSign: msg.getFromSign_asB64(),
    toAccAddr: msg.getToAccAddr_asB64(),
    legoCount: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.NewTx}
 */
proto.lego.client.protobuf.NewTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.NewTx;
  return proto.lego.client.protobuf.NewTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.NewTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.NewTx}
 */
proto.lego.client.protobuf.NewTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromAccAddr(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromPubkey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromSign(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToAccAddr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLegoCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.NewTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.NewTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.NewTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.NewTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional bytes gid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.NewTx.prototype.getGid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes gid = 1;
 * This is a type-conversion wrapper around `getGid()`
 * @return {string}
 */
proto.lego.client.protobuf.NewTx.prototype.getGid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGid()));
};


/**
 * optional bytes gid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGid()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.NewTx.prototype.getGid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGid()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.NewTx.prototype.setGid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.NewTx.prototype.clearGid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.NewTx.prototype.hasGid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes from_acc_addr = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromAccAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes from_acc_addr = 2;
 * This is a type-conversion wrapper around `getFromAccAddr()`
 * @return {string}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromAccAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromAccAddr()));
};


/**
 * optional bytes from_acc_addr = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromAccAddr()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromAccAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromAccAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.NewTx.prototype.setFromAccAddr = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.NewTx.prototype.clearFromAccAddr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.NewTx.prototype.hasFromAccAddr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes from_pubkey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from_pubkey = 3;
 * This is a type-conversion wrapper around `getFromPubkey()`
 * @return {string}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromPubkey()));
};


/**
 * optional bytes from_pubkey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromPubkey()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.NewTx.prototype.setFromPubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lego.client.protobuf.NewTx.prototype.clearFromPubkey = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.NewTx.prototype.hasFromPubkey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes from_sign = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes from_sign = 4;
 * This is a type-conversion wrapper around `getFromSign()`
 * @return {string}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromSign()));
};


/**
 * optional bytes from_sign = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromSign()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.NewTx.prototype.getFromSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.NewTx.prototype.setFromSign = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lego.client.protobuf.NewTx.prototype.clearFromSign = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.NewTx.prototype.hasFromSign = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes to_acc_addr = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.NewTx.prototype.getToAccAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes to_acc_addr = 5;
 * This is a type-conversion wrapper around `getToAccAddr()`
 * @return {string}
 */
proto.lego.client.protobuf.NewTx.prototype.getToAccAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToAccAddr()));
};


/**
 * optional bytes to_acc_addr = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToAccAddr()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.NewTx.prototype.getToAccAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToAccAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.NewTx.prototype.setToAccAddr = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lego.client.protobuf.NewTx.prototype.clearToAccAddr = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.NewTx.prototype.hasToAccAddr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 lego_count = 6;
 * @return {number}
 */
proto.lego.client.protobuf.NewTx.prototype.getLegoCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.NewTx.prototype.setLegoCount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.lego.client.protobuf.NewTx.prototype.clearLegoCount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.NewTx.prototype.hasLegoCount = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.TxBft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.TxBft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.TxBft.displayName = 'proto.lego.client.protobuf.TxBft';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.TxBft.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.TxBft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.TxBft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.TxBft.toObject = function(includeInstance, msg) {
  var f, obj = {
    newTx: (f = msg.getNewTx()) && proto.lego.client.protobuf.NewTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.TxBft}
 */
proto.lego.client.protobuf.TxBft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.TxBft;
  return proto.lego.client.protobuf.TxBft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.TxBft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.TxBft}
 */
proto.lego.client.protobuf.TxBft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lego.client.protobuf.NewTx;
      reader.readMessage(value,proto.lego.client.protobuf.NewTx.deserializeBinaryFromReader);
      msg.setNewTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.TxBft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.TxBft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.TxBft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lego.client.protobuf.NewTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional NewTx new_tx = 1;
 * @return {?proto.lego.client.protobuf.NewTx}
 */
proto.lego.client.protobuf.TxBft.prototype.getNewTx = function() {
  return /** @type{?proto.lego.client.protobuf.NewTx} */ (
    jspb.Message.getWrapperField(this, proto.lego.client.protobuf.NewTx, 1));
};


/** @param {?proto.lego.client.protobuf.NewTx|undefined} value */
proto.lego.client.protobuf.TxBft.prototype.setNewTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lego.client.protobuf.TxBft.prototype.clearNewTx = function() {
  this.setNewTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBft.prototype.hasNewTx = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.BftMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lego.client.protobuf.BftMessage.repeatedFields_, null);
};
goog.inherits(proto.lego.client.protobuf.BftMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.BftMessage.displayName = 'proto.lego.client.protobuf.BftMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lego.client.protobuf.BftMessage.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.BftMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.BftMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.BftMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.BftMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    gid: msg.getGid_asB64(),
    rand: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3),
    leader: jspb.Message.getField(msg, 4),
    netId: jspb.Message.getField(msg, 5),
    nodeId: msg.getNodeId_asB64(),
    pubkey: msg.getPubkey_asB64(),
    signChallenge: msg.getSignChallenge_asB64(),
    signResponse: msg.getSignResponse_asB64(),
    secret: msg.getSecret_asB64(),
    challenge: msg.getChallenge_asB64(),
    response: msg.getResponse_asB64(),
    aggSignChallenge: msg.getAggSignChallenge_asB64(),
    aggSignResponse: msg.getAggSignResponse_asB64(),
    bitmapList: jspb.Message.getRepeatedField(msg, 15),
    agree: jspb.Message.getField(msg, 16),
    bftAddress: msg.getBftAddress_asB64(),
    poolIndex: jspb.Message.getField(msg, 18),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.BftMessage}
 */
proto.lego.client.protobuf.BftMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.BftMessage;
  return proto.lego.client.protobuf.BftMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.BftMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.BftMessage}
 */
proto.lego.client.protobuf.BftMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRand(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeader(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNetId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodeId(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignChallenge(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignResponse(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecret(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponse(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggSignChallenge(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggSignResponse(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addBitmap(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAgree(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBftAddress(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoolIndex(value);
      break;
    case 19:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.BftMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.BftMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.BftMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getBitmapList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBytes(
      19,
      f
    );
  }
};


/**
 * optional bytes gid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getGid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes gid = 1;
 * This is a type-conversion wrapper around `getGid()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getGid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGid()));
};


/**
 * optional bytes gid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGid()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getGid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGid()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setGid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearGid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasGid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 rand = 2;
 * @return {number}
 */
proto.lego.client.protobuf.BftMessage.prototype.getRand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.BftMessage.prototype.setRand = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearRand = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasRand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.lego.client.protobuf.BftMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.BftMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool leader = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.getLeader = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.lego.client.protobuf.BftMessage.prototype.setLeader = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearLeader = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasLeader = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 net_id = 5;
 * @return {number}
 */
proto.lego.client.protobuf.BftMessage.prototype.getNetId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.BftMessage.prototype.setNetId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearNetId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasNetId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes node_id = 6;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getNodeId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes node_id = 6;
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getNodeId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodeId()));
};


/**
 * optional bytes node_id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodeId()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getNodeId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodeId()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setNodeId = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearNodeId = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasNodeId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes pubkey = 7;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes pubkey = 7;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearPubkey = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes sign_challenge = 8;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSignChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes sign_challenge = 8;
 * This is a type-conversion wrapper around `getSignChallenge()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSignChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignChallenge()));
};


/**
 * optional bytes sign_challenge = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignChallenge()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSignChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignChallenge()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setSignChallenge = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearSignChallenge = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasSignChallenge = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes sign_response = 9;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSignResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes sign_response = 9;
 * This is a type-conversion wrapper around `getSignResponse()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSignResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignResponse()));
};


/**
 * optional bytes sign_response = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignResponse()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSignResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignResponse()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setSignResponse = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearSignResponse = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasSignResponse = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes secret = 10;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSecret = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes secret = 10;
 * This is a type-conversion wrapper around `getSecret()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSecret_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecret()));
};


/**
 * optional bytes secret = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecret()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getSecret_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecret()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setSecret = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearSecret = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasSecret = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bytes challenge = 11;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes challenge = 11;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setChallenge = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearChallenge = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasChallenge = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes response = 12;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes response = 12;
 * This is a type-conversion wrapper around `getResponse()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponse()));
};


/**
 * optional bytes response = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponse()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponse()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setResponse = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearResponse = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes agg_sign_challenge = 13;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAggSignChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes agg_sign_challenge = 13;
 * This is a type-conversion wrapper around `getAggSignChallenge()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAggSignChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggSignChallenge()));
};


/**
 * optional bytes agg_sign_challenge = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggSignChallenge()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAggSignChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggSignChallenge()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setAggSignChallenge = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearAggSignChallenge = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasAggSignChallenge = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bytes agg_sign_response = 14;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAggSignResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes agg_sign_response = 14;
 * This is a type-conversion wrapper around `getAggSignResponse()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAggSignResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggSignResponse()));
};


/**
 * optional bytes agg_sign_response = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggSignResponse()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAggSignResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggSignResponse()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setAggSignResponse = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearAggSignResponse = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasAggSignResponse = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated uint64 bitmap = 15;
 * @return {!Array<number>}
 */
proto.lego.client.protobuf.BftMessage.prototype.getBitmapList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<number>} value */
proto.lego.client.protobuf.BftMessage.prototype.setBitmapList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.lego.client.protobuf.BftMessage.prototype.addBitmap = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.lego.client.protobuf.BftMessage.prototype.clearBitmapList = function() {
  this.setBitmapList([]);
};


/**
 * optional bool agree = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.getAgree = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.lego.client.protobuf.BftMessage.prototype.setAgree = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearAgree = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasAgree = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes bft_address = 17;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getBftAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes bft_address = 17;
 * This is a type-conversion wrapper around `getBftAddress()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getBftAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBftAddress()));
};


/**
 * optional bytes bft_address = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBftAddress()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getBftAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBftAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setBftAddress = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearBftAddress = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasBftAddress = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint32 pool_index = 18;
 * @return {number}
 */
proto.lego.client.protobuf.BftMessage.prototype.getPoolIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.BftMessage.prototype.setPoolIndex = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearPoolIndex = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasPoolIndex = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bytes data = 19;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.BftMessage.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * optional bytes data = 19;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lego.client.protobuf.BftMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 19;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BftMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.BftMessage.prototype.setData = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.lego.client.protobuf.BftMessage.prototype.clearData = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BftMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.GetVpnInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.GetVpnInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.GetVpnInfoRequest.displayName = 'proto.lego.client.protobuf.GetVpnInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.GetVpnInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.GetVpnInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetVpnInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.GetVpnInfoRequest}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.GetVpnInfoRequest;
  return proto.lego.client.protobuf.GetVpnInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.GetVpnInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.GetVpnInfoRequest}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.GetVpnInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.GetVpnInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetVpnInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.GetVpnInfoRequest.prototype.clearPubkey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetVpnInfoRequest.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.GetVpnInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.GetVpnInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.GetVpnInfoResponse.displayName = 'proto.lego.client.protobuf.GetVpnInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.GetVpnInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.GetVpnInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetVpnInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: msg.getIp_asB64(),
    port: jspb.Message.getField(msg, 2),
    encryptType: msg.getEncryptType_asB64(),
    passwd: msg.getPasswd_asB64(),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.GetVpnInfoResponse}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.GetVpnInfoResponse;
  return proto.lego.client.protobuf.GetVpnInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.GetVpnInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.GetVpnInfoResponse}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswd(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.GetVpnInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.GetVpnInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetVpnInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes ip = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ip = 1;
 * This is a type-conversion wrapper around `getIp()`
 * @return {string}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIp()));
};


/**
 * optional bytes ip = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIp()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIp()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.GetVpnInfoResponse.prototype.clearIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.hasIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.GetVpnInfoResponse.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes encrypt_type = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getEncryptType = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes encrypt_type = 3;
 * This is a type-conversion wrapper around `getEncryptType()`
 * @return {string}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getEncryptType_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptType()));
};


/**
 * optional bytes encrypt_type = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptType()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getEncryptType_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptType()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.setEncryptType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lego.client.protobuf.GetVpnInfoResponse.prototype.clearEncryptType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.hasEncryptType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes passwd = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPasswd = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes passwd = 4;
 * This is a type-conversion wrapper around `getPasswd()`
 * @return {string}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPasswd_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswd()));
};


/**
 * optional bytes passwd = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswd()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPasswd_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswd()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.setPasswd = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lego.client.protobuf.GetVpnInfoResponse.prototype.clearPasswd = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.hasPasswd = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes pubkey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes pubkey = 5;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lego.client.protobuf.GetVpnInfoResponse.prototype.clearPubkey = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetVpnInfoResponse.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.ServiceMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.ServiceMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.ServiceMessage.displayName = 'proto.lego.client.protobuf.ServiceMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.ServiceMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.ServiceMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.ServiceMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.ServiceMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vpnReq: (f = msg.getVpnReq()) && proto.lego.client.protobuf.GetVpnInfoRequest.toObject(includeInstance, f),
    vpnRes: (f = msg.getVpnRes()) && proto.lego.client.protobuf.GetVpnInfoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.ServiceMessage}
 */
proto.lego.client.protobuf.ServiceMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.ServiceMessage;
  return proto.lego.client.protobuf.ServiceMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.ServiceMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.ServiceMessage}
 */
proto.lego.client.protobuf.ServiceMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lego.client.protobuf.GetVpnInfoRequest;
      reader.readMessage(value,proto.lego.client.protobuf.GetVpnInfoRequest.deserializeBinaryFromReader);
      msg.setVpnReq(value);
      break;
    case 2:
      var value = new proto.lego.client.protobuf.GetVpnInfoResponse;
      reader.readMessage(value,proto.lego.client.protobuf.GetVpnInfoResponse.deserializeBinaryFromReader);
      msg.setVpnRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.ServiceMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.ServiceMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.ServiceMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.ServiceMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVpnReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lego.client.protobuf.GetVpnInfoRequest.serializeBinaryToWriter
    );
  }
  f = message.getVpnRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lego.client.protobuf.GetVpnInfoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetVpnInfoRequest vpn_req = 1;
 * @return {?proto.lego.client.protobuf.GetVpnInfoRequest}
 */
proto.lego.client.protobuf.ServiceMessage.prototype.getVpnReq = function() {
  return /** @type{?proto.lego.client.protobuf.GetVpnInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.lego.client.protobuf.GetVpnInfoRequest, 1));
};


/** @param {?proto.lego.client.protobuf.GetVpnInfoRequest|undefined} value */
proto.lego.client.protobuf.ServiceMessage.prototype.setVpnReq = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lego.client.protobuf.ServiceMessage.prototype.clearVpnReq = function() {
  this.setVpnReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.ServiceMessage.prototype.hasVpnReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetVpnInfoResponse vpn_res = 2;
 * @return {?proto.lego.client.protobuf.GetVpnInfoResponse}
 */
proto.lego.client.protobuf.ServiceMessage.prototype.getVpnRes = function() {
  return /** @type{?proto.lego.client.protobuf.GetVpnInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.lego.client.protobuf.GetVpnInfoResponse, 2));
};


/** @param {?proto.lego.client.protobuf.GetVpnInfoResponse|undefined} value */
proto.lego.client.protobuf.ServiceMessage.prototype.setVpnRes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lego.client.protobuf.ServiceMessage.prototype.clearVpnRes = function() {
  this.setVpnRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.ServiceMessage.prototype.hasVpnRes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.GetTxBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.GetTxBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.GetTxBlockRequest.displayName = 'proto.lego.client.protobuf.GetTxBlockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.GetTxBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.GetTxBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetTxBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txGid: msg.getTxGid_asB64(),
    blockHash: msg.getBlockHash_asB64(),
    from: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.GetTxBlockRequest}
 */
proto.lego.client.protobuf.GetTxBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.GetTxBlockRequest;
  return proto.lego.client.protobuf.GetTxBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.GetTxBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.GetTxBlockRequest}
 */
proto.lego.client.protobuf.GetTxBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxGid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.GetTxBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.GetTxBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetTxBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes tx_gid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getTxGid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx_gid = 1;
 * This is a type-conversion wrapper around `getTxGid()`
 * @return {string}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getTxGid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxGid()));
};


/**
 * optional bytes tx_gid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxGid()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getTxGid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxGid()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.setTxGid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.GetTxBlockRequest.prototype.clearTxGid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.hasTxGid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.GetTxBlockRequest.prototype.clearBlockHash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.hasBlockHash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool from = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.getFrom = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lego.client.protobuf.GetTxBlockRequest.prototype.clearFrom = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetTxBlockRequest.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.GetTxBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.GetTxBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.GetTxBlockResponse.displayName = 'proto.lego.client.protobuf.GetTxBlockResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.GetTxBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.GetTxBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetTxBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: msg.getBlock_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.GetTxBlockResponse}
 */
proto.lego.client.protobuf.GetTxBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.GetTxBlockResponse;
  return proto.lego.client.protobuf.GetTxBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.GetTxBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.GetTxBlockResponse}
 */
proto.lego.client.protobuf.GetTxBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.GetTxBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.GetTxBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.GetTxBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes block = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.getBlock = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes block = 1;
 * This is a type-conversion wrapper around `getBlock()`
 * @return {string}
 */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.getBlock_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlock()));
};


/**
 * optional bytes block = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlock()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.getBlock_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlock()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.setBlock = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.GetTxBlockResponse.prototype.clearBlock = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.GetTxBlockResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.BlockMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.BlockMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.BlockMessage.displayName = 'proto.lego.client.protobuf.BlockMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.BlockMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.BlockMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.BlockMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.BlockMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockReq: (f = msg.getBlockReq()) && proto.lego.client.protobuf.GetTxBlockRequest.toObject(includeInstance, f),
    blockRes: (f = msg.getBlockRes()) && proto.lego.client.protobuf.GetTxBlockResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.BlockMessage}
 */
proto.lego.client.protobuf.BlockMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.BlockMessage;
  return proto.lego.client.protobuf.BlockMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.BlockMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.BlockMessage}
 */
proto.lego.client.protobuf.BlockMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lego.client.protobuf.GetTxBlockRequest;
      reader.readMessage(value,proto.lego.client.protobuf.GetTxBlockRequest.deserializeBinaryFromReader);
      msg.setBlockReq(value);
      break;
    case 2:
      var value = new proto.lego.client.protobuf.GetTxBlockResponse;
      reader.readMessage(value,proto.lego.client.protobuf.GetTxBlockResponse.deserializeBinaryFromReader);
      msg.setBlockRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.BlockMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.BlockMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.BlockMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.BlockMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lego.client.protobuf.GetTxBlockRequest.serializeBinaryToWriter
    );
  }
  f = message.getBlockRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lego.client.protobuf.GetTxBlockResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetTxBlockRequest block_req = 1;
 * @return {?proto.lego.client.protobuf.GetTxBlockRequest}
 */
proto.lego.client.protobuf.BlockMessage.prototype.getBlockReq = function() {
  return /** @type{?proto.lego.client.protobuf.GetTxBlockRequest} */ (
    jspb.Message.getWrapperField(this, proto.lego.client.protobuf.GetTxBlockRequest, 1));
};


/** @param {?proto.lego.client.protobuf.GetTxBlockRequest|undefined} value */
proto.lego.client.protobuf.BlockMessage.prototype.setBlockReq = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lego.client.protobuf.BlockMessage.prototype.clearBlockReq = function() {
  this.setBlockReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BlockMessage.prototype.hasBlockReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetTxBlockResponse block_res = 2;
 * @return {?proto.lego.client.protobuf.GetTxBlockResponse}
 */
proto.lego.client.protobuf.BlockMessage.prototype.getBlockRes = function() {
  return /** @type{?proto.lego.client.protobuf.GetTxBlockResponse} */ (
    jspb.Message.getWrapperField(this, proto.lego.client.protobuf.GetTxBlockResponse, 2));
};


/** @param {?proto.lego.client.protobuf.GetTxBlockResponse|undefined} value */
proto.lego.client.protobuf.BlockMessage.prototype.setBlockRes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lego.client.protobuf.BlockMessage.prototype.clearBlockRes = function() {
  this.setBlockRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.BlockMessage.prototype.hasBlockRes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.TxInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.TxInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.TxInfo.displayName = 'proto.lego.client.protobuf.TxInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.TxInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.TxInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.TxInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.TxInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getField(msg, 1),
    gid: msg.getGid_asB64(),
    from: msg.getFrom_asB64(),
    fromPubkey: msg.getFromPubkey_asB64(),
    fromSign: msg.getFromSign_asB64(),
    to: msg.getTo_asB64(),
    amount: jspb.Message.getField(msg, 7),
    gasLimit: jspb.Message.getField(msg, 8),
    gasUsed: jspb.Message.getField(msg, 9),
    gasPrice: jspb.Message.getField(msg, 10),
    balance: jspb.Message.getField(msg, 11),
    toAdd: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.TxInfo}
 */
proto.lego.client.protobuf.TxInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.TxInfo;
  return proto.lego.client.protobuf.TxInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.TxInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.TxInfo}
 */
proto.lego.client.protobuf.TxInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromPubkey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromSign(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasPrice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToAdd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.TxInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.TxInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.TxInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.lego.client.protobuf.TxInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearVersion = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes gid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxInfo.prototype.getGid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes gid = 2;
 * This is a type-conversion wrapper around `getGid()`
 * @return {string}
 */
proto.lego.client.protobuf.TxInfo.prototype.getGid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGid()));
};


/**
 * optional bytes gid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGid()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxInfo.prototype.getGid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGid()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxInfo.prototype.setGid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearGid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasGid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes from = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes from = 3;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxInfo.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearFrom = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes from_pubkey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFromPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes from_pubkey = 4;
 * This is a type-conversion wrapper around `getFromPubkey()`
 * @return {string}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFromPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromPubkey()));
};


/**
 * optional bytes from_pubkey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromPubkey()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFromPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxInfo.prototype.setFromPubkey = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearFromPubkey = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasFromPubkey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes from_sign = 5;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFromSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes from_sign = 5;
 * This is a type-conversion wrapper around `getFromSign()`
 * @return {string}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFromSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromSign()));
};


/**
 * optional bytes from_sign = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromSign()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxInfo.prototype.getFromSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxInfo.prototype.setFromSign = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearFromSign = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasFromSign = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes to = 6;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxInfo.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes to = 6;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.lego.client.protobuf.TxInfo.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxInfo.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxInfo.prototype.setTo = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearTo = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasTo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 amount = 7;
 * @return {number}
 */
proto.lego.client.protobuf.TxInfo.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxInfo.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearAmount = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 gas_limit = 8;
 * @return {number}
 */
proto.lego.client.protobuf.TxInfo.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxInfo.prototype.setGasLimit = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearGasLimit = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasGasLimit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 gas_used = 9;
 * @return {number}
 */
proto.lego.client.protobuf.TxInfo.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxInfo.prototype.setGasUsed = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearGasUsed = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasGasUsed = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 gas_price = 10;
 * @return {number}
 */
proto.lego.client.protobuf.TxInfo.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxInfo.prototype.setGasPrice = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearGasPrice = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasGasPrice = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 balance = 11;
 * @return {number}
 */
proto.lego.client.protobuf.TxInfo.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxInfo.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearBalance = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool to_add = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.getToAdd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.lego.client.protobuf.TxInfo.prototype.setToAdd = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.lego.client.protobuf.TxInfo.prototype.clearToAdd = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxInfo.prototype.hasToAdd = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.TxBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lego.client.protobuf.TxBlock.repeatedFields_, null);
};
goog.inherits(proto.lego.client.protobuf.TxBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.TxBlock.displayName = 'proto.lego.client.protobuf.TxBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lego.client.protobuf.TxBlock.repeatedFields_ = [5,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.TxBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.TxBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.TxBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.TxBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    prehash: msg.getPrehash_asB64(),
    version: jspb.Message.getField(msg, 2),
    electVer: jspb.Message.getField(msg, 3),
    rcHash: msg.getRcHash_asB64(),
    bitmapList: jspb.Message.getRepeatedField(msg, 5),
    aggPubkey: msg.getAggPubkey_asB64(),
    aggSign: msg.getAggSign_asB64(),
    txId: jspb.Message.getField(msg, 8),
    txHash: msg.getTxHash_asB64(),
    txRootHash: msg.getTxRootHash_asB64(),
    txListList: jspb.Message.toObjectList(msg.getTxListList(),
    proto.lego.client.protobuf.TxInfo.toObject, includeInstance),
    networkId: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.TxBlock}
 */
proto.lego.client.protobuf.TxBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.TxBlock;
  return proto.lego.client.protobuf.TxBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.TxBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.TxBlock}
 */
proto.lego.client.protobuf.TxBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrehash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setElectVer(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRcHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addBitmap(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggPubkey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAggSign(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxId(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxRootHash(value);
      break;
    case 11:
      var value = new proto.lego.client.protobuf.TxInfo;
      reader.readMessage(value,proto.lego.client.protobuf.TxInfo.deserializeBinaryFromReader);
      msg.addTxList(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNetworkId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.TxBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.TxBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.TxBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getBitmapList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getTxListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.lego.client.protobuf.TxInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional bytes prehash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxBlock.prototype.getPrehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prehash = 1;
 * This is a type-conversion wrapper around `getPrehash()`
 * @return {string}
 */
proto.lego.client.protobuf.TxBlock.prototype.getPrehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrehash()));
};


/**
 * optional bytes prehash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrehash()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.getPrehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxBlock.prototype.setPrehash = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearPrehash = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasPrehash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.lego.client.protobuf.TxBlock.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxBlock.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 elect_ver = 3;
 * @return {number}
 */
proto.lego.client.protobuf.TxBlock.prototype.getElectVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxBlock.prototype.setElectVer = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearElectVer = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasElectVer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes rc_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxBlock.prototype.getRcHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes rc_hash = 4;
 * This is a type-conversion wrapper around `getRcHash()`
 * @return {string}
 */
proto.lego.client.protobuf.TxBlock.prototype.getRcHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRcHash()));
};


/**
 * optional bytes rc_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRcHash()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.getRcHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRcHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxBlock.prototype.setRcHash = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearRcHash = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasRcHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated uint64 bitmap = 5;
 * @return {!Array<number>}
 */
proto.lego.client.protobuf.TxBlock.prototype.getBitmapList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.lego.client.protobuf.TxBlock.prototype.setBitmapList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.lego.client.protobuf.TxBlock.prototype.addBitmap = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.lego.client.protobuf.TxBlock.prototype.clearBitmapList = function() {
  this.setBitmapList([]);
};


/**
 * optional bytes agg_pubkey = 6;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxBlock.prototype.getAggPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes agg_pubkey = 6;
 * This is a type-conversion wrapper around `getAggPubkey()`
 * @return {string}
 */
proto.lego.client.protobuf.TxBlock.prototype.getAggPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggPubkey()));
};


/**
 * optional bytes agg_pubkey = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggPubkey()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.getAggPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxBlock.prototype.setAggPubkey = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearAggPubkey = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasAggPubkey = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes agg_sign = 7;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxBlock.prototype.getAggSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes agg_sign = 7;
 * This is a type-conversion wrapper around `getAggSign()`
 * @return {string}
 */
proto.lego.client.protobuf.TxBlock.prototype.getAggSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAggSign()));
};


/**
 * optional bytes agg_sign = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggSign()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.getAggSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAggSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxBlock.prototype.setAggSign = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearAggSign = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasAggSign = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 tx_id = 8;
 * @return {number}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxBlock.prototype.setTxId = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearTxId = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasTxId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes tx_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes tx_hash = 9;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxBlock.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearTxHash = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasTxHash = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes tx_root_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxRootHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes tx_root_hash = 10;
 * This is a type-conversion wrapper around `getTxRootHash()`
 * @return {string}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxRootHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxRootHash()));
};


/**
 * optional bytes tx_root_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxRootHash()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxRootHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxRootHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.TxBlock.prototype.setTxRootHash = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearTxRootHash = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasTxRootHash = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated TxInfo tx_list = 11;
 * @return {!Array<!proto.lego.client.protobuf.TxInfo>}
 */
proto.lego.client.protobuf.TxBlock.prototype.getTxListList = function() {
  return /** @type{!Array<!proto.lego.client.protobuf.TxInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lego.client.protobuf.TxInfo, 11));
};


/** @param {!Array<!proto.lego.client.protobuf.TxInfo>} value */
proto.lego.client.protobuf.TxBlock.prototype.setTxListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.lego.client.protobuf.TxInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lego.client.protobuf.TxInfo}
 */
proto.lego.client.protobuf.TxBlock.prototype.addTxList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.lego.client.protobuf.TxInfo, opt_index);
};


proto.lego.client.protobuf.TxBlock.prototype.clearTxListList = function() {
  this.setTxListList([]);
};


/**
 * optional uint32 network_id = 12;
 * @return {number}
 */
proto.lego.client.protobuf.TxBlock.prototype.getNetworkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.TxBlock.prototype.setNetworkId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.lego.client.protobuf.TxBlock.prototype.clearNetworkId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.TxBlock.prototype.hasNetworkId = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lego.client.protobuf.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lego.client.protobuf.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lego.client.protobuf.Block.displayName = 'proto.lego.client.protobuf.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lego.client.protobuf.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.lego.client.protobuf.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lego.client.protobuf.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    height: jspb.Message.getField(msg, 2),
    txBlock: (f = msg.getTxBlock()) && proto.lego.client.protobuf.TxBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lego.client.protobuf.Block}
 */
proto.lego.client.protobuf.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lego.client.protobuf.Block;
  return proto.lego.client.protobuf.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lego.client.protobuf.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lego.client.protobuf.Block}
 */
proto.lego.client.protobuf.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new proto.lego.client.protobuf.TxBlock;
      reader.readMessage(value,proto.lego.client.protobuf.TxBlock.deserializeBinaryFromReader);
      msg.setTxBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lego.client.protobuf.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lego.client.protobuf.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lego.client.protobuf.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTxBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lego.client.protobuf.TxBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lego.client.protobuf.Block.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.lego.client.protobuf.Block.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.lego.client.protobuf.Block.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.lego.client.protobuf.Block.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lego.client.protobuf.Block.prototype.clearHash = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.Block.prototype.hasHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.lego.client.protobuf.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lego.client.protobuf.Block.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lego.client.protobuf.Block.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.Block.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TxBlock tx_block = 3;
 * @return {?proto.lego.client.protobuf.TxBlock}
 */
proto.lego.client.protobuf.Block.prototype.getTxBlock = function() {
  return /** @type{?proto.lego.client.protobuf.TxBlock} */ (
    jspb.Message.getWrapperField(this, proto.lego.client.protobuf.TxBlock, 3));
};


/** @param {?proto.lego.client.protobuf.TxBlock|undefined} value */
proto.lego.client.protobuf.Block.prototype.setTxBlock = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lego.client.protobuf.Block.prototype.clearTxBlock = function() {
  this.setTxBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lego.client.protobuf.Block.prototype.hasTxBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.lego.client.protobuf);
